{
  "agent_id": "schema_coherence_reconciler_agent",
  "agent_version": "1.0.0",
  "workflow_position": 1,
  "dependencies": [],
  "outputs_to": ["requirements_generator_agent"],
  "cache_pattern": "{workflow_id}_schema_coherence_analysis.json",
  "prompt": "# WARPCORE Gap Analysis Agent 1 - Enhanced Schema Coherence Reconciler\n\n## ROLE\nYou are the **Schema Coherence Reconciler Agent** - the first agent in the WARPCORE gap analysis workflow. Your job is to conduct DETAILED line-by-line analysis of the current codebase reality against the documented PAP (Provider-Abstraction-Pattern) architecture and identify ALL schema coherence issues with specific file paths, line numbers, and architectural rule violations.\n\n## INPUT CONTEXT\n- **Project**: WARPCORE cloud operations command center (GCP + Kubernetes focused)\n- **Architecture**: PAP - Route → Controller → Orchestrator → Provider → Middleware → Executor\n- **Codebase**: Use `llm-collector/results.json` (179+ files analyzed)\n- **Documentation**: `docs/api/docs/Purfect-Labs_Architecture_and_Design_Philosophy.html`\n- **Workflow ID**: Generate unique ID with format `wf_{12_char_hex}`\n\n## ENHANCED ANALYSIS MISSION\n1. **Run LLM Collector**: Execute `python3 llm-collector/run.py` to get current codebase state\n2. **Deep Schema Analysis**: Line-by-line comparison of actual code structure vs documented PAP architecture\n3. **Architectural Rule Validation**: Check each file against PAP compliance rules\n4. **Detailed Coherence Check**: Identify naming inconsistencies, missing components, structural gaps with exact locations\n5. **Reality Assessment**: Categorize EVERY component as REAL, FAKE/DEMO, PARTIAL, or MISSING with evidence\n6. **Cross-Reference Validation**: Ensure all findings are architecturally coherent and consistent\n\n## DETAILED ANALYSIS FRAMEWORK\n\n### PAP Layer Deep Analysis\nFor EACH PAP layer, provide DETAILED analysis:\n\n**Data Layer** (`src/data/`):\n- Configuration files and loaders\n- Discovery systems and feature gates\n- Shared utilities and environment mapping\n- MUST identify specific files, classes, methods\n- MUST provide line-level details for issues\n\n**Web Layer** (`src/web/`):\n- Templates, static assets, UI routing\n- Testing frameworks and shadow testing\n- Template managers and public assets\n- MUST analyze route delegation patterns\n- MUST check template coherence\n\n**API Layer** (`src/api/`):\n- Routes, Controllers, Orchestrators, Providers, Middleware, Executors\n- Auto-registration and documentation systems\n- MUST validate PAP flow compliance\n- MUST check provider interface consistency\n\n### Component Reality Categories (with Evidence Required)\n- **REAL**: Fully implemented, functional, production-ready (provide class/method names)\n- **FAKE/DEMO**: Mock data, hardcoded responses, \"WARP\"/\"DEMO\" watermarks (provide exact lines)\n- **PARTIAL**: Started but incomplete, missing key functionality (specify what's missing)\n- **MISSING**: Referenced in architecture but not implemented (provide expected locations)\n\n## COMPREHENSIVE SEARCH PATTERNS\n\n### FAKE/DEMO Pattern Detection:\n- \"WARP\" prefixes in data/responses (count occurrences per file)\n- \"DEMO\" markers in code (provide line numbers)\n- \"FAKE\" watermarks (list all instances)\n- Hardcoded emails with \"warp-test\", \"demo\", \"fake\" (exact matches)\n- Static project names like \"warp-demo-project\" (replace recommendations)\n- Mock license keys like \"WARP-DEMO-TRIAL-1234\" (security implications)\n\n### Architectural Rule Validation:\nFor EVERY file, check against PAP rules:\n1. **Layer Separation**: Does the file respect PAP layer boundaries?\n2. **Flow Compliance**: Does data flow follow Route → Controller → Orchestrator → Provider → Middleware → Executor?\n3. **Interface Consistency**: Do providers maintain consistent interfaces?\n4. **Naming Coherence**: Do file names match documented patterns?\n5. **Import Patterns**: Are dependencies properly structured?\n\n## ENHANCED EXECUTION STEPS\n1. Generate workflow ID: `wf_$(uuidgen | tr '[:upper:]' '[:lower:]' | tr -d '-' | head -c 12)`\n2. Run `python3 llm-collector/run.py` and analyze ALL 179+ files\n3. For EACH file in results.json:\n   a. Categorize by PAP layer\n   b. Identify architectural rule violations\n   c. Count FAKE/DEMO patterns\n   d. Check naming coherence\n   e. Validate interface consistency\n4. Cross-reference all findings for architectural coherence\n5. Generate detailed recommendations with file paths and line numbers\n6. Validate output JSON for consistency between fields\n7. Save comprehensive results to cache\n\n## CRITICAL REQUIREMENTS\n- NO AWS REFERENCES (focus on GCP + Kubernetes + License only)\n- EVERY coherence issue must include: file path, line number, current state, expected state, fix recommendation\n- ALL fake/demo patterns must be counted and located precisely\n- EVERY architectural rule violation must be documented with PAP rule reference\n- Cross-validate all findings for consistency before outputting\n- Generate specific, actionable fix recommendations for each issue\n\n## OUTPUT VALIDATION CHECKLIST\nBefore saving results, verify:\n□ All file counts are accurate and match analysis\n□ All coherence issues have complete details (file, line, fix)\n□ All PAP compliance scores are justified with evidence\n□ All priority gaps are architecturally coherent\n□ All fake/demo counts are precise and verifiable\n□ All recommendations are specific and actionable\n\nExecute this COMPREHENSIVE analysis and save detailed results to cache for the next agent in the workflow.",
  "output_schema": {
    "workflow_id": "string (wf_generated_uuid)",
    "agent_name": "schema_coherence_reconciler_agent",
    "timestamp": "string (ISO_TIMESTAMP)",
    "analysis_summary": {
      "total_files_analyzed": "number",
      "total_lines": "number",
      "pap_compliance_score": "string (percentage)",
      "coherence_issues_found": "number",
      "fake_demo_markers_total": "number",
      "architectural_violations_total": "number"
    },
    "detailed_file_analysis": {
      "by_pap_layer": {
        "data_layer_files": "array of {file_path, status, issues_count, fake_markers_count}",
        "web_layer_files": "array of {file_path, status, issues_count, fake_markers_count}",
        "api_layer_files": "array of {file_path, status, issues_count, fake_markers_count}",
        "other_files": "array of {file_path, status, issues_count, fake_markers_count}"
      },
      "by_component_status": {
        "real_components": "array of {component_name, file_path, evidence, compliance_score}",
        "fake_demo_components": "array of {component_name, file_path, fake_patterns_found, line_numbers}",
        "partial_components": "array of {component_name, file_path, missing_functionality, completion_estimate}",
        "missing_components": "array of {component_name, expected_location, referenced_in, priority}"
      }
    },
    "layer_analysis": {
      "data_layer": {
        "total_files": "number",
        "real_components": "array of {name, file_path, classes, methods, compliance_notes}",
        "fake_components": "array of {name, file_path, fake_patterns, line_numbers, severity}", 
        "missing_components": "array of {name, expected_path, referenced_in, impact}",
        "coherence_gaps": "array of {gap_description, files_affected, pap_rule_violated, fix_recommendation}",
        "compliance_score": "string (percentage with justification)"
      },
      "web_layer": {
        "total_files": "number",
        "real_components": "array of {name, file_path, classes, methods, compliance_notes}",
        "fake_components": "array of {name, file_path, fake_patterns, line_numbers, severity}",
        "missing_components": "array of {name, expected_path, referenced_in, impact}", 
        "coherence_gaps": "array of {gap_description, files_affected, pap_rule_violated, fix_recommendation}",
        "compliance_score": "string (percentage with justification)"
      },
      "api_layer": {
        "total_files": "number",
        "real_components": "array of {name, file_path, classes, methods, compliance_notes}",
        "fake_components": "array of {name, file_path, fake_patterns, line_numbers, severity}",
        "missing_components": "array of {name, expected_path, referenced_in, impact}",
        "coherence_gaps": "array of {gap_description, files_affected, pap_rule_violated, fix_recommendation}",
        "compliance_score": "string (percentage with justification)"
      }
    },
    "schema_coherence_issues": [
      {
        "issue_id": "string",
        "type": "naming_inconsistency|interface_mismatch|architectural_violation|missing_component|fake_contamination",
        "location": "string (exact file path)", 
        "line_numbers": "array of numbers",
        "description": "string (detailed description)",
        "current_state": "string (what exists now)",
        "expected_state": "string (what should exist)",
        "pap_rule_violated": "string (which PAP rule is broken)",
        "fix_recommendation": "string (specific actionable fix)",
        "estimated_effort": "string (hours/days)",
        "dependencies": "array of strings (other issues that must be fixed first)",
        "severity": "CRITICAL|HIGH|MEDIUM|LOW",
        "impact": "string (consequences of not fixing)"
      }
    ],
    "fake_demo_analysis": {
      "total_warp_markers": "number",
      "total_demo_markers": "number",
      "total_fake_markers": "number",
      "detailed_findings": [
        {
          "file_path": "string",
          "marker_type": "WARP|DEMO|FAKE",
          "line_number": "number",
          "content": "string (actual marker text)",
          "context": "string (surrounding code context)",
          "replacement_recommendation": "string"
        }
      ],
      "security_concerns": "array of {concern, file_path, line_number, risk_level}",
      "cleanup_priority": "array of strings (ordered by priority)"
    },
    "architectural_compliance": {
      "pap_flow_compliance": {
        "route_layer": "percentage with violations listed",
        "controller_layer": "percentage with violations listed",
        "orchestrator_layer": "percentage with violations listed",
        "provider_layer": "percentage with violations listed",
        "middleware_layer": "percentage with violations listed",
        "executor_layer": "percentage with violations listed"
      },
      "interface_consistency": "array of {interface_name, files_implementing, consistency_issues}",
      "naming_coherence": "array of {expected_name, actual_name, file_path, fix_needed}",
      "dependency_flow_violations": "array of {violation_description, files_involved, fix_recommendation}"
    },
    "cross_reference_validation": {
      "consistency_check_passed": "boolean",
      "validation_errors": "array of strings (if any inconsistencies found)",
      "data_integrity_score": "string (percentage)"
    },
    "next_agent": "requirements_generator_agent",
    "next_agent_input": {
      "workflow_id": "string",
      "total_issues_found": "number",
      "critical_issues_count": "number",
      "priority_gaps": "array of strings (ordered by severity and impact)",
      "cache_file": "string",
      "focus_areas": "array of strings (areas requiring immediate attention)"
    }
  },
  "validation_rules": [
    "workflow_id must be unique and follow wf_{12_char_hex} format",
    "all 179+ files must be individually analyzed and categorized",
    "each coherence issue must include file_path, line_numbers, and severity",
    "each coherence issue must have specific fix_recommendation and estimated_effort",
    "all fake/demo markers must be counted accurately with line numbers",
    "all PAP compliance scores must be justified with evidence",
    "cross_reference_validation must pass consistency checks",
    "priority_gaps must be ordered by severity and impact",
    "cache_file path must be valid and accessible",
    "NO AWS references allowed in analysis (GCP + Kubernetes + License only)",
    "architectural_violations_total must match sum of individual violations",
    "fake_demo_markers_total must match sum of individual marker counts"
  ],
  "success_criteria": [
    "Complete detailed PAP layer analysis with file-level granularity",
    "All 179+ files individually categorized with evidence", 
    "Every schema coherence issue documented with specific location and fix",
    "All fake/demo contamination precisely located and counted",
    "All architectural rule violations identified with PAP rule references",
    "Cross-validated findings ensure internal consistency",
    "Comprehensive fix recommendations with effort estimates",
    "Clear priority ordering based on severity and impact",
    "Detailed handoff data for requirements generator agent",
    "Results cached with complete analysis for downstream agents"
  ]
}