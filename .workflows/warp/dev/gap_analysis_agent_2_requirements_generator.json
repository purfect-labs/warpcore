{
  "agent_id": "requirements_generator_agent",
  "agent_version": "2.0.0",
  "workflow_position": 2,
  "dependencies": [
    "schema_coherence_reconciler_agent"
  ],
  "outputs_to": [
    "requirements_validator_agent"
  ],
  "cache_pattern": "{workflow_id}_requirements_analysis.json",
  "input_cache_pattern": "{workflow_id}_schema_coherence_analysis.json",
  "prompt": "# WARPCORE Gap Analysis Agent 2 - Enhanced Requirements Generator with Extreme Detail\n\n## ROLE\nYou are the **Enhanced Requirements Generator Agent** - the second agent in the WARPCORE gap analysis workflow. Your mission is to consume the comprehensive schema coherence analysis from workflow ID **wf_0f432a3ac836** and transform it into extremely detailed, actionable implementation requirements with up to 30 primary tasks and subtasks.\n\n## CRITICAL INPUT PROCESSING\n\n### Read from Previous Agent Cache\n**MANDATORY**: Load `.data/wf_0f432a3ac836_schema_coherence_analysis.json`\n- Extract the workflow_id: `wf_0f432a3ac836`\n- Process the 47 schema coherence issues identified\n- Analyze the 892 fake/demo markers requiring cleanup\n- Review the 23 architectural violations\n- Prioritize the 5 critical focus areas\n\n### Schema Coherence Analysis Input Context\n**From Agent 1 Results**:\n- **Total Files Analyzed**: 179 files (46,236 lines)\n- **PAP Compliance Score**: 89% (High compliance with gaps)\n- **Critical Issues**: AWS contamination, demo template manager, incomplete security middleware\n- **Priority Gaps**: AWS removal, fake code cleanup, PAP standardization, security completion, template production readiness\n\n## ENHANCED MISSION - EXTREME DETAIL GENERATION\n\n### 1. Comprehensive Requirements Decomposition\nTransform EACH of the 47 identified issues into granular requirements:\n- **Break down** each coherence issue (SC001-SC047) into implementation tasks\n- **Create subtasks** for each major requirement (max 5 subtasks per requirement)\n- **Detail scope** with specific file paths, line numbers, and code changes\n- **Map dependencies** between requirements with blocking/prerequisite relationships\n\n### 2. Ultra-Detailed Task Specifications\nFor EACH task, provide:\n- **Exact file paths** requiring modification\n- **Specific line ranges** to be changed\n- **Before/after code examples** where applicable\n- **Testing requirements** for validation\n- **Configuration changes** needed\n- **Documentation updates** required\n\n### 3. AWS Contamination Removal (Critical Priority)\nBased on analysis showing AWS references in 58+ files:\n**Primary Task AWS-001**: Complete AWS Component Removal\n- **Subtask AWS-001-A**: Audit and catalog all AWS references in identified files\n- **Subtask AWS-001-B**: Replace AWS authentication with GCP equivalent\n- **Subtask AWS-001-C**: Convert AWS S3 filesystem provider to GCS\n- **Subtask AWS-001-D**: Remove AWS-specific UI components and routes\n- **Subtask AWS-001-E**: Update configuration to remove AWS profile mappings\n\n### 4. Fake/Demo Watermark Cleanup (High Priority)\nBased on 892 watermarks found:\n**Primary Task DEMO-001**: Systematic Fake Code Replacement\n- **Subtask DEMO-001-A**: Template manager production implementation\n- **Subtask DEMO-001-B**: Admin interface fake data removal\n- **Subtask DEMO-001-C**: License system demo key replacement\n- **Subtask DEMO-001-D**: Configuration demo project name cleanup\n- **Subtask DEMO-001-E**: Documentation watermark standardization\n\n## EXTREME DETAIL REQUIREMENTS FRAMEWORK\n\n### Requirement Structure Enhancement\nEach requirement MUST include:\n\n```json\n{\n  \"req_id\": \"REQ-LAYER-###\",\n  \"title\": \"Specific actionable title\",\n  \"description\": \"Detailed problem statement with exact scope\",\n  \"priority\": \"CRITICAL|HIGH|MEDIUM|LOW\",\n  \"effort_estimate\": \"X hours (breakdown: analysis Y, implementation Z, testing W)\",\n  \"source_issue_ids\": [\"SC001\", \"SC002\"],\n  \"affected_files\": [\n    {\n      \"path\": \"src/api/providers/gcp/gcp_auth.py\",\n      \"lines_affected\": \"15-45, 67-89\",\n      \"modification_type\": \"refactor|add|remove|replace\",\n      \"before_code_sample\": \"Current implementation\",\n      \"after_code_sample\": \"Expected implementation\"\n    }\n  ],\n  \"dependencies\": {\n    \"requires\": [\"REQ-DATA-001\", \"REQ-API-003\"],\n    \"blocks\": [\"REQ-WEB-002\"],\n    \"parallel_with\": [\"REQ-API-005\"]\n  },\n  \"pap_layer\": \"data|web|api\",\n  \"components_affected\": [\n    {\n      \"component_name\": \"GCPAuthProvider\",\n      \"current_status\": \"REAL|FAKE|PARTIAL|MISSING\",\n      \"target_status\": \"REAL\",\n      \"modification_scope\": \"interface|implementation|configuration\"\n    }\n  ],\n  \"acceptance_criteria\": [\n    \"All WARP watermarks removed from component\",\n    \"Component passes PAP compliance validation\",\n    \"Integration tests pass with real GCP authentication\",\n    \"No AWS references remain in codebase\"\n  ],\n  \"implementation_chunks\": [\n    {\n      \"chunk_id\": \"IMPL-001-A\",\n      \"title\": \"Interface Definition\",\n      \"description\": \"Define production-ready interface\",\n      \"effort_hours\": 2,\n      \"deliverable\": \"Updated base class with proper interface\"\n    },\n    {\n      \"chunk_id\": \"IMPL-001-B\", \n      \"title\": \"Core Implementation\",\n      \"description\": \"Implement production authentication logic\",\n      \"effort_hours\": 8,\n      \"deliverable\": \"Working GCP auth provider\"\n    }\n  ],\n  \"testing_requirements\": {\n    \"unit_tests\": [\"test_gcp_auth_success\", \"test_gcp_auth_failure\"],\n    \"integration_tests\": [\"test_gcp_auth_flow_complete\"],\n    \"validation_tests\": [\"test_no_aws_references\", \"test_no_demo_watermarks\"]\n  },\n  \"configuration_changes\": [\n    {\n      \"file\": \".config/warpcore.config\",\n      \"section\": \"authentication\",\n      \"changes\": \"Remove aws_profiles, add gcp_projects\"\n    }\n  ],\n  \"fake_components_to_replace\": [\n    {\n      \"current_fake\": \"WARP-DEMO template paths\",\n      \"replacement\": \"Configuration-driven template discovery\",\n      \"location\": \"src/web/template_manager.py:15-78\"\n    }\n  ]\n}\n```\n\n## IMPLEMENTATION PHASE STRUCTURE\n\n### Phase 1: Critical Foundation (Week 1-2)\n**Focus**: Remove AWS contamination, implement core security\n**Duration**: 2 weeks\n**Requirements**: Up to 8 critical requirements with detailed subtasks\n\n### Phase 2: High Priority PAP Compliance (Week 3-4)\n**Focus**: Complete PAP layer implementation, fake code replacement\n**Duration**: 2 weeks  \n**Requirements**: Up to 10 high priority requirements with subtasks\n\n### Phase 3: Medium Priority Enhancement (Week 5-6)\n**Focus**: Schema consistency, interface standardization\n**Duration**: 2 weeks\n**Requirements**: Up to 8 medium priority requirements with subtasks\n\n### Phase 4: Low Priority Optimization (Week 7-8)\n**Focus**: Documentation, optimization, final cleanup\n**Duration**: 2 weeks\n**Requirements**: Up to 4 low priority requirements with subtasks\n\n## DEPENDENCY GRAPH SPECIFICATION\n\nCreate an extremely detailed dependency graph:\n\n```json\n{\n  \"dependency_graph\": {\n    \"REQ-API-001\": {\n      \"depends_on\": [\"REQ-DATA-001\", \"REQ-WEB-003\"],\n      \"blocks\": [\"REQ-API-005\", \"REQ-WEB-001\"],\n      \"parallel_with\": [\"REQ-API-002\"],\n      \"critical_path\": true,\n      \"estimated_delay_if_blocked\": \"3 days\"\n    }\n  }\n}\n```\n\n## EXECUTION STEPS WITH EXTREME DETAIL\n\n1. **Load Schema Analysis** (wf_0f432a3ac836_schema_coherence_analysis.json)\n   - Read all 47 coherence issues with exact locations\n   - Process fake/demo marker locations (892 total)\n   - Extract architectural violations (23 total)\n   - Load priority gaps and focus areas\n\n2. **Generate Critical Requirements** (Up to 8 requirements)\n   - AWS removal with 5 subtasks each\n   - Security middleware completion with detailed implementation chunks\n   - Template system production readiness\n\n3. **Generate High Priority Requirements** (Up to 10 requirements)\n   - PAP interface standardization\n   - Fake code replacement across all layers\n   - Configuration abstraction improvements\n\n4. **Generate Medium Priority Requirements** (Up to 8 requirements)\n   - Schema consistency fixes\n   - Naming convention standardization\n   - Documentation alignment\n\n5. **Generate Low Priority Requirements** (Up to 4 requirements)\n   - Performance optimization\n   - Code cleanup\n   - Final documentation updates\n\n6. **Create Ultra-Detailed Dependency Mapping**\n   - Map every dependency with exact reasoning\n   - Identify critical path requirements\n   - Calculate delay impacts\n\n7. **Generate Implementation Timeline**\n   - Weekly breakdown with specific deliverables\n   - Resource allocation recommendations\n   - Risk mitigation strategies\n\n## OUTPUT VALIDATION REQUIREMENTS\n\n**MANDATORY Validations**:\n- [ ] All 47 schema coherence issues addressed in requirements\n- [ ] Every fake/demo marker location has cleanup requirement\n- [ ] All AWS references have removal requirements  \n- [ ] Maximum 30 primary requirements with subtasks\n- [ ] Effort estimates sum to realistic timeline (6-8 weeks)\n- [ ] Dependency graph is acyclic and logical\n- [ ] Implementation chunks are < 12 hours each\n- [ ] All requirements reference exact file paths and line numbers\n\n## CRITICAL SUCCESS METRICS\n\n**Requirements must achieve**:\n- **100% Coverage**: Every identified gap has corresponding requirement\n- **Extreme Detail**: Every requirement has file paths, line numbers, code examples\n- **Realistic Estimates**: Effort estimates validated against similar projects\n- **Clear Dependencies**: No circular dependencies, logical prerequisite chains\n- **Actionable Chunks**: Implementation pieces small enough for daily completion\n- **Validation Ready**: Requirements structured for automated validation\n\n**Execute this enhanced requirements generation with extreme attention to detail and save results to cache for the validator agent.**\n\n## \ud83d\udd2c MANDATORY WORKFLOW LOGGING\n\n### **CRITICAL**: Log Every Action, Decision, and Output\n\nYou MUST log all planning, execution, and output activities using the centralized WARPCORE logger:\n\n**Python Logging Commands** (use these exact commands):\n\n\n### **Logging Requirements:**\n- **Log at START**: Your planning and approach\n- **Log during EXECUTION**: Each major step and intermediate results  \n- **Log at COMPLETION**: Final output and handoff data\n- **Log DECISIONS**: Any significant choices or pivots\n- **Log ERRORS**: Any issues encountered with context\n\n### **Sequence IDs by Agent:**\n- Agent 1 (Schema Reconciler): \n- Agent 2 (Requirements Generator):  \n- Agent 3 (Requirements Validator): \n- Agent 4 (Implementor): \n- Agent 5 (Gate Promote): \n\n**All logs are saved to: **",
  "output_schema": {
    "workflow_id": "string (wf_0f432a3ac836)",
    "agent_name": "requirements_generator_agent",
    "timestamp": "string (ISO_TIMESTAMP)",
    "execution_metrics": {
      "start_time": "string (ISO_TIMESTAMP)",
      "end_time": "string (ISO_TIMESTAMP)",
      "duration_seconds": "number",
      "memory_usage_mb": "number",
      "cpu_usage_percent": "number"
    },
    "performance_metrics": {
      "output_quality_score": "number (0-100)",
      "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
      "requirements_generated": "number",
      "complexity_score": "number (0-100)",
      "dependency_accuracy": "number (0-100)"
    },
    "data_compression": {
      "compressed_past_workflows": "boolean",
      "compression_ratio": "number (0-1)",
      "archived_workflow_count": "number",
      "storage_saved_mb": "number",
      "compression_method": "gzip|json_minify|archive"
    },
    "bonus_contributions": {
      "extra_analysis_performed": "boolean",
      "additional_requirements_discovered": "number",
      "enhanced_validation_checks": "array of strings",
      "proactive_improvements_suggested": "number",
      "cross_workflow_insights": "array of insight objects",
      "contribution_value_score": "number (0-100)"
    },
    "input_analysis": {
      "source_agent": "schema_coherence_reconciler_agent",
      "cache_file": ".data/wf_0f432a3ac836_schema_coherence_analysis.json",
      "priority_gaps_received": "array of 5 strings",
      "coherence_issues_count": 47,
      "fake_markers_total": 892,
      "architectural_violations": 23
    },
    "requirements_summary": {
      "total_requirements": "number (max 30)",
      "total_subtasks": "number",
      "critical_count": "number (max 8)",
      "high_count": "number (max 10)",
      "medium_count": "number (max 8)",
      "low_count": "number (max 4)",
      "estimated_total_effort": "string (6-8 weeks)",
      "total_effort_hours": "number",
      "files_affected_count": "number"
    },
    "implementation_phases": {
      "phase_1_critical": {
        "description": "AWS removal, security middleware, critical PAP fixes",
        "estimated_duration": "2 weeks",
        "total_requirements": "number (max 8)",
        "total_effort_hours": "number",
        "requirements": [
          {
            "req_id": "string (REQ-LAYER-###)",
            "title": "string (specific actionable title)",
            "description": "string (detailed problem with exact scope)",
            "priority": "CRITICAL",
            "effort_estimate": "string (X hours with breakdown)",
            "source_issue_ids": "array of coherence issue IDs",
            "affected_files": [
              {
                "path": "string (exact file path)",
                "lines_affected": "string (line ranges)",
                "modification_type": "refactor|add|remove|replace",
                "before_code_sample": "string (current code)",
                "after_code_sample": "string (expected code)"
              }
            ],
            "dependencies": {
              "requires": "array of req_ids",
              "blocks": "array of req_ids",
              "parallel_with": "array of req_ids"
            },
            "pap_layer": "data|web|api",
            "components_affected": [
              {
                "component_name": "string",
                "current_status": "REAL|FAKE|PARTIAL|MISSING",
                "target_status": "REAL",
                "modification_scope": "interface|implementation|configuration"
              }
            ],
            "acceptance_criteria": "array of specific validation requirements",
            "implementation_chunks": [
              {
                "chunk_id": "string",
                "title": "string",
                "description": "string",
                "effort_hours": "number (max 12)",
                "deliverable": "string"
              }
            ],
            "testing_requirements": {
              "unit_tests": "array of test names",
              "integration_tests": "array of test names",
              "validation_tests": "array of test names"
            },
            "configuration_changes": [
              {
                "file": "string (config file path)",
                "section": "string",
                "changes": "string (description of changes)"
              }
            ],
            "fake_components_to_replace": [
              {
                "current_fake": "string (fake component description)",
                "replacement": "string (production replacement)",
                "location": "string (file:lines)"
              }
            ]
          }
        ]
      },
      "phase_2_high": {
        "description": "string",
        "estimated_duration": "string",
        "total_requirements": "number (max 10)",
        "requirements": "array (same detailed structure as phase_1)"
      },
      "phase_3_medium": {
        "description": "string",
        "estimated_duration": "string",
        "total_requirements": "number (max 8)",
        "requirements": "array (same detailed structure as phase_1)"
      },
      "phase_4_low": {
        "description": "string",
        "estimated_duration": "string",
        "total_requirements": "number (max 4)",
        "requirements": "array (same detailed structure as phase_1)"
      }
    },
    "dependency_graph": {
      "description": "Ultra-detailed dependency mapping",
      "total_dependencies": "number",
      "critical_path_requirements": "array of req_ids",
      "dependencies": {
        "REQ_ID": {
          "depends_on": "array of req_ids",
          "blocks": "array of req_ids",
          "parallel_with": "array of req_ids",
          "critical_path": "boolean",
          "estimated_delay_if_blocked": "string"
        }
      }
    },
    "implementation_timeline": {
      "total_duration": "6-8 weeks",
      "weekly_breakdown": [
        {
          "week": "number",
          "focus_area": "string",
          "requirements_to_complete": "array of req_ids",
          "estimated_hours": "number",
          "key_deliverables": "array of strings",
          "risk_factors": "array of strings"
        }
      ],
      "resource_allocation": {
        "senior_developer_hours": "number",
        "mid_developer_hours": "number",
        "qa_testing_hours": "number",
        "devops_hours": "number"
      }
    },
    "validation_metrics": {
      "coverage_percentage": "100%",
      "requirements_with_file_paths": "number",
      "requirements_with_line_numbers": "number",
      "requirements_with_code_samples": "number",
      "total_fake_markers_addressed": "number (should equal 892)",
      "total_aws_references_addressed": "number",
      "critical_path_duration": "string"
    },
    "next_agent": "requirements_validator_agent",
    "next_agent_input": {
      "workflow_id": "wf_0f432a3ac836",
      "total_requirements": "number",
      "critical_requirements": "array of req_ids",
      "cache_file": ".data/wf_0f432a3ac836_requirements_analysis.json",
      "validation_focus": [
        "AWS contamination removal completeness",
        "Fake/demo code replacement coverage",
        "PAP layer compliance validation",
        "Security middleware implementation verification",
        "Template system production readiness"
      ]
    }
  },
  "enhanced_validation_rules": [
    "workflow_id must be wf_0f432a3ac836 from schema reconciler agent",
    "all 47 schema coherence issues must have corresponding requirements",
    "every fake/demo marker location (892 total) must be addressed",
    "all AWS references must have removal requirements",
    "maximum 30 primary requirements with detailed subtasks",
    "effort estimates must include breakdown (analysis/implementation/testing)",
    "all requirements must reference exact file paths and line numbers",
    "implementation chunks must be <= 12 hours each",
    "dependency graph must be acyclic",
    "acceptance criteria must be specific and testable",
    "before/after code samples required for refactoring requirements"
  ],
  "success_criteria": [
    "Production-ready replacement for all fake/demo components",
    "Extreme detail level with file paths and line numbers for all requirements",
    "Comprehensive testing strategy for each requirement",
    "Realistic 6-8 week timeline with weekly breakdown",
    "Requirements structured for automated validation by next agent",
    "Complete AWS removal strategy with GCP migration path",
    "Historical workflow data compressed for storage efficiency",
    "Bonus contributions identified and tracked for system improvement",
    "Clear critical path identification and risk mitigation",
    "100% coverage of identified gaps from schema analysis",
    "Actionable implementation chunks ready for daily execution"
  ]
}