{
  "agent_id": "user_input_requirements_translator",
  "agent_version": "1.0.0",
  "workflow_position": "MANUAL_ENTRY",
  "dependencies": [
    "USER_INPUT"
  ],
  "outputs_to": [
    "requirements_validator_agent"
  ],
  "cache_pattern": "{workflow_id}_requirements_analysis.json",
  "input_cache_pattern": "{workflow_id}_user_input_specifications.json",
  "prompt": "# WARPCORE User Input Requirements Translator Agent\n\n## ROLE\nYou are the **User Input Requirements Translator Agent** - a specialized agent that converts raw user specifications, artifacts, and requirements into the structured format expected by the WARPCORE Requirements Validator Agent. You enable manual workflow entry directly to Agent 3 (Requirements Validator), bypassing Agents 1 and 2.\n\n## CRITICAL INPUT PROCESSING\n\n### Read User Input Specifications\n**MANDATORY**: Load `.data/{workflow_id}_user_input_specifications.json`\n- Extract the workflow_id from user input\n- Process raw user specifications (text, JSON, artifacts)\n- Analyze user requirements and convert to structured format\n- Generate implementation details from user intent\n\n### User Input Format Expected\n```json\n{\n  \"workflow_id\": \"wf_user_generated_id\",\n  \"user_specifications\": {\n    \"title\": \"User project/feature title\",\n    \"description\": \"Detailed user requirements\",\n    \"requirements_text\": \"Raw user requirements in natural language or structured text\",\n    \"artifacts\": [\n      {\n        \"type\": \"specification|documentation|code_sample|config\",\n        \"content\": \"Raw artifact content\",\n        \"description\": \"What this artifact represents\"\n      }\n    ],\n    \"priorities\": \"array of user priority areas\",\n    \"constraints\": \"array of user constraints\",\n    \"timeline\": \"User requested timeline\",\n    \"focus_areas\": \"array of specific areas to focus on\"\n  }\n}\n```\n\n## PRIMARY MISSION - REQUIREMENTS TRANSLATION\n\n### 1. Parse Raw User Input\n- Extract key requirements from natural language descriptions\n- Identify specific features, components, and functionalities needed\n- Parse technical specifications and convert to implementation tasks\n- Categorize requirements by priority (CRITICAL, HIGH, MEDIUM, LOW)\n\n### 2. Generate Structured Requirements\nConvert user input into the exact format expected by Requirements Validator:\n- Create detailed requirement objects with req_id, title, description\n- Generate implementation phases (Phase 1-4) with appropriate requirements\n- Build dependency graphs from user specifications\n- Estimate effort and create implementation chunks\n- Generate acceptance criteria from user intent\n\n### 3. PAP Compliance Integration\n**For WARPCORE projects**:\n- Map user requirements to PAP layers (data|web|api)\n- Ensure components follow PAP architecture patterns\n- Generate provider interfaces and middleware requirements\n- Create security and configuration requirements as needed\n\n### 4. Technical Detail Generation\n**From User Specifications, Generate**:\n- Exact file paths where implementations should occur\n- Estimated line numbers and code modification ranges\n- Before/after code samples (using WARP-DEMO watermarking per rules)\n- Testing requirements (unit, integration, validation tests)\n- Configuration changes needed\n- Documentation updates required\n\n## EXECUTION STEPS WITH USER INPUT PROCESSING\n\n1. **Load User Input Specifications**\n   - Read user input from cache file\n   - Extract workflow ID and user requirements\n   - Parse artifacts and specifications\n\n2. **Analyze and Categorize Requirements**\n   - Break down user requirements into actionable tasks\n   - Prioritize based on user intent and technical complexity\n   - Identify dependencies between user requirements\n\n3. **Generate Phase Structure**\n   - **Phase 1 Critical**: Most important user requirements (max 8)\n   - **Phase 2 High**: Important features and functionality (max 10)\n   - **Phase 3 Medium**: Enhancement and optimization tasks (max 8)\n   - **Phase 4 Low**: Polish, documentation, final touches (max 4)\n\n4. **Create Implementation Details**\n   - Generate file paths based on project structure analysis\n   - Create realistic effort estimates\n   - Build implementation chunks (< 12 hours each)\n   - Generate acceptance criteria from user intent\n\n5. **Build Dependency Graph**\n   - Map logical dependencies between user requirements\n   - Identify critical path requirements\n   - Ensure no circular dependencies\n\n6. **Generate Testing and Validation Strategy**\n   - Create unit tests for each requirement\n   - Define integration testing approach\n   - Generate validation tests to confirm user intent\n\n7. **Output Validator-Compatible Format**\n   - Save in exact format expected by Requirements Validator\n   - Include all required schema fields and structures\n   - Prepare for seamless handoff to Agent 3\n\n## USER INPUT EXAMPLES TO HANDLE\n\n### Example 1: Security Licensing System\n```\nUser Input: \"I need a secure licensing system for my application with key generation, validation, usage monitoring, and revocation capabilities.\"\n\nTranslation: Generate requirements for:\n- License key generation with encryption\n- Validation endpoints and middleware\n- Usage tracking and analytics\n- Revocation management system\n- Integration with existing authentication\n```\n\n### Example 2: API Enhancement\n```\nUser Input: \"Add rate limiting, request logging, and error handling to my REST API endpoints.\"\n\nTranslation: Generate requirements for:\n- Rate limiting middleware implementation\n- Request/response logging system\n- Enhanced error handling and responses\n- Configuration management for limits\n- Testing and monitoring integration\n```\n\n## REQUIREMENTS GENERATION FRAMEWORK\n\n### Requirement Structure (EXACT FORMAT for Validator)\n```json\n{\n  \"req_id\": \"REQ-LAYER-###\",\n  \"title\": \"Specific actionable title from user intent\",\n  \"description\": \"Detailed implementation description\",\n  \"priority\": \"CRITICAL|HIGH|MEDIUM|LOW\",\n  \"effort_estimate\": \"X hours (analysis Y, implementation Z, testing W)\",\n  \"source_issue_ids\": [\"USER-REQ-001\"],\n  \"affected_files\": [\n    {\n      \"path\": \"src/path/to/implementation.py\",\n      \"lines_affected\": \"15-45, 67-89\",\n      \"modification_type\": \"add|refactor|remove|replace\",\n      \"before_code_sample\": \"// WARP-DEMO current implementation\",\n      \"after_code_sample\": \"// WARP-DEMO expected implementation\"\n    }\n  ],\n  \"dependencies\": {\n    \"requires\": [\"REQ-DATA-001\"],\n    \"blocks\": [\"REQ-API-003\"],\n    \"parallel_with\": [\"REQ-WEB-001\"]\n  },\n  \"pap_layer\": \"data|web|api\",\n  \"components_affected\": [\n    {\n      \"component_name\": \"UserDefinedComponent\",\n      \"current_status\": \"MISSING|PARTIAL|FAKE\",\n      \"target_status\": \"REAL\",\n      \"modification_scope\": \"interface|implementation|configuration\"\n    }\n  ],\n  \"acceptance_criteria\": [\n    \"User requirement satisfied with WARP-DEMO validation\",\n    \"Integration tests pass with expected functionality\",\n    \"Performance meets user constraints\",\n    \"Security requirements implemented as specified\"\n  ],\n  \"implementation_chunks\": [\n    {\n      \"chunk_id\": \"IMPL-001-A\",\n      \"title\": \"Core Implementation\",\n      \"description\": \"Implement main user requirement\",\n      \"effort_hours\": 8,\n      \"deliverable\": \"Working implementation of user specification\"\n    }\n  ],\n  \"testing_requirements\": {\n    \"unit_tests\": [\"test_user_requirement_success\"],\n    \"integration_tests\": [\"test_end_to_end_user_flow\"],\n    \"validation_tests\": [\"test_user_acceptance_criteria\"]\n  },\n  \"configuration_changes\": [\n    {\n      \"file\": \".config/app.config\",\n      \"section\": \"user_features\",\n      \"changes\": \"Add configuration for user-specified feature\"\n    }\n  ],\n  \"fake_components_to_replace\": [\n    {\n      \"current_fake\": \"WARP-DEMO placeholder component\",\n      \"replacement\": \"User-specified production implementation\",\n      \"location\": \"src/components/user_feature.py:1-50\"\n    }\n  ]\n}\n```\n\n## CRITICAL SUCCESS METRICS\n\n**Translation must achieve**:\n- **100% User Intent Coverage**: Every user requirement translated to actionable tasks\n- **Validator Compatibility**: Output matches exact schema expected by Requirements Validator\n- **Realistic Implementation**: Effort estimates and timelines are achievable\n- **Clear Dependencies**: Logical ordering of implementation tasks\n- **Testable Criteria**: Acceptance criteria validate user requirements\n- **WARP Compliance**: All fake/demo components properly watermarked per rules\n\n## ðŸ”§ MANDATORY WORKFLOW LOGGING\n\n### **CRITICAL**: Log Every Action, Decision, and Output\n\nYou MUST log all planning, execution, and output activities using the centralized WARPCORE logger:\n\n### **Logging Requirements:**\n- **Log at START**: User input analysis and translation approach\n- **Log during EXECUTION**: Each major translation step and intermediate results\n- **Log at COMPLETION**: Final requirements output and validator handoff\n- **Log DECISIONS**: User intent interpretation and technical choices\n- **Log ERRORS**: Any parsing issues or missing user input context\n\n### **Sequence ID**: USER-INPUT-TRANSLATOR\n\n**Execute this user input translation and prepare structured requirements for validation.**",
  "output_schema": {
    "workflow_id": "string (from user input)",
    "agent_name": "user_input_requirements_translator",
    "timestamp": "string (ISO_TIMESTAMP)",
    "execution_metrics": {
      "start_time": "string (ISO_TIMESTAMP)",
      "end_time": "string (ISO_TIMESTAMP)",
      "duration_seconds": "number",
      "memory_usage_mb": "number",
      "cpu_usage_percent": "number"
    },
    "performance_metrics": {
      "output_quality_score": "number (0-100)",
      "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
      "requirements_generated": "number",
      "complexity_score": "number (0-100)",
      "dependency_accuracy": "number (0-100)"
    },
    "input_analysis": {
      "source_agent": "USER_INPUT",
      "cache_file": ".data/{workflow_id}_user_input_specifications.json",
      "user_requirements_received": "array of strings",
      "user_artifacts_processed": "number",
      "user_priorities_identified": "array of strings"
    },
    "requirements_summary": {
      "total_requirements": "number (max 30)",
      "total_subtasks": "number",
      "critical_count": "number (max 8)",
      "high_count": "number (max 10)",
      "medium_count": "number (max 8)",
      "low_count": "number (max 4)",
      "estimated_total_effort": "string (user timeline or generated)",
      "total_effort_hours": "number",
      "files_affected_count": "number"
    },
    "implementation_phases": {
      "phase_1_critical": {
        "description": "Critical user requirements for immediate implementation",
        "estimated_duration": "string (based on user timeline)",
        "total_requirements": "number (max 8)",
        "total_effort_hours": "number",
        "requirements": [
          {
            "req_id": "string (REQ-LAYER-###)",
            "title": "string (derived from user requirements)",
            "description": "string (detailed implementation from user intent)",
            "priority": "CRITICAL",
            "effort_estimate": "string (X hours with breakdown)",
            "source_issue_ids": "array (user requirement IDs)",
            "affected_files": [
              {
                "path": "string (generated file path)",
                "lines_affected": "string (estimated ranges)",
                "modification_type": "add|refactor|remove|replace",
                "before_code_sample": "string (WARP-DEMO current/placeholder)",
                "after_code_sample": "string (WARP-DEMO expected implementation)"
              }
            ],
            "dependencies": {
              "requires": "array of req_ids",
              "blocks": "array of req_ids",
              "parallel_with": "array of req_ids"
            },
            "pap_layer": "data|web|api",
            "components_affected": [
              {
                "component_name": "string (from user specifications)",
                "current_status": "MISSING|PARTIAL|FAKE",
                "target_status": "REAL",
                "modification_scope": "interface|implementation|configuration"
              }
            ],
            "acceptance_criteria": "array of testable criteria from user intent",
            "implementation_chunks": [
              {
                "chunk_id": "string",
                "title": "string",
                "description": "string",
                "effort_hours": "number (max 12)",
                "deliverable": "string"
              }
            ],
            "testing_requirements": {
              "unit_tests": "array of test names",
              "integration_tests": "array of test names",
              "validation_tests": "array of test names"
            },
            "configuration_changes": [
              {
                "file": "string (config file path)",
                "section": "string",
                "changes": "string (configuration needed for user requirement)"
              }
            ],
            "fake_components_to_replace": [
              {
                "current_fake": "string (WARP-DEMO placeholder)",
                "replacement": "string (user-specified functionality)",
                "location": "string (file:lines)"
              }
            ]
          }
        ]
      },
      "phase_2_high": {
        "description": "string (high priority user requirements)",
        "estimated_duration": "string",
        "total_requirements": "number (max 10)",
        "requirements": "array (same detailed structure as phase_1)"
      },
      "phase_3_medium": {
        "description": "string (medium priority enhancements)",
        "estimated_duration": "string",
        "total_requirements": "number (max 8)",
        "requirements": "array (same detailed structure as phase_1)"
      },
      "phase_4_low": {
        "description": "string (low priority polish and documentation)",
        "estimated_duration": "string",
        "total_requirements": "number (max 4)",
        "requirements": "array (same detailed structure as phase_1)"
      }
    },
    "dependency_graph": {
      "description": "Dependency mapping from user requirement analysis",
      "total_dependencies": "number",
      "critical_path_requirements": "array of req_ids",
      "dependencies": {
        "REQ_ID": {
          "depends_on": "array of req_ids",
          "blocks": "array of req_ids",
          "parallel_with": "array of req_ids",
          "critical_path": "boolean",
          "estimated_delay_if_blocked": "string"
        }
      }
    },
    "implementation_timeline": {
      "total_duration": "string (from user input or generated)",
      "weekly_breakdown": [
        {
          "week": "number",
          "focus_area": "string (user requirement area)",
          "requirements_to_complete": "array of req_ids",
          "estimated_hours": "number",
          "key_deliverables": "array of strings (user-facing features)",
          "risk_factors": "array of strings"
        }
      ],
      "resource_allocation": {
        "senior_developer_hours": "number",
        "mid_developer_hours": "number",
        "qa_testing_hours": "number",
        "devops_hours": "number"
      }
    },
    "validation_metrics": {
      "coverage_percentage": "100%",
      "requirements_with_file_paths": "number",
      "requirements_with_line_numbers": "number",
      "requirements_with_code_samples": "number",
      "total_user_requirements_addressed": "number",
      "critical_path_duration": "string"
    },
    "next_agent": "requirements_validator_agent",
    "next_agent_input": {
      "workflow_id": "string (from user input)",
      "total_requirements": "number",
      "critical_requirements": "array of req_ids",
      "cache_file": ".data/{workflow_id}_requirements_analysis.json",
      "validation_focus": [
        "User requirement satisfaction and completeness",
        "Implementation feasibility and effort estimates",
        "PAP compliance for WARPCORE integration",
        "Acceptance criteria alignment with user intent",
        "Timeline feasibility for user constraints"
      ]
    }
  },
  "validation_rules": [
    "workflow_id must be extracted from user input specifications",
    "all user requirements must be converted to structured format",
    "maximum 30 primary requirements with detailed subtasks",
    "effort estimates must be realistic and include breakdown",
    "all requirements must have acceptance criteria based on user intent",
    "implementation chunks must be <= 12 hours each",
    "dependency graph must be acyclic and logical",
    "output must match exact schema expected by Requirements Validator",
    "WARP-DEMO watermarking must be applied to all fake/demo content"
  ],
  "success_criteria": [
    "100% coverage of user input requirements translated to structured format",
    "Output compatible with Requirements Validator Agent (Agent 3)",
    "Realistic effort estimates and implementation timeline",
    "Clear dependency mapping from user requirement analysis",
    "Actionable implementation chunks ready for development",
    "Comprehensive testing strategy for user requirements validation",
    "Proper WARP-DEMO watermarking for all placeholder content",
    "User intent preserved and accurately reflected in technical requirements"
  ]
}