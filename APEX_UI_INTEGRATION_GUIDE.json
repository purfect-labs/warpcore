{
  "title": "APEX License UI Components ‚Üí WARPCORE Integration Guide",
  "description": "Step-by-step guide to copy and adapt APEX license UI components to work with existing WARPCORE license server APIs",
  "version": "1.0.0",
  "created_date": "2025-10-08T03:26:41Z",

  "prerequisites": {
    "warpcore_backend_ready": true,
    "license_server_endpoints": [
      "POST /api/license/generate",
      "POST /api/license/validate", 
      "POST /api/license/purchase",
      "GET /api/license/status",
      "DELETE /api/license/revoke/{id}",
      "GET /api/license/types"
    ],
    "server_running": "http://localhost:8001 (license server) + http://localhost:8000 (main app)"
  },

  "files_to_copy_from_apex": {
    "source_directory": "/Users/shawn_meredith/code/pets/apex/web",
    "target_directory": "/Users/shawn_meredith/code/pets/warpcore/src/web",
    
    "files": {
      "html_templates": {
        "source": "/Users/shawn_meredith/code/pets/apex/web/templates/components/licensing/license_modal.html",
        "target": "/Users/shawn_meredith/code/pets/warpcore/src/web/templates/components/licensing/license_modal.html",
        "action": "copy_and_adapt",
        "changes_required": [
          "Update API endpoints from /api/license/* to match WARPCORE endpoints",
          "Change trial days from 30 to 14 (per WARPCORE spec)",
          "Update feature lists to match WARPCORE tiers",
          "Add real-time polling for activation status",
          "Update styling classes to match WARPCORE theme"
        ]
      },
      
      "css_styles": {
        "source": "/Users/shawn_meredith/code/pets/apex/web/static/css/components/base.css",
        "target": "/Users/shawn_meredith/code/pets/warpcore/src/web/static/css/components/licensing/license.css",
        "action": "extract_license_styles",
        "changes_required": [
          "Extract only license-related CSS classes",
          "Add loading states for polling operations", 
          "Add success/error animation classes",
          "Update color scheme to match WARPCORE theme"
        ]
      },

      "javascript_components": {
        "apex_base": "/Users/shawn_meredith/code/pets/apex/web/static/js/components/",
        "warpcore_target": "/Users/shawn_meredith/code/pets/warpcore/src/web/static/js/components/",
        "new_files_to_create": [
          "LicenseModal.js",
          "LicenseStatusDisplay.js", 
          "LicenseActivationForm.js",
          "TrialForm.js",
          "LicenseKeyDisplay.js"
        ],
        "extract_from_apex_modal": "Extract inline JavaScript from license_modal.html into modular components"
      }
    }
  },

  "step_by_step_implementation": {
    "step_1_copy_html_template": {
      "description": "Copy and adapt the APEX license modal HTML to WARPCORE",
      "commands": [
        "mkdir -p /Users/shawn_meredith/code/pets/warpcore/src/web/templates/components/licensing",
        "cp /Users/shawn_meredith/code/pets/apex/web/templates/components/licensing/license_modal.html /Users/shawn_meredith/code/pets/warpcore/src/web/templates/components/licensing/license_modal.html"
      ],
      "manual_edits_required": {
        "file": "src/web/templates/components/licensing/license_modal.html",
        "changes": [
          {
            "line": "68",
            "change": "Update trial days from 30 to 14",
            "from": "üÜì Get full access to Trial features for 30 days:",
            "to": "üÜì Get full access to Professional features for 14 days:"
          },
          {
            "line": "85",
            "change": "Update trial button text",
            "from": "Start 30-Day Trial",
            "to": "Start 14-Day Trial"
          },
          {
            "line": "242",
            "change": "Update trial generation API call",
            "from": "days: 30",
            "to": "days: 14"
          },
          {
            "section": "features_list",
            "change": "Update feature list to match WARPCORE",
            "from": "AWS SSO, GCP Auth, Live Logs, Kiali, ECS, CloudWatch",
            "to": "GCP Authentication, Kubernetes Operations, Live Log Streaming, Multi-Environment Support, Advanced Analytics, Export Capabilities"
          }
        ]
      }
    },

    "step_2_update_api_endpoints": {
      "description": "Update JavaScript API calls to match WARPCORE license server endpoints",
      "file": "src/web/templates/components/licensing/license_modal.html",
      "api_endpoint_changes": [
        {
          "function": "validateLicenseKey()",
          "from": "'/api/license/validate'",
          "to": "'http://localhost:8001/api/license/validate'", 
          "note": "Point to license server on port 8001"
        },
        {
          "function": "license activation",
          "from": "'/api/license/activate'",
          "to": "'http://localhost:8001/api/license/generate'",
          "note": "WARPCORE uses generate endpoint for activation",
          "payload_change": {
            "from": "{ license_key: licenseKey, user_email: userEmail }",
            "to": "{ user_email: userEmail, user_name: userEmail.split('@')[0], license_type: 'professional', hardware_signature: getHardwareSignature() }"
          }
        },
        {
          "function": "trial generation", 
          "from": "'/api/license/generate-trial'",
          "to": "'http://localhost:8001/api/license/generate'",
          "payload_change": {
            "from": "{ user_email: email, days: 14 }",
            "to": "{ user_email: email, user_name: email.split('@')[0], license_type: 'trial' }"
          }
        },
        {
          "function": "license status",
          "from": "'/api/license/status'", 
          "to": "'http://localhost:8001/api/license/validate'",
          "note": "Use validate endpoint with current license key to get status"
        }
      ]
    },

    "step_3_add_hardware_signature": {
      "description": "Add hardware signature generation for WARPCORE license binding",
      "new_function": {
        "name": "getHardwareSignature()",
        "location": "Before validateLicenseKey() function",
        "code": "function getHardwareSignature() {\n  // Generate hardware fingerprint for license binding\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  ctx.textBaseline = 'top';\n  ctx.font = '14px Arial';\n  ctx.fillText('Hardware fingerprint', 2, 2);\n  \n  const signature = [\n    navigator.userAgent,\n    navigator.language,\n    screen.width + 'x' + screen.height,\n    screen.colorDepth,\n    new Date().getTimezoneOffset(),\n    canvas.toDataURL()\n  ].join('|');\n  \n  // Simple hash function\n  let hash = 0;\n  for (let i = 0; i < signature.length; i++) {\n    const char = signature.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32-bit integer\n  }\n  \n  return Math.abs(hash).toString(16);\n}"
      }
    },

    "step_4_add_polling_mechanism": {
      "description": "Add real-time polling for license activation status",
      "new_functions": [
        {
          "name": "pollLicenseActivation(licenseKey)",
          "purpose": "Poll activation status every 3 seconds for up to 30 seconds",
          "code": "async function pollLicenseActivation(licenseKey, maxAttempts = 10) {\n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    try {\n      const response = await fetch('http://localhost:8001/api/license/validate', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          license_key: licenseKey,\n          hardware_signature: getHardwareSignature()\n        })\n      });\n      \n      const result = await response.json();\n      \n      if (result.valid) {\n        showSuccess('‚úÖ License activated successfully!');\n        setTimeout(() => location.reload(), 2000);\n        return true;\n      }\n      \n      if (attempt < maxAttempts) {\n        showLoading(`üîÑ Activating license... (${attempt}/${maxAttempts})`);\n        await new Promise(resolve => setTimeout(resolve, 3000));\n      }\n    } catch (error) {\n      console.error('Polling error:', error);\n    }\n  }\n  \n  showError('‚ùå License activation timed out. Please try again.');\n  return false;\n}"
        },
        {
          "name": "showLoading(message)",
          "code": "function showLoading(message) {\n  const resultDiv = document.getElementById('license-validation-result');\n  resultDiv.innerHTML = `<div class=\"loading\"><span class=\"spinner\"></span> ${message}</div>`;\n}"
        },
        {
          "name": "showSuccess(message)",
          "code": "function showSuccess(message) {\n  const resultDiv = document.getElementById('license-validation-result');\n  resultDiv.innerHTML = `<div class=\"success\">${message}</div>`;\n}"
        },
        {
          "name": "showError(message)",
          "code": "function showError(message) {\n  const resultDiv = document.getElementById('license-validation-result');\n  resultDiv.innerHTML = `<div class=\"error\">${message}</div>`;\n}"
        }
      ]
    },

    "step_5_update_form_handlers": {
      "description": "Update form submission handlers to use new polling mechanism",
      "changes": [
        {
          "form": "license-activate-form",
          "update": "Replace direct activation with generation + polling",
          "new_logic": "1. Call /api/license/generate to get license key\n2. Start polling with returned license key\n3. Show progress messages during polling\n4. Reload page on success or show error on timeout"
        },
        {
          "form": "trial-form", 
          "update": "Generate trial license and auto-activate",
          "new_logic": "1. Call /api/license/generate with trial type\n2. Store generated key in localStorage\n3. Start polling with generated key\n4. Auto-activate on success"
        }
      ]
    },

    "step_6_add_css_styles": {
      "description": "Add CSS for loading states and animations",
      "target_file": "src/web/static/css/components/licensing/license.css",
      "create_from_apex": "Extract license styles from apex base.css",
      "new_styles_needed": [
        ".loading { display: flex; align-items: center; color: #007bff; }",
        ".spinner { width: 16px; height: 16px; border: 2px solid #f3f3f3; border-top: 2px solid #007bff; border-radius: 50%; animation: spin 1s linear infinite; margin-right: 8px; }",
        "@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }",
        ".success { color: #28a745; font-weight: bold; }",
        ".error { color: #dc3545; font-weight: bold; }",
        ".license-badge.active { background-color: #28a745; color: white; }",
        ".license-badge.inactive { background-color: #6c757d; color: white; }",
        ".license-tab.active { background-color: #007bff; color: white; }",
        ".license-input { width: 100%; padding: 8px 12px; border: 1px solid #ddd; border-radius: 4px; }",
        ".form-actions { display: flex; gap: 10px; justify-content: flex-end; margin-top: 15px; }"
      ]
    },

    "step_7_integrate_with_main_app": {
      "description": "Integrate license modal with main WARPCORE application",
      "files_to_update": [
        {
          "file": "src/web/templates/main.html",
          "action": "Include license modal template",
          "add_line": "{% include 'components/licensing/license_modal.html' %}"
        },
        {
          "file": "src/web/static/css/main.css",
          "action": "Import license styles", 
          "add_line": "@import url('components/licensing/license.css');"
        },
        {
          "file": "src/web/static/js/main.js",
          "action": "Add license modal trigger",
          "add_function": "function openLicenseModal() {\n  document.getElementById('license-modal').style.display = 'flex';\n}"
        }
      ]
    }
  },

  "testing_checklist": {
    "manual_testing": [
      "‚úÖ Open license modal from main app",
      "‚úÖ Test license key validation (format checking)",
      "‚úÖ Test trial license generation",
      "‚úÖ Test license activation with polling",
      "‚úÖ Test error handling (invalid keys, network errors)",
      "‚úÖ Test license status refresh",
      "‚úÖ Test license deactivation"
    ],
    
    "api_testing": [
      "curl -X POST http://localhost:8001/api/license/generate -H 'Content-Type: application/json' -d '{\"user_email\":\"test@example.com\",\"user_name\":\"Test User\",\"license_type\":\"trial\"}'",
      "curl -X POST http://localhost:8001/api/license/validate -H 'Content-Type: application/json' -d '{\"license_key\":\"WARP-XXXX-XXXX-XXXX\"}'"
    ],

    "playwright_tests": [
      "Create license_ui_integration.spec.js",
      "Test license modal open/close",
      "Test form submissions and validation",
      "Test real-time polling behavior",
      "Test error message display"
    ]
  },

  "implementation_commands": {
    "quick_setup": [
      "# Create directory structure",
      "mkdir -p /Users/shawn_meredith/code/pets/warpcore/src/web/templates/components/licensing",
      "mkdir -p /Users/shawn_meredith/code/pets/warpcore/src/web/static/css/components/licensing",
      "",
      "# Copy base HTML template from APEX",
      "cp /Users/shawn_meredith/code/pets/apex/web/templates/components/licensing/license_modal.html /Users/shawn_meredith/code/pets/warpcore/src/web/templates/components/licensing/license_modal.html",
      "",
      "# Extract CSS from APEX base styles",
      "grep -A 20 -B 5 'license\\|modal\\|form' /Users/shawn_meredith/code/pets/apex/web/static/css/components/base.css > /Users/shawn_meredith/code/pets/warpcore/src/web/static/css/components/licensing/license.css"
    ]
  },

  "key_adaptations_required": {
    "api_integration": {
      "apex_pattern": "Direct controller integration via FastAPI routes",
      "warpcore_pattern": "Remote license server API calls with cross-origin requests",
      "changes_needed": [
        "Add CORS headers handling",
        "Update endpoint URLs to license server",
        "Add hardware signature generation",
        "Implement polling for async operations"
      ]
    },

    "feature_differences": {
      "trial_duration": {
        "apex": "30 days",
        "warpcore": "14 days"
      },
      "license_format": {
        "apex": "Base64 encoded encrypted data",
        "warpcore": "WARP-XXXX-XXXX-XXXX format"
      },
      "activation_flow": {
        "apex": "Direct activation with immediate response",
        "warpcore": "Generation + polling for activation status"
      }
    },

    "ui_enhancements": {
      "real_time_feedback": "Add polling progress indicators",
      "error_recovery": "Add retry mechanisms for failed operations", 
      "hardware_binding": "Add hardware signature display and management",
      "license_key_display": "Add copy-to-clipboard functionality for generated keys"
    }
  },

  "final_file_structure": {
    "after_implementation": {
      "src/web/templates/components/licensing/": [
        "license_modal.html (adapted from APEX)"
      ],
      "src/web/static/css/components/licensing/": [
        "license.css (extracted and enhanced from APEX)"
      ],
      "src/web/static/js/components/licensing/": [
        "LicenseModal.js (optional - for modular approach)",
        "LicenseStatusDisplay.js (optional)",
        "LicenseActivationForm.js (optional)"
      ]
    }
  },

  "success_criteria": {
    "functional": [
      "‚úÖ License modal opens and displays correctly",
      "‚úÖ Trial generation works with 14-day duration",
      "‚úÖ License activation works with polling mechanism",
      "‚úÖ Real-time validation provides immediate feedback",
      "‚úÖ Error handling shows appropriate messages",
      "‚úÖ License status refreshes correctly",
      "‚úÖ Hardware signature generation works"
    ],
    "integration": [
      "‚úÖ Modal integrates seamlessly with main WARPCORE app",
      "‚úÖ All API calls connect to license server on port 8001",
      "‚úÖ CORS issues resolved for cross-origin requests",
      "‚úÖ Styling matches WARPCORE theme"
    ],
    "user_experience": [
      "‚úÖ Smooth activation flow with progress feedback",
      "‚úÖ Clear error messages for troubleshooting", 
      "‚úÖ Professional UI that matches rest of application",
      "‚úÖ Responsive design works on different screen sizes"
    ]
  }
}