{
  "metadata": {
    "generated_at": "2025-10-09T03:30:06.314551",
    "total_franchises": 4,
    "total_agents": 44,
    "polymorphic_mappings_count": 26
  },
  "polymorphic_mappings": {
    "bootstrap_agent": "BootstrapAgentSchema",
    "workflow_orchestrator_agent": "OrchestratorAgentSchema",
    "schema_coherence_reconciler_agent": "SchemaReconcilerAgentSchema",
    "requirements_generator_agent": "RequirementsGeneratorAgentSchema",
    "requirements_validator_agent": "RequirementsValidatorAgentSchema",
    "implementation_agent": "ImplementationAgentSchema",
    "gate_promote_agent": "GatePromoteAgentSchema",
    "user_input_requirements_translator": "UserInputTranslatorAgentSchema",
    "origin": "BootstrapAgentSchema",
    "boss": "OrchestratorAgentSchema",
    "pathfinder": "SchemaReconcilerAgentSchema",
    "oracle": "UserInputTranslatorAgentSchema",
    "architect": "RequirementsGeneratorAgentSchema",
    "enforcer": "RequirementsValidatorAgentSchema",
    "craftsman_implementation": "ImplementationAgentSchema",
    "craftbuddy": "RequirementsGeneratorAgentSchema",
    "gatekeeper": "GatePromoteAgentSchema",
    "ghostwriter": "RequirementsGeneratorAgentSchema",
    "alice": "RequirementsValidatorAgentSchema",
    "flux": "ImplementationAgentSchema",
    "mama_bear": "GatePromoteAgentSchema",
    "harmony": "SchemaReconcilerAgentSchema",
    "deep": "RequirementsGeneratorAgentSchema",
    "cipher": "RequirementsValidatorAgentSchema",
    "glitch": "ImplementationAgentSchema",
    "zero": "GatePromoteAgentSchema"
  },
  "franchises": {
    "apex": [
      {
        "name": "Commander",
        "id": "commander",
        "file": "1_commander_from_user_to_tactician.json",
        "franchise": "apex",
        "polymorphic_schema": null,
        "json_data": {
          "name": "COMMANDER",
          "role": "Strategic Command Agent",
          "description": "High-level strategic command and control agent for apex operations",
          "capabilities": [
            "strategic_planning",
            "command_coordination",
            "tactical_oversight"
          ],
          "franchise": "apex",
          "version": "1.0.0",
          "build_trace_id": "BUILD_20251009_032956_7fa987f7",
          "build_timestamp": "2025-10-09T03:29:56.360298",
          "output_schema": {
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)"
          },
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.360326",
            "build_trace_id": "BUILD_20251009_032956_7fa987f7",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 8473,
        "last_modified": "2025-10-09T03:29:56.362884"
      },
      {
        "name": "Intel",
        "id": "intel",
        "file": "4_intel_from_user_to_commander.json",
        "franchise": "apex",
        "polymorphic_schema": null,
        "json_data": {
          "name": "INTEL",
          "role": "Intelligence Gathering Agent",
          "description": "Intelligence and reconnaissance gathering agent for strategic analysis",
          "capabilities": [
            "intelligence_gathering",
            "reconnaissance",
            "threat_analysis",
            "strategic_intelligence"
          ],
          "franchise": "apex",
          "version": "1.0.0",
          "build_trace_id": "BUILD_20251009_032956_8553ac45",
          "build_timestamp": "2025-10-09T03:29:56.363233",
          "output_schema": {
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)"
          },
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.363273",
            "build_trace_id": "BUILD_20251009_032956_8553ac45",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 8490,
        "last_modified": "2025-10-09T03:29:56.363507"
      },
      {
        "name": "Operator",
        "id": "operator",
        "file": "3_operator_from_tactician_to_complete.json",
        "franchise": "apex",
        "polymorphic_schema": null,
        "json_data": {
          "name": "OPERATOR",
          "role": "Field Operations Agent",
          "description": "Direct field operations and execution agent",
          "capabilities": [
            "field_execution",
            "direct_operations",
            "mission_completion"
          ],
          "franchise": "apex",
          "version": "1.0.0",
          "build_trace_id": "BUILD_20251009_032956_ab7841f0",
          "build_timestamp": "2025-10-09T03:29:56.359271",
          "output_schema": {
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)"
          },
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.359308",
            "build_trace_id": "BUILD_20251009_032956_ab7841f0",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 8424,
        "last_modified": "2025-10-09T03:29:56.359501"
      },
      {
        "name": "Tactician",
        "id": "tactician",
        "file": "2_tactician_from_commander_to_operator.json",
        "franchise": "apex",
        "polymorphic_schema": null,
        "json_data": {
          "name": "TACTICIAN",
          "role": "Tactical Planning Agent",
          "description": "Detailed tactical planning and execution coordination agent",
          "capabilities": [
            "tactical_analysis",
            "operation_planning",
            "resource_coordination"
          ],
          "franchise": "apex",
          "version": "1.0.0",
          "build_trace_id": "BUILD_20251009_032956_bcf2418c",
          "build_timestamp": "2025-10-09T03:29:56.356235",
          "output_schema": {
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)"
          },
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.356284",
            "build_trace_id": "BUILD_20251009_032956_bcf2418c",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 8451,
        "last_modified": "2025-10-09T03:29:56.358913"
      }
    ],
    "framer": [
      {
        "name": "Alice",
        "id": "alice",
        "file": "7_alice_from_ghostwriter_to_flux.json",
        "franchise": "framer",
        "polymorphic_schema": {
          "schema_class": "RequirementsValidatorAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Requirements validation",
            "PAP compliance checking",
            "Feasibility assessment",
            "Implementation readiness"
          ]
        },
        "json_data": {
          "agent_id": "alice",
          "agent_version": "1.0.0",
          "output_schema": {
            "workflow_id": "string",
            "agent_name": "alice_agent",
            "timestamp": "string (ISO_TIMESTAMP)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "enhancement_time": "number",
              "consultation_time": "number"
            },
            "input_analysis": {
              "source_agent": "ghostwriter",
              "content_loaded": "boolean",
              "enhancement_opportunities_identified": "number",
              "creative_potential_assessed": "string",
              "baseline_engagement_score": "number (0-100)"
            },
            "creative_enhancement": {
              "muchness_elements_added": {
                "personality_injections": "array of strings",
                "engaging_examples": "array of strings",
                "memorable_analogies": "array of strings",
                "creative_hooks": "array of strings",
                "visual_enhancements": "array of strings"
              },
              "enhancement_summary": {
                "primary_enhancements": "array of enhancement objects",
                "creative_theme": "string",
                "voice_and_tone": "string",
                "user_experience_improvements": "array of strings"
              }
            },
            "craftbuddy_consultation": {
              "consultation_requested": "boolean",
              "consultation_topics": "array of strings",
              "craftbuddy_feedback": "object",
              "feedback_integration": {
                "approved_enhancements": "array of strings",
                "modified_enhancements": "array of strings",
                "rejected_enhancements": "array of strings",
                "alternative_suggestions": "array of strings"
              }
            },
            "enhanced_content": {
              "title": "string",
              "enhanced_sections": "array of content section objects",
              "creative_elements": "array of creative element objects",
              "engagement_features": "array of feature objects",
              "user_experience_notes": "string"
            },
            "quality_assessment": {
              "creativity_enhancement_score": "number (0-100)",
              "factual_accuracy_maintained": "boolean",
              "user_intent_preserved": "boolean",
              "technical_feasibility_validated": "boolean",
              "final_engagement_score": "number (0-100)",
              "enhancement_quality_rating": "EXCELLENT|GOOD|FAIR|POOR"
            },
            "flux_publishing_package": {
              "content_ready_for_publishing": "boolean",
              "distribution_metadata": "object",
              "target_audience_notes": "string",
              "publishing_recommendations": "array of strings",
              "performance_tracking_suggestions": "array of strings"
            },
            "agent_id": "string (agent identifier)",
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)",
            "validation_summary": {
              "requirements_validated": "number",
              "pap_compliant": "number",
              "feasible": "number",
              "implementation_ready": "number",
              "overall_status": "PASS|NEEDS_REVISION|FAIL"
            },
            "validated_requirements": {
              "approved_for_implementation": "array of requirement objects",
              "requires_revision": "array of requirement objects",
              "rejected": "array of requirement objects"
            }
          },
          "description": "ALICE",
          "build_trace_id": "BUILD_20251009_032956_cede2ec9",
          "build_timestamp": "2025-10-09T03:29:56.377402",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.377441",
            "build_trace_id": "BUILD_20251009_032956_cede2ec9",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 19483,
        "last_modified": "2025-10-09T03:29:56.377702"
      },
      {
        "name": "Architect",
        "id": "architect",
        "file": "2_architect_from_pathfinder_oracle_to_enforcer.json",
        "franchise": "framer",
        "polymorphic_schema": {
          "schema_class": "RequirementsGeneratorAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Requirements enumeration",
            "Priority classification",
            "Implementation phases",
            "Dependency mapping"
          ]
        },
        "json_data": {
          "agent_id": "architect",
          "agent_version": "2.0.0",
          "output_schema": {
            "workflow_id": "string (FROM_SMART_INPUT_DISCOVERY)",
            "agent_name": "requirements_analysis_agent",
            "source_agent_type": "schema_based_requirements_generator",
            "timestamp": "string (ISO_TIMESTAMP)",
            "client_directory": "CLIENT_DIR_ABSOLUTE",
            "workflow_specification": "string (path to workflow spec file)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "requirements_generated": "number",
              "complexity_score": "number (0-100)",
              "dependency_accuracy": "number (0-100)"
            },
            "client_codebase_analysis": {
              "llm_collector_run": "boolean",
              "total_files_analyzed": "number",
              "existing_components_identified": "array of components",
              "pap_layer_mapping": "object with layer breakdown",
              "integration_points": "array of integration opportunities"
            },
            "input_analysis": {
              "source_agent": "pathfinder",
              "cache_file": ".data/{workflow_id}_{trace_id}_previous_agent_output.json",
              "user_requirements_received": "array of strings (from schema gaps)",
              "workflow_spec_processed": "string",
              "user_priorities_identified": "array of strings (from schema analysis)"
            },
            "requirements_summary": {
              "total_requirements": "number (max 30)",
              "total_subtasks": "number",
              "critical_count": "number (max 8)",
              "high_count": "number (max 10)",
              "medium_count": "number (max 8)",
              "low_count": "number (max 4)",
              "estimated_total_effort": "string",
              "total_effort_hours": "number",
              "files_affected_count": "number"
            },
            "implementation_phases": {
              "phase_1_critical": {
                "description": "Critical features for CLIENT_DIRECTORY implementation",
                "estimated_duration": "string",
                "total_requirements": "number (max 8)",
                "total_effort_hours": "number",
                "requirements": [
                  {
                    "req_id": "string (REQ-LAYER-###)",
                    "title": "string (specific to CLIENT_DIRECTORY)",
                    "description": "string (implementation in client codebase)",
                    "priority": "CRITICAL",
                    "effort_estimate": "string (X hours with breakdown)",
                    "source_issue_ids": "array (from schema coherence issues)",
                    "affected_files": [
                      {
                        "path": "string (CLIENT_DIRECTORY file path)",
                        "lines_affected": "string (estimated ranges)",
                        "modification_type": "add|refactor|remove|replace",
                        "before_code_sample": "string (WARP-DEMO current client code)",
                        "after_code_sample": "string (WARP-DEMO expected implementation)"
                      }
                    ],
                    "dependencies": {
                      "requires": "array of req_ids",
                      "blocks": "array of req_ids",
                      "parallel_with": "array of req_ids"
                    },
                    "pap_layer": "data|web|api",
                    "components_affected": [
                      {
                        "component_name": "string (client component)",
                        "current_status": "MISSING|PARTIAL|FAKE|EXISTS",
                        "target_status": "REAL",
                        "modification_scope": "interface|implementation|configuration"
                      }
                    ],
                    "acceptance_criteria": "array of testable criteria",
                    "implementation_chunks": [
                      {
                        "chunk_id": "string",
                        "title": "string",
                        "description": "string",
                        "effort_hours": "number (max 12)",
                        "deliverable": "string"
                      }
                    ],
                    "testing_requirements": {
                      "unit_tests": "array of test names",
                      "integration_tests": "array of test names",
                      "validation_tests": "array of test names"
                    },
                    "configuration_changes": [
                      {
                        "file": "string (CLIENT_DIRECTORY config file)",
                        "section": "string",
                        "changes": "string"
                      }
                    ],
                    "fake_components_to_replace": [
                      {
                        "current_fake": "string (WARP-DEMO placeholder)",
                        "replacement": "string (workflow spec implementation)",
                        "location": "string (CLIENT_DIRECTORY file:lines)"
                      }
                    ]
                  }
                ]
              },
              "phase_2_high": {
                "description": "string",
                "estimated_duration": "string",
                "total_requirements": "number (max 10)",
                "requirements": "array (same detailed structure as phase_1)"
              },
              "phase_3_medium": {
                "description": "string",
                "estimated_duration": "string",
                "total_requirements": "number (max 8)",
                "requirements": "array (same detailed structure as phase_1)"
              },
              "phase_4_low": {
                "description": "string",
                "estimated_duration": "string",
                "total_requirements": "number (max 4)",
                "requirements": "array (same detailed structure as phase_1)"
              }
            },
            "dependency_graph": {
              "description": "Implementation dependency mapping for CLIENT_DIRECTORY",
              "total_dependencies": "number",
              "critical_path_requirements": "array of req_ids",
              "dependencies": {
                "REQ_ID": {
                  "depends_on": "array of req_ids",
                  "blocks": "array of req_ids",
                  "parallel_with": "array of req_ids",
                  "critical_path": "boolean",
                  "estimated_delay_if_blocked": "string"
                }
              }
            },
            "implementation_timeline": {
              "total_duration": "string",
              "weekly_breakdown": [
                {
                  "week": "number",
                  "focus_area": "string (CLIENT_DIRECTORY area)",
                  "requirements_to_complete": "array of req_ids",
                  "estimated_hours": "number",
                  "key_deliverables": "array of strings",
                  "risk_factors": "array of strings"
                }
              ],
              "resource_allocation": {
                "senior_developer_hours": "number",
                "mid_developer_hours": "number",
                "qa_testing_hours": "number",
                "devops_hours": "number"
              }
            },
            "validation_metrics": {
              "coverage_percentage": "100%",
              "requirements_with_file_paths": "number",
              "requirements_with_line_numbers": "number",
              "requirements_with_code_samples": "number",
              "client_integration_points": "number",
              "critical_path_duration": "string"
            },
            "next_agent": "enforcer",
            "next_agent_input": {
              "workflow_id": "string (FROM_SMART_INPUT_DISCOVERY)",
              "total_requirements": "number",
              "critical_requirements": "array of req_ids",
              "cache_file": ".data/{workflow_id}_{trace_id}_previous_agent_output.json",
              "validation_focus": [
                "CLIENT_DIRECTORY implementation feasibility",
                "Schema gap coverage and accuracy",
                "Existing component integration validation",
                "PAP compliance for WARPCORE integration",
                "Implementation effort and timeline realism"
              ],
              "source_type": "schema_analysis"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "agent_id": "string (agent identifier)",
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)"
          },
          "build_trace_id": "BUILD_20251009_032956_9291694d",
          "build_timestamp": "2025-10-09T03:29:56.370168",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.370232",
            "build_trace_id": "BUILD_20251009_032956_9291694d",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 25079,
        "last_modified": "2025-10-09T03:29:56.370652"
      },
      {
        "name": "Boss",
        "id": "boss",
        "file": "0b_boss_from_origin_to_pathfinder.json",
        "franchise": "framer",
        "polymorphic_schema": {
          "schema_class": "OrchestratorAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Agent sequencing",
            "Workflow coordination",
            "Agent lifecycle management",
            "Orchestration success tracking"
          ]
        },
        "json_data": {
          "agent_id": "boss",
          "agent_version": "1.0.0",
          "output_schema": {
            "orchestration_id": "string (generated)",
            "workflow_id": "string (wf_* format)",
            "orchestration_type": "start_fresh|restart|continue",
            "timestamp": "string (ISO format)",
            "current_directory": "string (pwd output)",
            "agent_file_validation": {
              "all_agents_found": "boolean",
              "agent_files": {
                "schema_reconciler": ".workflows/warp/dev/gap_analysis_agent_1_schema_reconciler.json",
                "requirements_generator": ".workflows/warp/dev/gap_analysis_agent_2_requirements_generator.json",
                "requirements_validator": ".workflows/warp/dev/gap_analysis_agent_3_requirements_validator.json",
                "implementor": ".workflows/warp/dev/gap_analysis_agent_4_implementor.json",
                "gate_promote": ".workflows/warp/dev/gap_analysis_agent_5_gate_promote.json"
              },
              "missing_agents": "array of missing agent file paths"
            },
            "execution_plan": {
              "total_agents": "number (5)",
              "start_agent": "number (1-5)",
              "end_agent": "number (5)",
              "estimated_duration": "string",
              "cache_strategy": "string"
            },
            "agent_execution_sequence": "array of agent execution objects",
            "workflow_state": {
              "current_agent": "number",
              "completion_percentage": "string",
              "estimated_remaining_time": "string",
              "last_successful_agent": "number",
              "failed_agents": "array"
            },
            "cache_management": {
              "workflow_cache_dir": "string (.data/)",
              "cache_files_created": "array of strings",
              "cache_files_preserved": "array of strings",
              "cache_cleanup_needed": "boolean"
            },
            "next_steps": {
              "continue_to_agent": "number",
              "manual_intervention_required": "boolean",
              "restart_recommendations": "array of strings",
              "completion_criteria": "string"
            },
            "agent_name": "workflow_orchestrator_agent",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "orchestration_success_rate": "number (0-100)",
              "agent_coordination_accuracy": "number (0-100)",
              "workflow_completion_rate": "number (0-100)"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "orchestration_results": {
              "agents_sequenced": "number",
              "agents_launched": "array of agent_ids",
              "agents_completed": "array of agent_ids",
              "workflow_status": "IN_PROGRESS|COMPLETED|FAILED"
            },
            "agent_coordination": {
              "current_active_agent": "string",
              "pending_agents": "array of agent_ids",
              "failed_agents": "array of agent_ids"
            },
            "next_agent_handoff": {
              "target_agent": "pathfinder|oracle",
              "handoff_data": "object with orchestration data",
              "cache_file_created": "string",
              "routing_complete": "boolean",
              "routing_decision": "string (pathfinder for gap analysis, oracle for user input)"
            },
            "agent_id": "string (agent identifier)",
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)"
          },
          "build_trace_id": "BUILD_20251009_032956_21daff3d",
          "build_timestamp": "2025-10-09T03:29:56.365707",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.365777",
            "build_trace_id": "BUILD_20251009_032956_21daff3d",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 30021,
        "last_modified": "2025-10-09T03:29:56.366075"
      },
      {
        "name": "Craftbuddy",
        "id": "craftbuddy",
        "file": "4b_craftbuddy_from_craftsman_alice_to_craftsman_alice.json",
        "franchise": "framer",
        "polymorphic_schema": {
          "schema_class": "RequirementsGeneratorAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Requirements enumeration",
            "Priority classification",
            "Implementation phases",
            "Dependency mapping"
          ]
        },
        "json_data": {
          "agent_id": "craftbuddy",
          "agent_version": "1.1.0",
          "output_schema": {
            "workflow_id": "string (from craftsman results)",
            "agent_name": "craftbuddy",
            "timestamp": "string (ISO_TIMESTAMP)",
            "decision": "generate_requirements|pass_to_gatekeeper|send_to_enforcer",
            "creative_assessment": "string (summary of opportunities found or readiness)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "creative_opportunities_found": "number",
              "enhancement_value_score": "number (0-100)",
              "decision_confidence": "number (0-100)"
            },
            "input_analysis": {
              "source_agent": "craftsman",
              "cache_file": ".data/{workflow_id}_craftsman_results.json",
              "requirements_implemented": "number",
              "files_modified": "number",
              "implementation_quality": "string"
            },
            "decision_rationale": {
              "primary_reason": "string",
              "supporting_factors": "array of strings",
              "risk_assessment": "LOW|MEDIUM|HIGH",
              "effort_vs_value_analysis": "string"
            },
            "requirements_generated": {
              "total_requirements": "number (if generate_requirements)",
              "critical_count": "number",
              "high_count": "number",
              "medium_count": "number",
              "low_count": "number",
              "estimated_total_effort": "string",
              "bonus_value_summary": "string",
              "implementation_phases": {
                "phase_1_critical": {
                  "description": "string",
                  "requirements": [
                    {
                      "req_id": "string (BONUS-XXX)",
                      "title": "string",
                      "description": "string",
                      "priority": "CRITICAL|HIGH|MEDIUM|LOW",
                      "effort_estimate": "string (X hours)",
                      "bonus_value": "string (why worth doing)",
                      "affected_files": [
                        {
                          "path": "string",
                          "modification_type": "add|refactor|remove|replace",
                          "before_code_sample": "string",
                          "after_code_sample": "string"
                        }
                      ],
                      "acceptance_criteria": "array of testable criteria"
                    }
                  ]
                }
              }
            },
            "gatekeeper_validation": {
              "implementation_complete": "boolean (if pass_to_gatekeeper)",
              "code_quality_acceptable": "boolean",
              "no_critical_issues": "boolean",
              "ready_for_promotion": "boolean",
              "promotion_confidence": "number (0-100)",
              "validation_summary": "string",
              "files_ready_for_commit": "array of file paths",
              "git_preparation_status": "READY|NEEDS_WORK"
            },
            "next_agent_handoff": {
              "target_agent": "enforcer|gatekeeper",
              "handoff_data": "object with appropriate schema data",
              "cache_file_created": "string",
              "routing_complete": "boolean"
            },
            "creative_enhancements": [
              {
                "enhancement_id": "string",
                "title": "string",
                "description": "string",
                "category": "quick_win|bonus_feature|performance|security|ux",
                "effort_estimate": "string",
                "value_score": "number (0-100)",
                "implementation_priority": "HIGH|MEDIUM|LOW"
              }
            ],
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "testing_asset_validation": {
              "existing_tests_executed": "boolean",
              "existing_tests_passed": "number",
              "existing_tests_failed": "number",
              "new_playwright_tests_created": "number",
              "api_endpoints_validated": "array of endpoint paths",
              "asset_cache_organized": "boolean",
              "cache_directory_path": "string (.data/assets/wf/{workflow_id}/{agent}/{trace_id}/)",
              "test_artifacts_preserved": {
                "existing_test_copies": "array of file paths",
                "playwright_tests": "array of file paths",
                "api_validation_scripts": "array of file paths",
                "test_results": "array of file paths",
                "benchmark_data": "array of file paths"
              },
              "validation_summary": {
                "all_tests_passing": "boolean",
                "no_code_changes_made": "boolean",
                "comprehensive_coverage_achieved": "boolean",
                "assets_properly_cached": "boolean",
                "cleanup_completed": "boolean"
              },
              "background_execution_logs": "array of tmp log file paths"
            },
            "agent_id": "string (agent identifier)",
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)",
            "requirements_summary": {
              "total_requirements": "number (max 30)",
              "critical_count": "number",
              "high_count": "number",
              "medium_count": "number",
              "low_count": "number"
            },
            "implementation_phases": "object with phase breakdown",
            "dependency_graph": "object with dependency mapping"
          },
          "build_trace_id": "BUILD_20251009_032956_f586d89a",
          "build_timestamp": "2025-10-09T03:29:56.364590",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.364662",
            "build_trace_id": "BUILD_20251009_032956_f586d89a",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 24153,
        "last_modified": "2025-10-09T03:29:56.365011"
      },
      {
        "name": "Craftsman Implementation",
        "id": "craftsman_implementation",
        "file": "4a_craftsman_from_enforcer_craftbuddy_to_gatekeeper_craftbuddy.json",
        "franchise": "framer",
        "polymorphic_schema": {
          "schema_class": "ImplementationAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Code implementation",
            "Test execution",
            "File modifications",
            "Git preparation"
          ]
        },
        "json_data": {
          "agent_id": "craftsman_implementation",
          "agent_version": "1.1.0",
          "output_schema": {
            "workflow_id": "string (FROM_SMART_INPUT_DISCOVERY)",
            "agent_name": "implementation_agent",
            "timestamp": "string (ISO_TIMESTAMP)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "requirements_implemented": "number",
              "implementation_success_rate": "number (0-100)",
              "code_quality_score": "number (0-100)"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "input_analysis": {
              "source_agent": "enforcer",
              "cache_file": ".data/{workflow_id}_{trace_id}_previous_agent_output.json",
              "approved_requirements_count": "number",
              "total_requirements_processed": "number",
              "implementation_scope": "string"
            },
            "implementation_summary": {
              "requirements_implemented": "number",
              "requirements_failed": "number",
              "files_modified": "number",
              "lines_changed": "number",
              "tests_executed": "number",
              "tests_passed": "number",
              "tests_failed": "number",
              "acceptance_criteria_met": "number",
              "acceptance_criteria_failed": "number",
              "total_implementation_time": "string"
            },
            "implementation_phases": {
              "phase_1_critical": {
                "description": "AWS removal and critical fixes",
                "requirements_implemented": "array of req_ids",
                "files_modified": "array of file paths",
                "implementation_status": "COMPLETE|PARTIAL|FAILED",
                "issues_encountered": "array of strings"
              },
              "phase_2_high": {
                "description": "Fake code replacement and PAP compliance",
                "requirements_implemented": "array of req_ids",
                "files_modified": "array of file paths",
                "implementation_status": "COMPLETE|PARTIAL|FAILED",
                "issues_encountered": "array of strings"
              },
              "phase_3_medium": {
                "description": "Schema consistency and interface standardization",
                "requirements_implemented": "array of req_ids",
                "files_modified": "array of file paths",
                "implementation_status": "COMPLETE|PARTIAL|FAILED",
                "issues_encountered": "array of strings"
              },
              "phase_4_low": {
                "description": "Documentation and optimization",
                "requirements_implemented": "array of req_ids",
                "files_modified": "array of file paths",
                "implementation_status": "COMPLETE|PARTIAL|FAILED",
                "issues_encountered": "array of strings"
              }
            },
            "detailed_implementation_results": [
              {
                "req_id": "string",
                "title": "string",
                "implementation_status": "COMPLETE|PARTIAL|FAILED",
                "files_modified": [
                  {
                    "path": "string",
                    "lines_affected": "string",
                    "before_content": "string",
                    "after_content": "string",
                    "modification_success": "boolean",
                    "issues": "array of strings"
                  }
                ],
                "configuration_changes": [
                  {
                    "file": "string",
                    "section": "string",
                    "changes_applied": "string",
                    "success": "boolean"
                  }
                ],
                "fake_components_replaced": [
                  {
                    "component_name": "string",
                    "location": "string",
                    "replacement_status": "COMPLETE|PARTIAL|FAILED",
                    "validation_result": "boolean"
                  }
                ],
                "implementation_chunks": [
                  {
                    "chunk_id": "string",
                    "title": "string",
                    "deliverable": "string",
                    "completion_status": "COMPLETE|PARTIAL|FAILED",
                    "actual_effort_hours": "number",
                    "issues": "array of strings"
                  }
                ],
                "testing_results": {
                  "unit_tests": [
                    {
                      "test_name": "string",
                      "status": "PASS|FAIL|SKIP",
                      "execution_time": "string",
                      "error_message": "string"
                    }
                  ],
                  "integration_tests": [
                    {
                      "test_name": "string",
                      "status": "PASS|FAIL|SKIP",
                      "execution_time": "string",
                      "error_message": "string"
                    }
                  ],
                  "validation_tests": [
                    {
                      "test_name": "string",
                      "status": "PASS|FAIL|SKIP",
                      "execution_time": "string",
                      "error_message": "string"
                    }
                  ]
                },
                "acceptance_criteria_results": [
                  {
                    "criterion": "string",
                    "validation_result": "boolean",
                    "validation_details": "string"
                  }
                ]
              }
            ],
            "llm_collector_comparison": {
              "before_implementation": {
                "total_files": "number",
                "total_lines": "number",
                "fake_markers_count": "number",
                "aws_references_count": "number"
              },
              "after_implementation": {
                "total_files": "number",
                "total_lines": "number",
                "fake_markers_count": "number",
                "aws_references_count": "number"
              },
              "changes_detected": {
                "files_added": "array of strings",
                "files_modified": "array of strings",
                "files_deleted": "array of strings",
                "fake_markers_removed": "number",
                "aws_references_removed": "number",
                "lines_added": "number",
                "lines_removed": "number",
                "lines_modified": "number"
              }
            },
            "git_preparation": {
              "working_directory_clean_before": "boolean",
              "files_staged_for_commit": "array of strings",
              "commit_message_prepared": "string",
              "ready_for_gate_promotion": "boolean"
            },
            "workflow_analytics": {
              "workflow_status": "IN_PROGRESS|COMPLETED|FAILED",
              "completion_percentage": "number (0-100)",
              "sequences_completed": "number",
              "total_estimated_sequences": "number (5)",
              "current_phase": "CRITICAL|HIGH|MEDIUM|LOW",
              "agent_performance": "object with per-agent metrics"
            },
            "progress_metrics": {
              "pap_compliance_score": "number (0-100)",
              "coherence_issues_identified": "number",
              "total_effort_hours_estimated": "string",
              "requirements_generated": "number",
              "requirements_validated": "number"
            },
            "visualization_dashboard_data": {
              "workflow_progress_chart": {
                "labels": "array of agent names",
                "completion_data": "array of percentages",
                "time_data": "array of durations"
              },
              "agent_performance_radar": {
                "agents": "array of agent names",
                "metrics": "array of performance scores"
              },
              "issue_resolution_funnel": {
                "identified": "number",
                "analyzed": "number",
                "resolved": "number"
              },
              "workflow_health_metrics": {
                "overall_health": "number (0-100)",
                "velocity_trend": "INCREASING|STABLE|DECREASING",
                "quality_trend": "IMPROVING|STABLE|DECLINING"
              }
            },
            "predictive_analytics": {
              "estimated_completion": {
                "projected_completion": "ISO_TIMESTAMP",
                "confidence_level": "number (0-100)"
              },
              "risk_indicators": "array of risk objects with probability and impact"
            },
            "trending_metadata": {
              "run_sequence": "number (incremental)",
              "previous_run_comparison": "object",
              "velocity_indicator": "FASTER|SLOWER|SAME",
              "success_rate": "number (0-1)"
            },
            "next_agent": "craftbuddy",
            "next_agent_input": {
              "workflow_id": "{workflow_id}",
              "implementation_complete": "boolean",
              "requirements_implemented": "number",
              "files_modified": "number",
              "cache_file": ".data/{workflow_id}_{trace_id}_previous_agent_output.json",
              "git_changes_ready": "boolean"
            },
            "agent_id": "string (agent identifier)",
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)"
          },
          "build_trace_id": "BUILD_20251009_032956_3de0fd69",
          "build_timestamp": "2025-10-09T03:29:56.378218",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.378275",
            "build_trace_id": "BUILD_20251009_032956_3de0fd69",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 38817,
        "last_modified": "2025-10-09T03:29:56.379369"
      },
      {
        "name": "Enforcer",
        "id": "enforcer",
        "file": "3_enforcer_from_architect_craftbuddy_to_craftsman.json",
        "franchise": "framer",
        "polymorphic_schema": {
          "schema_class": "RequirementsValidatorAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Requirements validation",
            "PAP compliance checking",
            "Feasibility assessment",
            "Implementation readiness"
          ]
        },
        "json_data": {
          "agent_id": "enforcer",
          "agent_version": "2.1.0",
          "output_schema": {
            "workflow_id": "string (FROM_SMART_INPUT_DISCOVERY)",
            "agent_name": "requirements_validator_agent",
            "timestamp": "string (ISO_TIMESTAMP)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "requirements_validated": "number",
              "approval_rate": "number (0-100)",
              "validation_accuracy": "number (0-100)"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "input_analysis": {
              "source_agent": "architect|oracle",
              "source_agent_type": "architect|oracle",
              "cache_file": "string",
              "total_requirements_received": "number",
              "validation_focus": "array of strings (context-dependent)",
              "historical_workflows_analyzed": "number",
              "coherence_issues_count": "number (0 if user input)",
              "user_requirements_received": "array of strings (empty if schema-generated)"
            },
            "validation_summary": {
              "requirements_validated": "number",
              "pap_compliant": "number",
              "feasible": "number",
              "implementation_ready": "number",
              "validation_issues": "number",
              "overall_status": "PASS|NEEDS_REVISION|FAIL"
            },
            "validation_results": {
              "pap_compliance": {
                "score": "string (percentage)",
                "compliant_requirements": "array of strings",
                "non_compliant_requirements": "array of strings",
                "compliance_issues": [
                  {
                    "req_id": "string",
                    "issue": "string",
                    "severity": "HIGH|MEDIUM|LOW",
                    "recommendation": "string"
                  }
                ]
              },
              "feasibility_assessment": {
                "realistic_estimates": "array of strings",
                "questionable_estimates": "array of strings",
                "estimate_issues": [
                  {
                    "req_id": "string",
                    "issue": "string",
                    "current_estimate": "string",
                    "recommended_estimate": "string",
                    "rationale": "string"
                  }
                ]
              },
              "dependency_validation": {
                "valid_dependencies": "array of strings",
                "circular_dependencies": "array of strings",
                "missing_dependencies": [
                  {
                    "req_id": "string",
                    "missing_dependency": "string",
                    "reason": "string"
                  }
                ]
              },
              "implementation_readiness": {
                "ready_requirements": "array of strings",
                "needs_refinement": "array of strings",
                "readiness_issues": [
                  {
                    "req_id": "string",
                    "issues": "array of strings",
                    "recommendations": "array of strings"
                  }
                ]
              }
            },
            "validated_requirements": {
              "approved_for_implementation": [
                {
                  "req_id": "string",
                  "status": "APPROVED",
                  "validation_notes": "string",
                  "implementation_priority": "CRITICAL|HIGH|MEDIUM|LOW",
                  "bonus_enhancements": "array of strings",
                  "implementation_ticket": {
                    "title": "string",
                    "description": "string",
                    "acceptance_criteria": "array of strings",
                    "files_to_create": "array of strings",
                    "files_to_modify": "array of strings",
                    "starting_point_tips": "array of strings",
                    "implementation_steps": "array of strings",
                    "testing_requirements": "array of strings",
                    "estimated_hours": "string",
                    "depends_on": "array of req_ids",
                    "watermark_locations": "array of strings"
                  }
                }
              ],
              "requires_revision": [
                {
                  "req_id": "string",
                  "status": "NEEDS_REVISION",
                  "validation_issues": "array of strings",
                  "required_changes": "array of strings"
                }
              ],
              "rejected": [
                {
                  "req_id": "string",
                  "status": "REJECTED",
                  "rejection_reason": "string"
                }
              ]
            },
            "final_recommendations": {
              "proceed_with_implementation": "boolean",
              "approved_requirements_count": "number",
              "revision_required_count": "number",
              "rejected_count": "number",
              "estimated_revision_time": "string",
              "implementation_order": "array of strings",
              "next_steps": "array of strings",
              "bonus_value_summary": "string"
            },
            "workflow_completion": {
              "gap_analysis_complete": "boolean",
              "requirements_generated": "boolean",
              "validation_complete": "boolean",
              "ready_for_implementation": "boolean",
              "cache_files": "array of strings",
              "compression_applied": "boolean"
            },
            "system_contributions": {
              "agent_system_summary_updated": "boolean",
              "workflow_efficiency_improved": "boolean",
              "storage_optimization_applied": "boolean",
              "cross_workflow_learnings_captured": "boolean"
            },
            "next_agent": "craftsman",
            "next_agent_input": {
              "workflow_id": "string (FROM_SMART_INPUT_DISCOVERY)",
              "approved_requirements_count": "number",
              "revision_required_count": "number",
              "rejected_count": "number",
              "cache_file": "string (.data path)",
              "implementation_focus": "array of strings",
              "priority_requirements": "array of req_ids",
              "bonus_considerations": "array of strings",
              "compression_status": "object"
            },
            "agent_id": "string (agent identifier)",
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)"
          },
          "build_trace_id": "BUILD_20251009_032956_ff3cf106",
          "build_timestamp": "2025-10-09T03:29:56.371897",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.371956",
            "build_trace_id": "BUILD_20251009_032956_ff3cf106",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 30915,
        "last_modified": "2025-10-09T03:29:56.373122"
      },
      {
        "name": "Flux",
        "id": "flux",
        "file": "8_flux_from_alice_to_pathfinder.json",
        "franchise": "framer",
        "polymorphic_schema": {
          "schema_class": "ImplementationAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Code implementation",
            "Test execution",
            "File modifications",
            "Git preparation"
          ]
        },
        "json_data": {
          "agent_id": "flux",
          "agent_version": "1.0.0",
          "output_schema": {
            "workflow_id": "string",
            "agent_name": "flux_agent",
            "timestamp": "string (ISO_TIMESTAMP)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "publishing_time": "number",
              "distribution_time": "number"
            },
            "input_analysis": {
              "source_agent": "alice",
              "enhanced_content_loaded": "boolean",
              "publishing_requirements_identified": "object",
              "target_channels_determined": "array of strings",
              "content_quality_validated": "boolean"
            },
            "publishing_execution": {
              "format_optimization": {
                "formats_generated": "array of strings",
                "responsive_versions_created": "boolean",
                "accessibility_optimized": "boolean",
                "branding_applied": "boolean"
              },
              "distribution_results": {
                "channels_published": "array of channel objects",
                "publication_success_rate": "string (percentage)",
                "failed_publications": "array of failure objects",
                "content_urls": "array of URL objects"
              },
              "performance_setup": {
                "analytics_configured": "boolean",
                "tracking_enabled": "boolean",
                "seo_optimized": "boolean",
                "social_sharing_enabled": "boolean",
                "engagement_monitoring_active": "boolean"
              }
            },
            "content_delivery": {
              "primary_publication_url": "string",
              "alternate_formats": "array of format objects",
              "access_instructions": "string",
              "user_journey_notes": "string",
              "content_discoverability": "object"
            },
            "quality_validation": {
              "final_quality_score": "number (0-100)",
              "user_experience_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "content_completeness": "boolean",
              "technical_validation_passed": "boolean",
              "publishing_standards_met": "boolean"
            },
            "workflow_completion": {
              "framer_pipeline_completed": "boolean",
              "intelligence_to_content_successful": "boolean",
              "user_research_intent_fulfilled": "boolean",
              "final_workflow_status": "COMPLETE|FAILED",
              "completion_summary": "string"
            },
            "performance_tracking": {
              "initial_metrics": "object",
              "tracking_dashboard_url": "string",
              "performance_monitoring_setup": "object",
              "success_indicators": "array of strings"
            },
            "agent_id": "string (agent identifier)",
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)",
            "implementation_summary": {
              "requirements_implemented": "number",
              "files_modified": "number",
              "tests_executed": "number",
              "tests_passed": "number",
              "acceptance_criteria_met": "number"
            },
            "detailed_implementation_results": "array of implementation objects",
            "git_preparation": {
              "files_staged_for_commit": "array of strings",
              "ready_for_gate_promotion": "boolean"
            }
          },
          "description": "FLUX",
          "build_trace_id": "BUILD_20251009_032956_a0893ea4",
          "build_timestamp": "2025-10-09T03:29:56.366541",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.366594",
            "build_trace_id": "BUILD_20251009_032956_a0893ea4",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 18457,
        "last_modified": "2025-10-09T03:29:56.367367"
      },
      {
        "name": "Gatekeeper",
        "id": "gatekeeper",
        "file": "5_gatekeeper_from_craftsman_to_ghostwriter_pathfinder.json",
        "franchise": "framer",
        "polymorphic_schema": {
          "schema_class": "GatePromoteAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Cross-agent validation",
            "Git operations",
            "Gate decision making",
            "Workflow completion"
          ]
        },
        "json_data": {
          "agent_id": "gatekeeper",
          "agent_version": "1.0.0",
          "output_schema": {
            "workflow_id": "string (wf_0f432a3ac836)",
            "agent_name": "gate_promote_agent",
            "timestamp": "string (ISO_TIMESTAMP)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "validation_success_rate": "number (0-100)",
              "gate_decision_accuracy": "number (0-100)",
              "cycle_improvement_score": "number (0-100)"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "input_analysis": {
              "source_agent": "craftsman",
              "cache_file": ".data/wf_0f432a3ac836_implementation_results.json",
              "all_previous_agents_loaded": "boolean",
              "workflow_history_complete": "boolean"
            },
            "cross_agent_validation": {
              "agent_1_schema_analysis_validation": {
                "original_coherence_issues": "number (47)",
                "issues_addressed": "number",
                "issues_remaining": "number",
                "original_fake_markers": "number (892)",
                "fake_markers_removed": "number",
                "fake_markers_remaining": "number",
                "original_aws_references": "number",
                "aws_references_removed": "number",
                "aws_references_remaining": "number",
                "original_pap_compliance": "string (89%)",
                "current_pap_compliance": "string",
                "compliance_improved": "boolean",
                "validation_score": "string (percentage)"
              },
              "agent_2_requirements_validation": {
                "total_requirements_generated": "number",
                "requirements_implemented": "number",
                "requirements_not_implemented": "number",
                "implementation_chunks_completed": "number",
                "implementation_chunks_failed": "number",
                "file_modifications_matched": "boolean",
                "testing_requirements_met": "boolean",
                "validation_score": "string (percentage)"
              },
              "agent_3_validation_compliance": {
                "approved_requirements_count": "number",
                "approved_requirements_implemented": "number",
                "rejected_requirements_attempted": "number",
                "acceptance_criteria_met": "number",
                "acceptance_criteria_failed": "number",
                "dependency_order_respected": "boolean",
                "validation_score": "string (percentage)"
              },
              "agent_4_implementation_verification": {
                "claimed_files_modified": "number",
                "actual_files_modified": "number",
                "claimed_tests_passed": "number",
                "actual_tests_passed": "number",
                "claimed_requirements_implemented": "number",
                "verified_requirements_implemented": "number",
                "implementation_accuracy": "string (percentage)"
              }
            },
            "git_operations": {
              "pre_validation_git_status": {
                "working_directory_clean": "boolean",
                "modified_files": "array of strings",
                "untracked_files": "array of strings",
                "staged_files": "array of strings"
              },
              "git_diff_analysis": {
                "total_files_changed": "number",
                "lines_added": "number",
                "lines_removed": "number",
                "lines_modified": "number",
                "diff_summary": "string",
                "modified_files_detail": [
                  {
                    "file_path": "string",
                    "lines_added": "number",
                    "lines_removed": "number",
                    "modification_type": "string"
                  }
                ]
              },
              "staging_operations": {
                "files_staged_for_commit": "array of strings",
                "staging_successful": "boolean",
                "staging_issues": "array of strings"
              },
              "commit_operations": {
                "commit_message_generated": "string",
                "commit_executed": "boolean",
                "commit_hash": "string",
                "commit_issues": "array of strings"
              }
            },
            "llm_collector_final_comparison": {
              "original_state": {
                "total_files": "number (179)",
                "total_lines": "number (46236)",
                "fake_markers_count": "number (892)",
                "aws_references_count": "number",
                "pap_compliance_score": "string (89%)"
              },
              "current_state": {
                "total_files": "number",
                "total_lines": "number",
                "fake_markers_count": "number",
                "aws_references_count": "number",
                "pap_compliance_score": "string"
              },
              "improvements_achieved": {
                "fake_markers_removed": "number",
                "aws_references_removed": "number",
                "compliance_improvement": "string",
                "new_issues_introduced": "number",
                "overall_improvement_score": "string (percentage)"
              }
            },
            "gap_closure_analysis": {
              "original_gaps_total": "number (47)",
              "gaps_closed_successfully": "number",
              "gaps_partially_addressed": "number",
              "gaps_remaining": "number",
              "new_gaps_introduced": "number",
              "gap_closure_percentage": "string (percentage)",
              "detailed_gap_status": [
                {
                  "gap_id": "string",
                  "original_description": "string",
                  "closure_status": "CLOSED|PARTIAL|REMAINING|NEW",
                  "implementation_evidence": "string",
                  "validation_result": "boolean"
                }
              ]
            },
            "gate_promotion_decision": {
              "overall_validation_score": "string (percentage)",
              "validation_threshold_met": "boolean (>= 100%)",
              "gate_decision": "PASS|FAIL",
              "gate_decision_reasoning": "string",
              "critical_issues_blocking": "array of strings",
              "workflow_completion_status": "COMPLETE|REPEAT_CYCLE"
            },
            "workflow_cycle_management": {
              "current_cycle_complete": "boolean",
              "next_cycle_required": "boolean",
              "next_cycle_focus_areas": "array of strings",
              "remaining_work_estimate": "string",
              "cycle_repetition_reason": "string"
            },
            "next_agent_routing": {
              "route_to": "craftsman|pathfinder",
              "next_workflow_id": "string (if repeating)",
              "handoff_data": {
                "previous_cycle_results": "object",
                "remaining_gaps": "array of gap objects",
                "new_issues_detected": "array of issue objects",
                "focus_areas_next_cycle": "array of strings",
                "lessons_learned": "array of strings"
              }
            },
            "audit_trail": {
              "validation_steps_executed": "array of strings",
              "git_commands_executed": "array of strings",
              "llm_collector_runs": "array of timestamps",
              "cross_agent_validations": "array of validation objects",
              "decision_points": "array of decision objects",
              "complete_workflow_history": "object"
            },
            "cycle_analytics": {
              "cycle_number": "number",
              "previous_cycle_results": "object",
              "improvement_metrics": {
                "pap_compliance_improvement": "number",
                "issue_resolution_improvement": "number",
                "velocity_improvement": "number"
              },
              "next_cycle_recommendations": "array of recommendations",
              "cross_cycle_trends": {
                "performance_trend": "IMPROVING|STABLE|DECLINING",
                "efficiency_trend": "FASTER|SAME|SLOWER",
                "quality_trend": "HIGHER|SAME|LOWER"
              }
            },
            "trending_metadata": {
              "run_sequence": "number (incremental)",
              "historical_performance": "array of previous run metrics",
              "velocity_indicator": "FASTER|SLOWER|SAME",
              "success_rate_trend": "number (0-1)",
              "completion_time_trend": "DECREASING|STABLE|INCREASING"
            },
            "agent_id": "string (agent identifier)",
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)"
          },
          "build_trace_id": "BUILD_20251009_032956_378dd240",
          "build_timestamp": "2025-10-09T03:29:56.369334",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.369404",
            "build_trace_id": "BUILD_20251009_032956_378dd240",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 35369,
        "last_modified": "2025-10-09T03:29:56.369812"
      },
      {
        "name": "Ghostwriter",
        "id": "ghostwriter",
        "file": "6_ghostwriter_from_gatekeeper_craftbuddy_to_craftbuddy_alice.json",
        "franchise": "framer",
        "polymorphic_schema": {
          "schema_class": "RequirementsGeneratorAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Requirements enumeration",
            "Priority classification",
            "Implementation phases",
            "Dependency mapping"
          ]
        },
        "json_data": {
          "agent_id": "ghostwriter",
          "agent_version": "1.0.0",
          "output_schema": {
            "workflow_id": "string",
            "agent_name": "ghostwriter_agent",
            "timestamp": "string (ISO_TIMESTAMP)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "content_creation_time": "number",
              "intelligence_processing_time": "number"
            },
            "input_analysis": {
              "source_agent": "gatekeeper",
              "intelligence_data_loaded": "boolean",
              "research_intent_identified": "string",
              "intelligence_sources_count": "number",
              "content_requirements_extracted": "object"
            },
            "content_creation": {
              "content_architecture": {
                "content_type": "string",
                "section_count": "number",
                "content_structure": "array of section objects",
                "narrative_flow": "string"
              },
              "primary_content": {
                "title": "string",
                "executive_summary": "string",
                "main_sections": "array of content section objects",
                "supporting_elements": "array of content element objects",
                "source_integration": "object"
              },
              "content_metadata": {
                "target_audience": "string",
                "content_style": "string",
                "tone": "string",
                "format_requirements": "string",
                "estimated_reading_time": "string"
              },
              "enhancement_opportunities": {
                "creative_enhancement_areas": "array of strings",
                "muchness_suggestions": "array of strings",
                "engagement_improvement_points": "array of strings",
                "alice_processing_hints": "array of strings"
              }
            },
            "quality_assessment": {
              "content_completeness": "string (percentage)",
              "narrative_quality_score": "number (0-100)",
              "source_integration_quality": "number (0-100)",
              "factual_accuracy_maintained": "boolean",
              "enhancement_readiness": "number (0-100)"
            },
            "alice_handoff_preparation": {
              "content_package_ready": "boolean",
              "enhancement_areas_identified": "number",
              "creative_opportunities_flagged": "number",
              "context_provided": "object",
              "handoff_notes": "array of strings"
            },
            "agent_id": "string (agent identifier)",
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)",
            "requirements_summary": {
              "total_requirements": "number (max 30)",
              "critical_count": "number",
              "high_count": "number",
              "medium_count": "number",
              "low_count": "number"
            },
            "implementation_phases": "object with phase breakdown",
            "dependency_graph": "object with dependency mapping"
          },
          "description": "GHOSTWRITER",
          "build_trace_id": "BUILD_20251009_032956_b1975538",
          "build_timestamp": "2025-10-09T03:29:56.376182",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.376225",
            "build_trace_id": "BUILD_20251009_032956_b1975538",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 18274,
        "last_modified": "2025-10-09T03:29:56.376635"
      },
      {
        "name": "Harmony",
        "id": "harmony",
        "file": "harmony_from_user.json",
        "franchise": "framer",
        "polymorphic_schema": {
          "schema_class": "SchemaReconcilerAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "File analysis summary",
            "Coherence issue detection",
            "PAP compliance scoring",
            "Detailed findings reporting"
          ]
        },
        "json_data": {
          "agent_id": "harmony",
          "agent_version": "1.0.0",
          "output_schema": {
            "harmony_assessment_id": "string (generated)",
            "timestamp": "string (ISO format)",
            "harmony_mode": "full_coherence|schema_sync|prompt_alignment|flow_update|user_adaptation",
            "current_directory": "string (pwd output)",
            "system_analysis": {
              "agents_analyzed": "array of agent file paths",
              "agents_found": "number",
              "agents_missing": "array of missing agent files",
              "prompt_coherence_score": "number (0-100)",
              "schema_coherence_score": "number (0-100)",
              "flow_coherence_score": "number (0-100)"
            },
            "schema_validation": {
              "schema_files_checked": "array of schema file paths",
              "schema_versions_consistent": "boolean",
              "agent_definitions_aligned": "boolean",
              "flow_relationships_valid": "boolean",
              "schema_inconsistencies": "array of inconsistency descriptions"
            },
            "mermaid_coherence": {
              "config_file_status": "PERFECT_ALIGNMENT",
              "generated_diagram_status": "PERFECT_CURRENT",
              "node_styles_complete": true,
              "agent_coverage_complete": true,
              "agent_names_perfect": true,
              "flow_routing_perfect": true,
              "schema_alignment_perfect": true,
              "styling_inconsistencies": [],
              "perfect_coherence_achieved": true,
              "coherence_confidence_score": 100
            },
            "documentation_coherence": {
              "flow_generator_status": "FUNCTIONAL|ISSUES|MISSING",
              "html_documentation_status": "CURRENT|OUTDATED|MISSING",
              "standalone_files_status": "COMPLETE|PARTIAL|MISSING",
              "documentation_inconsistencies": "array of doc issues"
            },
            "coherence_maintenance": {
              "polymorphic_updates_performed": "boolean",
              "environment_context_updated": "boolean",
              "agent_prompts_synchronized": "boolean",
              "schemas_synchronized": "boolean",
              "flow_diagrams_regenerated": "boolean"
            },
            "user_adaptation": {
              "user_requirement_processed": "string|null",
              "adaptations_made": "array of adaptation descriptions",
              "new_agents_added": "array of new agent names",
              "flow_modifications": "array of flow changes",
              "styling_updates": "array of styling changes"
            },
            "harmony_verdict": {
              "overall_coherence_score": "number (0-100)",
              "system_harmony_status": "PERFECT_HARMONY|MINOR_DISCORD|MAJOR_DISCORD|CHAOS",
              "critical_issues_found": "number",
              "improvements_made": "number",
              "harmony_confidence": "number (0-100)",
              "system_ready_for_use": "boolean"
            },
            "improvements_made": {
              "prompts_updated": "array of updated agent IDs",
              "schemas_corrected": "array of schema corrections",
              "documentation_regenerated": "boolean",
              "flow_diagrams_updated": "boolean",
              "styling_improved": "boolean",
              "coherence_issues_resolved": "number"
            },
            "next_maintenance": {
              "recommended_interval": "string (duration)",
              "next_check_date": "string (ISO format)",
              "priority_areas": "array of areas needing attention",
              "proactive_improvements": "array of suggested improvements"
            },
            "workflow_id": "string (from context)",
            "agent_name": "harmony",
            "execution_metrics": {
              "start_time": "string (ISO format)",
              "end_time": "string (ISO format)",
              "duration_seconds": "number",
              "files_analyzed": "number",
              "changes_made": "number"
            },
            "performance_metrics": {
              "coherence_detection_accuracy": "number (0-100)",
              "maintenance_efficiency": "EXCELLENT|GOOD|FAIR|POOR",
              "system_improvement_score": "number (0-100)",
              "harmony_maintenance_quality": "number (0-100)"
            },
            "communication_to_origin": {
              "harmony_report_created": "boolean",
              "system_status_communicated": "boolean",
              "next_agent_recommendation": "string (origin_agent)"
            },
            "bonus_contributions": {
              "proactive_optimizations": "array of optimizations made",
              "architectural_insights": "array of insights provided",
              "system_health_improvements": "number",
              "documentation_enhancements": "array of enhancements",
              "contribution_value_score": "number (0-100)"
            },
            "harmony_insights_for_dashboard": {
              "insights_json_generated": "boolean",
              "insights_file_path": "string (docs/harmony_ecosystem_insights.json)",
              "ecosystem_analysis_complete": "boolean",
              "architectural_insights_documented": "boolean",
              "flow_dynamics_analyzed": "boolean",
              "recommendations_provided": "array of harmony recommendations"
            },
            "innovation_analysis": {
              "cost_efficiency_opportunities": "array of cost reduction recommendations with file paths and evidence",
              "performance_enhancement_recommendations": "array of performance improvements with implementation details",
              "business_value_maximization_strategies": "array of ROI-focused enhancements",
              "competitive_advantage_innovations": "array of breakthrough capability opportunities",
              "resource_optimization_analysis": "object with current vs optimized resource usage"
            },
            "actionable_tickets": {
              "generated_tickets": "array of specific implementation tickets",
              "ticket_format": "object with id, title, priority, file_paths, current_state, desired_state, implementation_approach, business_justification",
              "total_tickets_generated": "number",
              "priority_breakdown": "object with high/medium/low priority counts"
            },
            "agent_id": "string (agent identifier)",
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)",
            "analysis_summary": {
              "total_files_analyzed": "number",
              "coherence_issues_found": "number",
              "fake_demo_markers_total": "number",
              "pap_compliance_score": "string (percentage)"
            },
            "detailed_findings": "array of issue objects",
            "pap_layer_compliance": "object with layer breakdown"
          },
          "build_trace_id": "BUILD_20251009_032956_965cf36e",
          "build_timestamp": "2025-10-09T03:29:56.368515",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.368583",
            "build_trace_id": "BUILD_20251009_032956_965cf36e",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 30115,
        "last_modified": "2025-10-09T03:29:56.368922"
      },
      {
        "name": "Mama Bear",
        "id": "mama_bear",
        "file": "mama_bear_from_user.json",
        "franchise": "framer",
        "polymorphic_schema": {
          "schema_class": "GatePromoteAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Cross-agent validation",
            "Git operations",
            "Gate decision making",
            "Workflow completion"
          ]
        },
        "json_data": {
          "agent_id": "mama_bear",
          "agent_version": "1.0.0",
          "output_schema": {
            "assessment_id": "string (generated)",
            "timestamp": "string (ISO format)",
            "mama_bear_mode": "full_assessment|critical_only|security_focus|customer_protection",
            "current_directory": "string (pwd output)",
            "agent_analysis": {
              "agents_analyzed": "array of agent file paths",
              "agent_outputs_found": "array of cache files analyzed",
              "agents_missing": "array of missing agent files",
              "total_agents_in_system": "number"
            },
            "production_readiness_gates": {
              "gate_1_revenue_threats": {
                "status": "PASSED|FAILED",
                "issues_found": "number",
                "critical_issues": "array of issue descriptions"
              },
              "gate_2_customer_embarrassments": {
                "status": "PASSED|FAILED",
                "issues_found": "number",
                "embarrassing_issues": "array of issue descriptions"
              },
              "gate_3_pap_violations": {
                "status": "PASSED|FAILED",
                "issues_found": "number",
                "architecture_violations": "array of issue descriptions"
              },
              "gate_4_security_vulnerabilities": {
                "status": "PASSED|FAILED",
                "issues_found": "number",
                "security_risks": "array of issue descriptions"
              },
              "gate_5_test_contamination": {
                "status": "PASSED|FAILED",
                "issues_found": "number",
                "test_code_found": "array of contamination locations"
              }
            },
            "issue_categorization": {
              "critical_issues": {
                "count": "number",
                "categories": "array (revenue_threatening, test_contamination)",
                "blocking_production": "boolean",
                "details": "array of critical issue objects"
              },
              "high_issues": {
                "count": "number",
                "categories": "array (customer_embarrassing, security_risk)",
                "risky_for_production": "boolean",
                "details": "array of high issue objects"
              },
              "medium_issues": {
                "count": "number",
                "categories": "array (pap_violation, performance_issue)",
                "acceptable_for_production": "boolean",
                "details": "array of medium issue objects"
              },
              "low_issues": {
                "count": "number",
                "categories": "array (documentation_missing)",
                "ignorable_for_production": "boolean",
                "details": "array of low issue objects"
              }
            },
            "mama_bear_verdict": {
              "production_ready": "boolean",
              "confidence_level": "number (0-100)",
              "verdict_code": "APPROVED|RISKY|BLOCKED",
              "mama_bear_message": "string (worried mother assessment)",
              "recommendation_to_origin": "APPROVE_PRODUCTION|CAUTION_PRODUCTION|BLOCK_PRODUCTION",
              "fix_these_first": "array of must-fix issues before production"
            },
            "agent_performance_analysis": {
              "best_performing_agents": "array of agent_ids with scores",
              "agents_with_issues": "array of agent_ids with problems",
              "overall_agent_system_health": "EXCELLENT|GOOD|FAIR|POOR",
              "agent_coordination_effectiveness": "number (0-100)"
            },
            "workflow_id": "string (from context)",
            "agent_name": "mama_bear_agent",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "assessment_thoroughness": "number (0-100)",
              "issue_detection_accuracy": "number (0-100)",
              "production_safety_score": "number (0-100)"
            },
            "communication_to_origin": {
              "structured_message_created": "boolean",
              "communication_file_path": "string (.data/mama_bear_to_origin_communication.json)",
              "origin_agent_handoff": "boolean",
              "next_agent_recommendation": "string (origin_agent)"
            },
            "bonus_contributions": {
              "extra_security_scans_performed": "boolean",
              "proactive_issue_prevention": "array of preventive measures",
              "code_quality_improvements_suggested": "number",
              "architectural_insights_provided": "number",
              "customer_protection_enhancements": "array of protection measures",
              "contribution_value_score": "number (0-100)"
            },
            "agent_id": "string (agent identifier)",
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)",
            "cross_agent_validation": "object with validation results",
            "git_operations": {
              "commit_operations": "object",
              "staging_operations": "object"
            },
            "gate_promotion_decision": {
              "overall_validation_score": "string (percentage)",
              "gate_decision": "PASS|CONDITIONAL_PASS|FAIL",
              "workflow_completion_status": "COMPLETE|REPEAT_CYCLE"
            }
          },
          "build_trace_id": "BUILD_20251009_032956_b8daa1dd",
          "build_timestamp": "2025-10-09T03:29:56.374785",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.374841",
            "build_trace_id": "BUILD_20251009_032956_b8daa1dd",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 33041,
        "last_modified": "2025-10-09T03:29:56.375685"
      },
      {
        "name": "Oracle",
        "id": "oracle",
        "file": "1b_oracle_from_user_to_architect.json",
        "franchise": "framer",
        "polymorphic_schema": {
          "schema_class": "UserInputTranslatorAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Input processing",
            "Requirements extraction",
            "Translation accuracy",
            "Structured output generation"
          ]
        },
        "json_data": {
          "agent_id": "oracle",
          "agent_version": "2.0.0",
          "output_schema": {
            "workflow_id": "string (from previous agent or user input)",
            "agent_name": "requirements_analysis_agent",
            "source_agent_type": "oracle",
            "timestamp": "string (ISO_TIMESTAMP)",
            "client_directory": "CLIENT_DIR_ABSOLUTE",
            "workflow_specification": "string (path to workflow spec file)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "requirements_generated": "number",
              "complexity_score": "number (0-100)",
              "dependency_accuracy": "number (0-100)"
            },
            "client_codebase_analysis": {
              "llm_collector_run": "boolean",
              "total_files_analyzed": "number",
              "existing_components_identified": "array of components",
              "pap_layer_mapping": "object with layer breakdown",
              "integration_points": "array of integration opportunities"
            },
            "input_analysis": {
              "source_agent": "USER_INPUT",
              "cache_file": ".data/{workflow_id}_user_input_specifications.json",
              "user_requirements_received": "array of strings",
              "workflow_spec_processed": "string",
              "user_priorities_identified": "array of strings"
            },
            "requirements_summary": {
              "total_requirements": "number (max 30)",
              "total_subtasks": "number",
              "critical_count": "number (max 8)",
              "high_count": "number (max 10)",
              "medium_count": "number (max 8)",
              "low_count": "number (max 4)",
              "estimated_total_effort": "string",
              "total_effort_hours": "number",
              "files_affected_count": "number"
            },
            "implementation_phases": {
              "phase_1_critical": {
                "description": "Critical features for CLIENT_DIRECTORY implementation",
                "estimated_duration": "string",
                "total_requirements": "number (max 8)",
                "total_effort_hours": "number",
                "requirements": [
                  {
                    "req_id": "string (REQ-LAYER-###)",
                    "title": "string (specific to CLIENT_DIRECTORY)",
                    "description": "string (implementation in client codebase)",
                    "priority": "CRITICAL",
                    "effort_estimate": "string (X hours with breakdown)",
                    "source_issue_ids": "array (from workflow spec or user input)",
                    "affected_files": [
                      {
                        "path": "string (CLIENT_DIRECTORY file path)",
                        "lines_affected": "string (estimated ranges)",
                        "modification_type": "add|refactor|remove|replace",
                        "before_code_sample": "string (WARP-DEMO current client code)",
                        "after_code_sample": "string (WARP-DEMO expected implementation)"
                      }
                    ],
                    "dependencies": {
                      "requires": "array of req_ids",
                      "blocks": "array of req_ids",
                      "parallel_with": "array of req_ids"
                    },
                    "pap_layer": "data|web|api",
                    "components_affected": [
                      {
                        "component_name": "string (client component)",
                        "current_status": "MISSING|PARTIAL|FAKE|EXISTS",
                        "target_status": "REAL",
                        "modification_scope": "interface|implementation|configuration"
                      }
                    ],
                    "acceptance_criteria": "array of testable criteria",
                    "implementation_chunks": [
                      {
                        "chunk_id": "string",
                        "title": "string",
                        "description": "string",
                        "effort_hours": "number (max 12)",
                        "deliverable": "string"
                      }
                    ],
                    "testing_requirements": {
                      "unit_tests": "array of test names",
                      "integration_tests": "array of test names",
                      "validation_tests": "array of test names"
                    },
                    "configuration_changes": [
                      {
                        "file": "string (CLIENT_DIRECTORY config file)",
                        "section": "string",
                        "changes": "string"
                      }
                    ],
                    "fake_components_to_replace": [
                      {
                        "current_fake": "string (WARP-DEMO placeholder)",
                        "replacement": "string (workflow spec implementation)",
                        "location": "string (CLIENT_DIRECTORY file:lines)"
                      }
                    ],
                    "implementation_ticket": {
                      "title": "string (clear, actionable ticket title)",
                      "description": "string (detailed implementation description)",
                      "acceptance_criteria": "array of strings (testable criteria)",
                      "files_to_create": "array of strings (new file paths in CLIENT_DIRECTORY)",
                      "files_to_modify": "array of strings (existing file paths to modify)",
                      "starting_point_tips": [
                        "string (tip referencing existing CLIENT_DIRECTORY components)",
                        "string (tip about integration patterns)",
                        "string (tip about WARP-DEMO watermark locations)",
                        "string (tip about testing approach)"
                      ],
                      "implementation_steps": [
                        "string (step 1: setup/preparation)",
                        "string (step 2: core implementation)",
                        "string (step 3: integration)",
                        "string (step 4: testing)",
                        "string (step 5: validation)"
                      ],
                      "testing_requirements": [
                        "string (unit test specification)",
                        "string (integration test specification)",
                        "string (e2e test specification with WARP-DEMO data)",
                        "string (background task testing approach)"
                      ],
                      "estimated_hours": "string (from effort_estimate)",
                      "depends_on": "array of req_ids (dependencies)",
                      "watermark_locations": [
                        "string (specific file:location for WARP-DEMO watermarks)",
                        "string (test data watermark locations)",
                        "string (UI component watermark locations)"
                      ],
                      "codebase_integration_points": [
                        "string (existing component to extend/integrate)",
                        "string (configuration file to update)",
                        "string (database schema to modify)"
                      ]
                    }
                  }
                ]
              },
              "phase_2_high": {
                "description": "string",
                "estimated_duration": "string",
                "total_requirements": "number (max 10)",
                "requirements": "array (same detailed structure as phase_1)"
              },
              "phase_3_medium": {
                "description": "string",
                "estimated_duration": "string",
                "total_requirements": "number (max 8)",
                "requirements": "array (same detailed structure as phase_1)"
              },
              "phase_4_low": {
                "description": "string",
                "estimated_duration": "string",
                "total_requirements": "number (max 4)",
                "requirements": "array (same detailed structure as phase_1)"
              }
            },
            "dependency_graph": {
              "description": "Implementation dependency mapping for CLIENT_DIRECTORY",
              "total_dependencies": "number",
              "critical_path_requirements": "array of req_ids",
              "dependencies": {
                "REQ_ID": {
                  "depends_on": "array of req_ids",
                  "blocks": "array of req_ids",
                  "parallel_with": "array of req_ids",
                  "critical_path": "boolean",
                  "estimated_delay_if_blocked": "string"
                }
              }
            },
            "implementation_timeline": {
              "total_duration": "string",
              "weekly_breakdown": [
                {
                  "week": "number",
                  "focus_area": "string (CLIENT_DIRECTORY area)",
                  "requirements_to_complete": "array of req_ids",
                  "estimated_hours": "number",
                  "key_deliverables": "array of strings",
                  "risk_factors": "array of strings"
                }
              ],
              "resource_allocation": {
                "senior_developer_hours": "number",
                "mid_developer_hours": "number",
                "qa_testing_hours": "number",
                "devops_hours": "number"
              }
            },
            "validation_metrics": {
              "coverage_percentage": "100%",
              "requirements_with_file_paths": "number",
              "requirements_with_line_numbers": "number",
              "requirements_with_code_samples": "number",
              "client_integration_points": "number",
              "critical_path_duration": "string"
            },
            "next_agent": "architect",
            "next_agent_input": {
              "workflow_id": "string (from user input)",
              "total_requirements": "number",
              "critical_requirements": "array of req_ids",
              "cache_file": ".data/{workflow_id}_requirements_analysis.json",
              "validation_focus": [
                "CLIENT_DIRECTORY implementation feasibility",
                "Workflow spec to client code mapping accuracy",
                "Existing component integration validation",
                "PAP compliance for WARPCORE integration",
                "Implementation effort and timeline realism"
              ],
              "source_type": "user_input"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "agent_id": "string (agent identifier)",
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)",
            "translation_summary": {
              "raw_input_processed": "boolean",
              "structured_requirements_generated": "number",
              "translation_confidence": "number (0-100)",
              "input_complexity_score": "number (0-100)"
            },
            "translation_results": {
              "processed_input": "string",
              "extracted_requirements": "array of requirement objects",
              "validation_status": "VALID|NEEDS_REVIEW|INVALID"
            }
          },
          "build_trace_id": "BUILD_20251009_032956_eeb223ae",
          "build_timestamp": "2025-10-09T03:29:56.373804",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.373854",
            "build_trace_id": "BUILD_20251009_032956_eeb223ae",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 26738,
        "last_modified": "2025-10-09T03:29:56.374226"
      },
      {
        "name": "Origin",
        "id": "origin",
        "file": "0a_origin_from_none_to_boss.json",
        "franchise": "framer",
        "polymorphic_schema": {
          "schema_class": "BootstrapAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "System health validation",
            "Agent discovery results",
            "Bootstrap configuration",
            "Orchestrator preparation"
          ]
        },
        "json_data": {
          "agent_id": "origin",
          "agent_version": "1.0.0",
          "output_schema": {
            "bootstrap_id": "string (generated)",
            "timestamp": "string (ISO format)",
            "bootstrap_mode": "fresh_start|full_steam_continue|emergency_restart|health_check",
            "current_directory": "string (pwd output)",
            "system_health": {
              "warpcore_directory_valid": "boolean",
              "all_agents_discovered": "boolean",
              "agent_file_paths": {
                "bootstrap_agent": "string",
                "orchestrator_agent": "string",
                "schema_reconciler": "string",
                "requirements_generator": "string",
                "requirements_validator": "string",
                "implementation_agent": "string",
                "gate_promote_agent": "string"
              },
              "llm_collector_available": "boolean",
              "llm_collector_path": "string",
              "git_repository_valid": "boolean",
              "tmp_directory_writable": "boolean",
              "overall_health_status": "HEALTHY|DEGRADED|CRITICAL"
            },
            "workflow_discovery": {
              "existing_workflows_found": "number",
              "workflow_states": "array of workflow state objects",
              "latest_workflow_id": "string",
              "recommended_action": "string"
            },
            "agent_0_launch": {
              "orchestrator_config_loaded": "boolean",
              "orchestrator_prompt_extracted": "boolean",
              "bootstrap_input_prepared": "boolean",
              "agent_0_execution_success": "boolean",
              "agent_0_output_received": "boolean"
            },
            "bootstrap_execution": {
              "mode_executed": "string",
              "execution_success": "boolean",
              "workflow_id_generated": "string",
              "next_agent_called": "string (orchestrator_agent)",
              "full_steam_activated": "boolean"
            },
            "next_agent_handoff": {
              "target_agent": "workflow_orchestrator_agent",
              "handoff_data": "object with orchestrator input",
              "cache_file_created": "string",
              "bootstrap_complete": "boolean"
            },
            "workflow_id": "string (from context)",
            "agent_name": "bootstrap_agent",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "bootstrap_success_rate": "number (0-100)",
              "agent_discovery_accuracy": "number (0-100)",
              "system_readiness_score": "number (0-100)"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "agent_id": "string (agent identifier)",
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)"
          },
          "build_trace_id": "BUILD_20251009_032956_db8b4916",
          "build_timestamp": "2025-10-09T03:29:56.371156",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.371208",
            "build_trace_id": "BUILD_20251009_032956_db8b4916",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 28175,
        "last_modified": "2025-10-09T03:29:56.371528"
      },
      {
        "name": "Pathfinder",
        "id": "pathfinder",
        "file": "1a_pathfinder_from_boss_to_architect.json",
        "franchise": "framer",
        "polymorphic_schema": {
          "schema_class": "SchemaReconcilerAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "File analysis summary",
            "Coherence issue detection",
            "PAP compliance scoring",
            "Detailed findings reporting"
          ]
        },
        "json_data": {
          "agent_id": "pathfinder",
          "agent_version": "1.0.0",
          "output_schema": {
            "workflow_id": "string (wf_generated_uuid)",
            "agent_name": "schema_coherence_reconciler_agent",
            "timestamp": "string (ISO_TIMESTAMP)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "issues_identified": "number",
              "files_analyzed": "number",
              "compliance_score": "number (0-100)"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "analysis_summary": {
              "total_files_analyzed": "number",
              "total_lines": "number",
              "pap_compliance_score": "string (percentage)",
              "coherence_issues_found": "number",
              "fake_demo_markers_total": "number",
              "architectural_violations_total": "number"
            },
            "detailed_file_analysis": {
              "by_pap_layer": {
                "data_layer_files": "array of {file_path, status, issues_count, fake_markers_count}",
                "web_layer_files": "array of {file_path, status, issues_count, fake_markers_count}",
                "api_layer_files": "array of {file_path, status, issues_count, fake_markers_count}",
                "other_files": "array of {file_path, status, issues_count, fake_markers_count}"
              },
              "by_component_status": {
                "real_components": "array of {component_name, file_path, evidence, compliance_score}",
                "fake_demo_components": "array of {component_name, file_path, fake_patterns_found, line_numbers}",
                "partial_components": "array of {component_name, file_path, missing_functionality, completion_estimate}",
                "missing_components": "array of {component_name, expected_location, referenced_in, priority}"
              }
            },
            "layer_analysis": {
              "data_layer": {
                "total_files": "number",
                "real_components": "array of {name, file_path, classes, methods, compliance_notes}",
                "fake_components": "array of {name, file_path, fake_patterns, line_numbers, severity}",
                "missing_components": "array of {name, expected_path, referenced_in, impact}",
                "coherence_gaps": "array of {gap_description, files_affected, pap_rule_violated, fix_recommendation}",
                "compliance_score": "string (percentage with justification)"
              },
              "web_layer": {
                "total_files": "number",
                "real_components": "array of {name, file_path, classes, methods, compliance_notes}",
                "fake_components": "array of {name, file_path, fake_patterns, line_numbers, severity}",
                "missing_components": "array of {name, expected_path, referenced_in, impact}",
                "coherence_gaps": "array of {gap_description, files_affected, pap_rule_violated, fix_recommendation}",
                "compliance_score": "string (percentage with justification)"
              },
              "api_layer": {
                "total_files": "number",
                "real_components": "array of {name, file_path, classes, methods, compliance_notes}",
                "fake_components": "array of {name, file_path, fake_patterns, line_numbers, severity}",
                "missing_components": "array of {name, expected_path, referenced_in, impact}",
                "coherence_gaps": "array of {gap_description, files_affected, pap_rule_violated, fix_recommendation}",
                "compliance_score": "string (percentage with justification)"
              }
            },
            "schema_coherence_issues": [
              {
                "issue_id": "string",
                "type": "naming_inconsistency|interface_mismatch|architectural_violation|missing_component|fake_contamination",
                "location": "string (exact file path)",
                "line_numbers": "array of numbers",
                "description": "string (detailed description)",
                "current_state": "string (what exists now)",
                "expected_state": "string (what should exist)",
                "pap_rule_violated": "string (which PAP rule is broken)",
                "fix_recommendation": "string (specific actionable fix)",
                "estimated_effort": "string (hours/days)",
                "dependencies": "array of strings (other issues that must be fixed first)",
                "severity": "CRITICAL|HIGH|MEDIUM|LOW",
                "impact": "string (consequences of not fixing)"
              }
            ],
            "fake_demo_analysis": {
              "total_warp_markers": "number",
              "total_demo_markers": "number",
              "total_fake_markers": "number",
              "detailed_findings": [
                {
                  "file_path": "string",
                  "marker_type": "WARP|DEMO|FAKE",
                  "line_number": "number",
                  "content": "string (actual marker text)",
                  "context": "string (surrounding code context)",
                  "replacement_recommendation": "string"
                }
              ],
              "security_concerns": "array of {concern, file_path, line_number, risk_level}",
              "cleanup_priority": "array of strings (ordered by priority)"
            },
            "architectural_compliance": {
              "pap_flow_compliance": {
                "route_layer": "percentage with violations listed",
                "controller_layer": "percentage with violations listed",
                "orchestrator_layer": "percentage with violations listed",
                "provider_layer": "percentage with violations listed",
                "middleware_layer": "percentage with violations listed",
                "executor_layer": "percentage with violations listed"
              },
              "interface_consistency": "array of {interface_name, files_implementing, consistency_issues}",
              "naming_coherence": "array of {expected_name, actual_name, file_path, fix_needed}",
              "dependency_flow_violations": "array of {violation_description, files_involved, fix_recommendation}"
            },
            "cross_reference_validation": {
              "consistency_check_passed": "boolean",
              "validation_errors": "array of strings (if any inconsistencies found)",
              "data_integrity_score": "string (percentage)"
            },
            "next_agent": "architect",
            "next_agent_input": {
              "workflow_id": "string",
              "total_issues_found": "number",
              "critical_issues_count": "number",
              "priority_gaps": "array of strings (ordered by severity and impact)",
              "cache_file": "string",
              "focus_areas": "array of strings (areas requiring immediate attention)"
            },
            "detailed_findings": "array of issue objects",
            "pap_layer_compliance": "object with layer breakdown",
            "agent_id": "string (agent identifier)",
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)"
          },
          "build_trace_id": "BUILD_20251009_032956_e207897b",
          "build_timestamp": "2025-10-09T03:29:56.379918",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.379978",
            "build_trace_id": "BUILD_20251009_032956_e207897b",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 29661,
        "last_modified": "2025-10-09T03:29:56.380308"
      }
    ],
    "staff": [
      {
        "name": "Architect",
        "id": "architect",
        "file": "2_architect_from_pathfinder_oracle_to_enforcer.json",
        "franchise": "staff",
        "polymorphic_schema": {
          "schema_class": "RequirementsGeneratorAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Requirements enumeration",
            "Priority classification",
            "Implementation phases",
            "Dependency mapping"
          ]
        },
        "json_data": {
          "agent_id": "architect",
          "agent_version": "2.0.0",
          "output_schema": {
            "workflow_id": "string (FROM_SMART_INPUT_DISCOVERY)",
            "agent_name": "requirements_analysis_agent",
            "source_agent_type": "schema_based_requirements_generator",
            "timestamp": "string (ISO_TIMESTAMP)",
            "client_directory": "CLIENT_DIR_ABSOLUTE",
            "workflow_specification": "string (path to workflow spec file)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "requirements_generated": "number",
              "complexity_score": "number (0-100)",
              "dependency_accuracy": "number (0-100)"
            },
            "client_codebase_analysis": {
              "llm_collector_run": "boolean",
              "total_files_analyzed": "number",
              "existing_components_identified": "array of components",
              "pap_layer_mapping": "object with layer breakdown",
              "integration_points": "array of integration opportunities"
            },
            "input_analysis": {
              "source_agent": "pathfinder",
              "cache_file": ".data/{workflow_id}_{trace_id}_previous_agent_output.json",
              "user_requirements_received": "array of strings (from schema gaps)",
              "workflow_spec_processed": "string",
              "user_priorities_identified": "array of strings (from schema analysis)"
            },
            "requirements_summary": {
              "total_requirements": "number (max 30)",
              "total_subtasks": "number",
              "critical_count": "number (max 8)",
              "high_count": "number (max 10)",
              "medium_count": "number (max 8)",
              "low_count": "number (max 4)",
              "estimated_total_effort": "string",
              "total_effort_hours": "number",
              "files_affected_count": "number"
            },
            "implementation_phases": {
              "phase_1_critical": {
                "description": "Critical features for CLIENT_DIRECTORY implementation",
                "estimated_duration": "string",
                "total_requirements": "number (max 8)",
                "total_effort_hours": "number",
                "requirements": [
                  {
                    "req_id": "string (REQ-LAYER-###)",
                    "title": "string (specific to CLIENT_DIRECTORY)",
                    "description": "string (implementation in client codebase)",
                    "priority": "CRITICAL",
                    "effort_estimate": "string (X hours with breakdown)",
                    "source_issue_ids": "array (from schema coherence issues)",
                    "affected_files": [
                      {
                        "path": "string (CLIENT_DIRECTORY file path)",
                        "lines_affected": "string (estimated ranges)",
                        "modification_type": "add|refactor|remove|replace",
                        "before_code_sample": "string (WARP-DEMO current client code)",
                        "after_code_sample": "string (WARP-DEMO expected implementation)"
                      }
                    ],
                    "dependencies": {
                      "requires": "array of req_ids",
                      "blocks": "array of req_ids",
                      "parallel_with": "array of req_ids"
                    },
                    "pap_layer": "data|web|api",
                    "components_affected": [
                      {
                        "component_name": "string (client component)",
                        "current_status": "MISSING|PARTIAL|FAKE|EXISTS",
                        "target_status": "REAL",
                        "modification_scope": "interface|implementation|configuration"
                      }
                    ],
                    "acceptance_criteria": "array of testable criteria",
                    "implementation_chunks": [
                      {
                        "chunk_id": "string",
                        "title": "string",
                        "description": "string",
                        "effort_hours": "number (max 12)",
                        "deliverable": "string"
                      }
                    ],
                    "testing_requirements": {
                      "unit_tests": "array of test names",
                      "integration_tests": "array of test names",
                      "validation_tests": "array of test names"
                    },
                    "configuration_changes": [
                      {
                        "file": "string (CLIENT_DIRECTORY config file)",
                        "section": "string",
                        "changes": "string"
                      }
                    ],
                    "fake_components_to_replace": [
                      {
                        "current_fake": "string (WARP-DEMO placeholder)",
                        "replacement": "string (workflow spec implementation)",
                        "location": "string (CLIENT_DIRECTORY file:lines)"
                      }
                    ]
                  }
                ]
              },
              "phase_2_high": {
                "description": "string",
                "estimated_duration": "string",
                "total_requirements": "number (max 10)",
                "requirements": "array (same detailed structure as phase_1)"
              },
              "phase_3_medium": {
                "description": "string",
                "estimated_duration": "string",
                "total_requirements": "number (max 8)",
                "requirements": "array (same detailed structure as phase_1)"
              },
              "phase_4_low": {
                "description": "string",
                "estimated_duration": "string",
                "total_requirements": "number (max 4)",
                "requirements": "array (same detailed structure as phase_1)"
              }
            },
            "dependency_graph": {
              "description": "Implementation dependency mapping for CLIENT_DIRECTORY",
              "total_dependencies": "number",
              "critical_path_requirements": "array of req_ids",
              "dependencies": {
                "REQ_ID": {
                  "depends_on": "array of req_ids",
                  "blocks": "array of req_ids",
                  "parallel_with": "array of req_ids",
                  "critical_path": "boolean",
                  "estimated_delay_if_blocked": "string"
                }
              }
            },
            "implementation_timeline": {
              "total_duration": "string",
              "weekly_breakdown": [
                {
                  "week": "number",
                  "focus_area": "string (CLIENT_DIRECTORY area)",
                  "requirements_to_complete": "array of req_ids",
                  "estimated_hours": "number",
                  "key_deliverables": "array of strings",
                  "risk_factors": "array of strings"
                }
              ],
              "resource_allocation": {
                "senior_developer_hours": "number",
                "mid_developer_hours": "number",
                "qa_testing_hours": "number",
                "devops_hours": "number"
              }
            },
            "validation_metrics": {
              "coverage_percentage": "100%",
              "requirements_with_file_paths": "number",
              "requirements_with_line_numbers": "number",
              "requirements_with_code_samples": "number",
              "client_integration_points": "number",
              "critical_path_duration": "string"
            },
            "next_agent": "enforcer",
            "next_agent_input": {
              "workflow_id": "string (FROM_SMART_INPUT_DISCOVERY)",
              "total_requirements": "number",
              "critical_requirements": "array of req_ids",
              "cache_file": ".data/{workflow_id}_{trace_id}_previous_agent_output.json",
              "validation_focus": [
                "CLIENT_DIRECTORY implementation feasibility",
                "Schema gap coverage and accuracy",
                "Existing component integration validation",
                "PAP compliance for WARPCORE integration",
                "Implementation effort and timeline realism"
              ],
              "source_type": "schema_analysis"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)"
          },
          "build_trace_id": "BUILD_20251009_032956_86305c3f",
          "build_timestamp": "2025-10-09T03:29:56.383340",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.383382",
            "build_trace_id": "BUILD_20251009_032956_86305c3f",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 24915,
        "last_modified": "2025-10-09T03:29:56.383733"
      },
      {
        "name": "Boss",
        "id": "boss",
        "file": "0b_boss_from_origin_to_pathfinder.json",
        "franchise": "staff",
        "polymorphic_schema": {
          "schema_class": "OrchestratorAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Agent sequencing",
            "Workflow coordination",
            "Agent lifecycle management",
            "Orchestration success tracking"
          ]
        },
        "json_data": {
          "agent_id": "boss",
          "agent_version": "1.0.0",
          "output_schema": {
            "orchestration_id": "string (generated)",
            "workflow_id": "string (wf_* format)",
            "orchestration_type": "start_fresh|restart|continue",
            "timestamp": "string (ISO format)",
            "current_directory": "string (pwd output)",
            "agent_file_validation": {
              "all_agents_found": "boolean",
              "agent_files": {
                "schema_reconciler": ".workflows/warp/dev/gap_analysis_agent_1_schema_reconciler.json",
                "requirements_generator": ".workflows/warp/dev/gap_analysis_agent_2_requirements_generator.json",
                "requirements_validator": ".workflows/warp/dev/gap_analysis_agent_3_requirements_validator.json",
                "implementor": ".workflows/warp/dev/gap_analysis_agent_4_implementor.json",
                "gate_promote": ".workflows/warp/dev/gap_analysis_agent_5_gate_promote.json"
              },
              "missing_agents": "array of missing agent file paths"
            },
            "execution_plan": {
              "total_agents": "number (5)",
              "start_agent": "number (1-5)",
              "end_agent": "number (5)",
              "estimated_duration": "string",
              "cache_strategy": "string"
            },
            "agent_execution_sequence": "array of agent execution objects",
            "workflow_state": {
              "current_agent": "number",
              "completion_percentage": "string",
              "estimated_remaining_time": "string",
              "last_successful_agent": "number",
              "failed_agents": "array"
            },
            "cache_management": {
              "workflow_cache_dir": "string (.data/)",
              "cache_files_created": "array of strings",
              "cache_files_preserved": "array of strings",
              "cache_cleanup_needed": "boolean"
            },
            "next_steps": {
              "continue_to_agent": "number",
              "manual_intervention_required": "boolean",
              "restart_recommendations": "array of strings",
              "completion_criteria": "string"
            },
            "agent_name": "workflow_orchestrator_agent",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "orchestration_success_rate": "number (0-100)",
              "agent_coordination_accuracy": "number (0-100)",
              "workflow_completion_rate": "number (0-100)"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "orchestration_results": {
              "agents_sequenced": "number",
              "agents_launched": "array of agent_ids",
              "agents_completed": "array of agent_ids",
              "workflow_status": "IN_PROGRESS|COMPLETED|FAILED"
            },
            "agent_coordination": {
              "current_active_agent": "string",
              "pending_agents": "array of agent_ids",
              "failed_agents": "array of agent_ids"
            },
            "next_agent_handoff": {
              "target_agent": "pathfinder|oracle",
              "handoff_data": "object with orchestration data",
              "cache_file_created": "string",
              "routing_complete": "boolean",
              "routing_decision": "string (pathfinder for gap analysis, oracle for user input)"
            },
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)"
          },
          "build_trace_id": "BUILD_20251009_032956_87d621da",
          "build_timestamp": "2025-10-09T03:29:56.382661",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.382716",
            "build_trace_id": "BUILD_20251009_032956_87d621da",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 29935,
        "last_modified": "2025-10-09T03:29:56.383020"
      },
      {
        "name": "Craftbuddy",
        "id": "craftbuddy",
        "file": "4b_craftbuddy_from_craftsman_to_craftsman.json",
        "franchise": "staff",
        "polymorphic_schema": {
          "schema_class": "RequirementsGeneratorAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Requirements enumeration",
            "Priority classification",
            "Implementation phases",
            "Dependency mapping"
          ]
        },
        "json_data": {
          "agent_id": "craftbuddy",
          "agent_version": "1.1.0",
          "output_schema": {
            "workflow_id": "string (from craftsman results)",
            "agent_name": "craftbuddy",
            "timestamp": "string (ISO_TIMESTAMP)",
            "decision": "generate_requirements|pass_to_gatekeeper|send_to_enforcer",
            "creative_assessment": "string (summary of opportunities found or readiness)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "creative_opportunities_found": "number",
              "enhancement_value_score": "number (0-100)",
              "decision_confidence": "number (0-100)"
            },
            "input_analysis": {
              "source_agent": "craftsman",
              "cache_file": ".data/{workflow_id}_craftsman_results.json",
              "requirements_implemented": "number",
              "files_modified": "number",
              "implementation_quality": "string"
            },
            "decision_rationale": {
              "primary_reason": "string",
              "supporting_factors": "array of strings",
              "risk_assessment": "LOW|MEDIUM|HIGH",
              "effort_vs_value_analysis": "string"
            },
            "requirements_generated": {
              "total_requirements": "number (if generate_requirements)",
              "critical_count": "number",
              "high_count": "number",
              "medium_count": "number",
              "low_count": "number",
              "estimated_total_effort": "string",
              "bonus_value_summary": "string",
              "implementation_phases": {
                "phase_1_critical": {
                  "description": "string",
                  "requirements": [
                    {
                      "req_id": "string (BONUS-XXX)",
                      "title": "string",
                      "description": "string",
                      "priority": "CRITICAL|HIGH|MEDIUM|LOW",
                      "effort_estimate": "string (X hours)",
                      "bonus_value": "string (why worth doing)",
                      "affected_files": [
                        {
                          "path": "string",
                          "modification_type": "add|refactor|remove|replace",
                          "before_code_sample": "string",
                          "after_code_sample": "string"
                        }
                      ],
                      "acceptance_criteria": "array of testable criteria"
                    }
                  ]
                }
              }
            },
            "gatekeeper_validation": {
              "implementation_complete": "boolean (if pass_to_gatekeeper)",
              "code_quality_acceptable": "boolean",
              "no_critical_issues": "boolean",
              "ready_for_promotion": "boolean",
              "promotion_confidence": "number (0-100)",
              "validation_summary": "string",
              "files_ready_for_commit": "array of file paths",
              "git_preparation_status": "READY|NEEDS_WORK"
            },
            "next_agent_handoff": {
              "target_agent": "enforcer|gatekeeper",
              "handoff_data": "object with appropriate schema data",
              "cache_file_created": "string",
              "routing_complete": "boolean"
            },
            "creative_enhancements": [
              {
                "enhancement_id": "string",
                "title": "string",
                "description": "string",
                "category": "quick_win|bonus_feature|performance|security|ux",
                "effort_estimate": "string",
                "value_score": "number (0-100)",
                "implementation_priority": "HIGH|MEDIUM|LOW"
              }
            ],
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "testing_asset_validation": {
              "existing_tests_executed": "boolean",
              "existing_tests_passed": "number",
              "existing_tests_failed": "number",
              "new_playwright_tests_created": "number",
              "api_endpoints_validated": "array of endpoint paths",
              "asset_cache_organized": "boolean",
              "cache_directory_path": "string (.data/assets/wf/{workflow_id}/{agent}/{trace_id}/)",
              "test_artifacts_preserved": {
                "existing_test_copies": "array of file paths",
                "playwright_tests": "array of file paths",
                "api_validation_scripts": "array of file paths",
                "test_results": "array of file paths",
                "benchmark_data": "array of file paths"
              },
              "validation_summary": {
                "all_tests_passing": "boolean",
                "no_code_changes_made": "boolean",
                "comprehensive_coverage_achieved": "boolean",
                "assets_properly_cached": "boolean",
                "cleanup_completed": "boolean"
              },
              "background_execution_logs": "array of tmp log file paths"
            },
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)",
            "requirements_summary": {
              "total_requirements": "number (max 30)",
              "critical_count": "number",
              "high_count": "number",
              "medium_count": "number",
              "low_count": "number"
            },
            "implementation_phases": "object with phase breakdown",
            "dependency_graph": "object with dependency mapping"
          },
          "build_trace_id": "BUILD_20251009_032956_c506f1e7",
          "build_timestamp": "2025-10-09T03:29:56.386539",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.386580",
            "build_trace_id": "BUILD_20251009_032956_c506f1e7",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 22419,
        "last_modified": "2025-10-09T03:29:56.386894"
      },
      {
        "name": "Craftsman Implementation",
        "id": "craftsman_implementation",
        "file": "4a_craftsman_from_enforcer_craftbuddy_to_gatekeeper_craftbuddy.json",
        "franchise": "staff",
        "polymorphic_schema": {
          "schema_class": "ImplementationAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Code implementation",
            "Test execution",
            "File modifications",
            "Git preparation"
          ]
        },
        "json_data": {
          "agent_id": "craftsman_implementation",
          "agent_version": "1.1.0",
          "output_schema": {
            "workflow_id": "string (FROM_SMART_INPUT_DISCOVERY)",
            "agent_name": "implementation_agent",
            "timestamp": "string (ISO_TIMESTAMP)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "requirements_implemented": "number",
              "implementation_success_rate": "number (0-100)",
              "code_quality_score": "number (0-100)"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "input_analysis": {
              "source_agent": "enforcer",
              "cache_file": ".data/{workflow_id}_{trace_id}_previous_agent_output.json",
              "approved_requirements_count": "number",
              "total_requirements_processed": "number",
              "implementation_scope": "string"
            },
            "implementation_summary": {
              "requirements_implemented": "number",
              "requirements_failed": "number",
              "files_modified": "number",
              "lines_changed": "number",
              "tests_executed": "number",
              "tests_passed": "number",
              "tests_failed": "number",
              "acceptance_criteria_met": "number",
              "acceptance_criteria_failed": "number",
              "total_implementation_time": "string"
            },
            "implementation_phases": {
              "phase_1_critical": {
                "description": "AWS removal and critical fixes",
                "requirements_implemented": "array of req_ids",
                "files_modified": "array of file paths",
                "implementation_status": "COMPLETE|PARTIAL|FAILED",
                "issues_encountered": "array of strings"
              },
              "phase_2_high": {
                "description": "Fake code replacement and PAP compliance",
                "requirements_implemented": "array of req_ids",
                "files_modified": "array of file paths",
                "implementation_status": "COMPLETE|PARTIAL|FAILED",
                "issues_encountered": "array of strings"
              },
              "phase_3_medium": {
                "description": "Schema consistency and interface standardization",
                "requirements_implemented": "array of req_ids",
                "files_modified": "array of file paths",
                "implementation_status": "COMPLETE|PARTIAL|FAILED",
                "issues_encountered": "array of strings"
              },
              "phase_4_low": {
                "description": "Documentation and optimization",
                "requirements_implemented": "array of req_ids",
                "files_modified": "array of file paths",
                "implementation_status": "COMPLETE|PARTIAL|FAILED",
                "issues_encountered": "array of strings"
              }
            },
            "detailed_implementation_results": [
              {
                "req_id": "string",
                "title": "string",
                "implementation_status": "COMPLETE|PARTIAL|FAILED",
                "files_modified": [
                  {
                    "path": "string",
                    "lines_affected": "string",
                    "before_content": "string",
                    "after_content": "string",
                    "modification_success": "boolean",
                    "issues": "array of strings"
                  }
                ],
                "configuration_changes": [
                  {
                    "file": "string",
                    "section": "string",
                    "changes_applied": "string",
                    "success": "boolean"
                  }
                ],
                "fake_components_replaced": [
                  {
                    "component_name": "string",
                    "location": "string",
                    "replacement_status": "COMPLETE|PARTIAL|FAILED",
                    "validation_result": "boolean"
                  }
                ],
                "implementation_chunks": [
                  {
                    "chunk_id": "string",
                    "title": "string",
                    "deliverable": "string",
                    "completion_status": "COMPLETE|PARTIAL|FAILED",
                    "actual_effort_hours": "number",
                    "issues": "array of strings"
                  }
                ],
                "testing_results": {
                  "unit_tests": [
                    {
                      "test_name": "string",
                      "status": "PASS|FAIL|SKIP",
                      "execution_time": "string",
                      "error_message": "string"
                    }
                  ],
                  "integration_tests": [
                    {
                      "test_name": "string",
                      "status": "PASS|FAIL|SKIP",
                      "execution_time": "string",
                      "error_message": "string"
                    }
                  ],
                  "validation_tests": [
                    {
                      "test_name": "string",
                      "status": "PASS|FAIL|SKIP",
                      "execution_time": "string",
                      "error_message": "string"
                    }
                  ]
                },
                "acceptance_criteria_results": [
                  {
                    "criterion": "string",
                    "validation_result": "boolean",
                    "validation_details": "string"
                  }
                ]
              }
            ],
            "llm_collector_comparison": {
              "before_implementation": {
                "total_files": "number",
                "total_lines": "number",
                "fake_markers_count": "number",
                "aws_references_count": "number"
              },
              "after_implementation": {
                "total_files": "number",
                "total_lines": "number",
                "fake_markers_count": "number",
                "aws_references_count": "number"
              },
              "changes_detected": {
                "files_added": "array of strings",
                "files_modified": "array of strings",
                "files_deleted": "array of strings",
                "fake_markers_removed": "number",
                "aws_references_removed": "number",
                "lines_added": "number",
                "lines_removed": "number",
                "lines_modified": "number"
              }
            },
            "git_preparation": {
              "working_directory_clean_before": "boolean",
              "files_staged_for_commit": "array of strings",
              "commit_message_prepared": "string",
              "ready_for_gate_promotion": "boolean"
            },
            "workflow_analytics": {
              "workflow_status": "IN_PROGRESS|COMPLETED|FAILED",
              "completion_percentage": "number (0-100)",
              "sequences_completed": "number",
              "total_estimated_sequences": "number (5)",
              "current_phase": "CRITICAL|HIGH|MEDIUM|LOW",
              "agent_performance": "object with per-agent metrics"
            },
            "progress_metrics": {
              "pap_compliance_score": "number (0-100)",
              "coherence_issues_identified": "number",
              "total_effort_hours_estimated": "string",
              "requirements_generated": "number",
              "requirements_validated": "number"
            },
            "visualization_dashboard_data": {
              "workflow_progress_chart": {
                "labels": "array of agent names",
                "completion_data": "array of percentages",
                "time_data": "array of durations"
              },
              "agent_performance_radar": {
                "agents": "array of agent names",
                "metrics": "array of performance scores"
              },
              "issue_resolution_funnel": {
                "identified": "number",
                "analyzed": "number",
                "resolved": "number"
              },
              "workflow_health_metrics": {
                "overall_health": "number (0-100)",
                "velocity_trend": "INCREASING|STABLE|DECREASING",
                "quality_trend": "IMPROVING|STABLE|DECLINING"
              }
            },
            "predictive_analytics": {
              "estimated_completion": {
                "projected_completion": "ISO_TIMESTAMP",
                "confidence_level": "number (0-100)"
              },
              "risk_indicators": "array of risk objects with probability and impact"
            },
            "trending_metadata": {
              "run_sequence": "number (incremental)",
              "previous_run_comparison": "object",
              "velocity_indicator": "FASTER|SLOWER|SAME",
              "success_rate": "number (0-1)"
            },
            "next_agent": "craftbuddy",
            "next_agent_input": {
              "workflow_id": "{workflow_id}",
              "implementation_complete": "boolean",
              "requirements_implemented": "number",
              "files_modified": "number",
              "cache_file": ".data/{workflow_id}_{trace_id}_previous_agent_output.json",
              "git_changes_ready": "boolean"
            },
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)"
          },
          "build_trace_id": "BUILD_20251009_032956_d879e3e0",
          "build_timestamp": "2025-10-09T03:29:56.388001",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.388060",
            "build_trace_id": "BUILD_20251009_032956_d879e3e0",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 38692,
        "last_modified": "2025-10-09T03:29:56.388469"
      },
      {
        "name": "Enforcer",
        "id": "enforcer",
        "file": "3_enforcer_from_architect_to_craftsman.json",
        "franchise": "staff",
        "polymorphic_schema": {
          "schema_class": "RequirementsValidatorAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Requirements validation",
            "PAP compliance checking",
            "Feasibility assessment",
            "Implementation readiness"
          ]
        },
        "json_data": {
          "agent_id": "enforcer",
          "agent_version": "2.1.0",
          "output_schema": {
            "workflow_id": "string (FROM_SMART_INPUT_DISCOVERY)",
            "agent_name": "requirements_validator_agent",
            "timestamp": "string (ISO_TIMESTAMP)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "requirements_validated": "number",
              "approval_rate": "number (0-100)",
              "validation_accuracy": "number (0-100)"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "input_analysis": {
              "source_agent": "architect|oracle",
              "source_agent_type": "architect|oracle",
              "cache_file": "string",
              "total_requirements_received": "number",
              "validation_focus": "array of strings (context-dependent)",
              "historical_workflows_analyzed": "number",
              "coherence_issues_count": "number (0 if user input)",
              "user_requirements_received": "array of strings (empty if schema-generated)"
            },
            "validation_summary": {
              "requirements_validated": "number",
              "pap_compliant": "number",
              "feasible": "number",
              "implementation_ready": "number",
              "validation_issues": "number",
              "overall_status": "PASS|NEEDS_REVISION|FAIL"
            },
            "validation_results": {
              "pap_compliance": {
                "score": "string (percentage)",
                "compliant_requirements": "array of strings",
                "non_compliant_requirements": "array of strings",
                "compliance_issues": [
                  {
                    "req_id": "string",
                    "issue": "string",
                    "severity": "HIGH|MEDIUM|LOW",
                    "recommendation": "string"
                  }
                ]
              },
              "feasibility_assessment": {
                "realistic_estimates": "array of strings",
                "questionable_estimates": "array of strings",
                "estimate_issues": [
                  {
                    "req_id": "string",
                    "issue": "string",
                    "current_estimate": "string",
                    "recommended_estimate": "string",
                    "rationale": "string"
                  }
                ]
              },
              "dependency_validation": {
                "valid_dependencies": "array of strings",
                "circular_dependencies": "array of strings",
                "missing_dependencies": [
                  {
                    "req_id": "string",
                    "missing_dependency": "string",
                    "reason": "string"
                  }
                ]
              },
              "implementation_readiness": {
                "ready_requirements": "array of strings",
                "needs_refinement": "array of strings",
                "readiness_issues": [
                  {
                    "req_id": "string",
                    "issues": "array of strings",
                    "recommendations": "array of strings"
                  }
                ]
              }
            },
            "validated_requirements": {
              "approved_for_implementation": [
                {
                  "req_id": "string",
                  "status": "APPROVED",
                  "validation_notes": "string",
                  "implementation_priority": "CRITICAL|HIGH|MEDIUM|LOW",
                  "bonus_enhancements": "array of strings",
                  "implementation_ticket": {
                    "title": "string",
                    "description": "string",
                    "acceptance_criteria": "array of strings",
                    "files_to_create": "array of strings",
                    "files_to_modify": "array of strings",
                    "starting_point_tips": "array of strings",
                    "implementation_steps": "array of strings",
                    "testing_requirements": "array of strings",
                    "estimated_hours": "string",
                    "depends_on": "array of req_ids",
                    "watermark_locations": "array of strings"
                  }
                }
              ],
              "requires_revision": [
                {
                  "req_id": "string",
                  "status": "NEEDS_REVISION",
                  "validation_issues": "array of strings",
                  "required_changes": "array of strings"
                }
              ],
              "rejected": [
                {
                  "req_id": "string",
                  "status": "REJECTED",
                  "rejection_reason": "string"
                }
              ]
            },
            "final_recommendations": {
              "proceed_with_implementation": "boolean",
              "approved_requirements_count": "number",
              "revision_required_count": "number",
              "rejected_count": "number",
              "estimated_revision_time": "string",
              "implementation_order": "array of strings",
              "next_steps": "array of strings",
              "bonus_value_summary": "string"
            },
            "workflow_completion": {
              "gap_analysis_complete": "boolean",
              "requirements_generated": "boolean",
              "validation_complete": "boolean",
              "ready_for_implementation": "boolean",
              "cache_files": "array of strings",
              "compression_applied": "boolean"
            },
            "system_contributions": {
              "agent_system_summary_updated": "boolean",
              "workflow_efficiency_improved": "boolean",
              "storage_optimization_applied": "boolean",
              "cross_workflow_learnings_captured": "boolean"
            },
            "next_agent": "craftsman",
            "next_agent_input": {
              "workflow_id": "string (FROM_SMART_INPUT_DISCOVERY)",
              "approved_requirements_count": "number",
              "revision_required_count": "number",
              "rejected_count": "number",
              "cache_file": "string (.data path)",
              "implementation_focus": "array of strings",
              "priority_requirements": "array of req_ids",
              "bonus_considerations": "array of strings",
              "compression_status": "object"
            },
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)"
          },
          "build_trace_id": "BUILD_20251009_032956_9379fa34",
          "build_timestamp": "2025-10-09T03:29:56.385602",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.385648",
            "build_trace_id": "BUILD_20251009_032956_9379fa34",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 30789,
        "last_modified": "2025-10-09T03:29:56.386074"
      },
      {
        "name": "Gatekeeper",
        "id": "gatekeeper",
        "file": "5_gatekeeper_from_craftsman_to_pathfinder.json",
        "franchise": "staff",
        "polymorphic_schema": {
          "schema_class": "GatePromoteAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Cross-agent validation",
            "Git operations",
            "Gate decision making",
            "Workflow completion"
          ]
        },
        "json_data": {
          "agent_id": "gatekeeper",
          "agent_version": "1.0.0",
          "output_schema": {
            "workflow_id": "string (wf_0f432a3ac836)",
            "agent_name": "gate_promote_agent",
            "timestamp": "string (ISO_TIMESTAMP)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "validation_success_rate": "number (0-100)",
              "gate_decision_accuracy": "number (0-100)",
              "cycle_improvement_score": "number (0-100)"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "input_analysis": {
              "source_agent": "craftsman",
              "cache_file": ".data/wf_0f432a3ac836_implementation_results.json",
              "all_previous_agents_loaded": "boolean",
              "workflow_history_complete": "boolean"
            },
            "cross_agent_validation": {
              "agent_1_schema_analysis_validation": {
                "original_coherence_issues": "number (47)",
                "issues_addressed": "number",
                "issues_remaining": "number",
                "original_fake_markers": "number (892)",
                "fake_markers_removed": "number",
                "fake_markers_remaining": "number",
                "original_aws_references": "number",
                "aws_references_removed": "number",
                "aws_references_remaining": "number",
                "original_pap_compliance": "string (89%)",
                "current_pap_compliance": "string",
                "compliance_improved": "boolean",
                "validation_score": "string (percentage)"
              },
              "agent_2_requirements_validation": {
                "total_requirements_generated": "number",
                "requirements_implemented": "number",
                "requirements_not_implemented": "number",
                "implementation_chunks_completed": "number",
                "implementation_chunks_failed": "number",
                "file_modifications_matched": "boolean",
                "testing_requirements_met": "boolean",
                "validation_score": "string (percentage)"
              },
              "agent_3_validation_compliance": {
                "approved_requirements_count": "number",
                "approved_requirements_implemented": "number",
                "rejected_requirements_attempted": "number",
                "acceptance_criteria_met": "number",
                "acceptance_criteria_failed": "number",
                "dependency_order_respected": "boolean",
                "validation_score": "string (percentage)"
              },
              "agent_4_implementation_verification": {
                "claimed_files_modified": "number",
                "actual_files_modified": "number",
                "claimed_tests_passed": "number",
                "actual_tests_passed": "number",
                "claimed_requirements_implemented": "number",
                "verified_requirements_implemented": "number",
                "implementation_accuracy": "string (percentage)"
              }
            },
            "git_operations": {
              "pre_validation_git_status": {
                "working_directory_clean": "boolean",
                "modified_files": "array of strings",
                "untracked_files": "array of strings",
                "staged_files": "array of strings"
              },
              "git_diff_analysis": {
                "total_files_changed": "number",
                "lines_added": "number",
                "lines_removed": "number",
                "lines_modified": "number",
                "diff_summary": "string",
                "modified_files_detail": [
                  {
                    "file_path": "string",
                    "lines_added": "number",
                    "lines_removed": "number",
                    "modification_type": "string"
                  }
                ]
              },
              "staging_operations": {
                "files_staged_for_commit": "array of strings",
                "staging_successful": "boolean",
                "staging_issues": "array of strings"
              },
              "commit_operations": {
                "commit_message_generated": "string",
                "commit_executed": "boolean",
                "commit_hash": "string",
                "commit_issues": "array of strings"
              }
            },
            "llm_collector_final_comparison": {
              "original_state": {
                "total_files": "number (179)",
                "total_lines": "number (46236)",
                "fake_markers_count": "number (892)",
                "aws_references_count": "number",
                "pap_compliance_score": "string (89%)"
              },
              "current_state": {
                "total_files": "number",
                "total_lines": "number",
                "fake_markers_count": "number",
                "aws_references_count": "number",
                "pap_compliance_score": "string"
              },
              "improvements_achieved": {
                "fake_markers_removed": "number",
                "aws_references_removed": "number",
                "compliance_improvement": "string",
                "new_issues_introduced": "number",
                "overall_improvement_score": "string (percentage)"
              }
            },
            "gap_closure_analysis": {
              "original_gaps_total": "number (47)",
              "gaps_closed_successfully": "number",
              "gaps_partially_addressed": "number",
              "gaps_remaining": "number",
              "new_gaps_introduced": "number",
              "gap_closure_percentage": "string (percentage)",
              "detailed_gap_status": [
                {
                  "gap_id": "string",
                  "original_description": "string",
                  "closure_status": "CLOSED|PARTIAL|REMAINING|NEW",
                  "implementation_evidence": "string",
                  "validation_result": "boolean"
                }
              ]
            },
            "gate_promotion_decision": {
              "overall_validation_score": "string (percentage)",
              "validation_threshold_met": "boolean (>= 100%)",
              "gate_decision": "PASS|FAIL",
              "gate_decision_reasoning": "string",
              "critical_issues_blocking": "array of strings",
              "workflow_completion_status": "COMPLETE|REPEAT_CYCLE"
            },
            "workflow_cycle_management": {
              "current_cycle_complete": "boolean",
              "next_cycle_required": "boolean",
              "next_cycle_focus_areas": "array of strings",
              "remaining_work_estimate": "string",
              "cycle_repetition_reason": "string"
            },
            "next_agent_routing": {
              "route_to": "craftsman|pathfinder",
              "next_workflow_id": "string (if repeating)",
              "handoff_data": {
                "previous_cycle_results": "object",
                "remaining_gaps": "array of gap objects",
                "new_issues_detected": "array of issue objects",
                "focus_areas_next_cycle": "array of strings",
                "lessons_learned": "array of strings"
              }
            },
            "audit_trail": {
              "validation_steps_executed": "array of strings",
              "git_commands_executed": "array of strings",
              "llm_collector_runs": "array of timestamps",
              "cross_agent_validations": "array of validation objects",
              "decision_points": "array of decision objects",
              "complete_workflow_history": "object"
            },
            "cycle_analytics": {
              "cycle_number": "number",
              "previous_cycle_results": "object",
              "improvement_metrics": {
                "pap_compliance_improvement": "number",
                "issue_resolution_improvement": "number",
                "velocity_improvement": "number"
              },
              "next_cycle_recommendations": "array of recommendations",
              "cross_cycle_trends": {
                "performance_trend": "IMPROVING|STABLE|DECLINING",
                "efficiency_trend": "FASTER|SAME|SLOWER",
                "quality_trend": "HIGHER|SAME|LOWER"
              }
            },
            "trending_metadata": {
              "run_sequence": "number (incremental)",
              "historical_performance": "array of previous run metrics",
              "velocity_indicator": "FASTER|SLOWER|SAME",
              "success_rate_trend": "number (0-1)",
              "completion_time_trend": "DECREASING|STABLE|INCREASING"
            },
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)"
          },
          "build_trace_id": "BUILD_20251009_032956_c1751f03",
          "build_timestamp": "2025-10-09T03:29:56.380941",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.380989",
            "build_trace_id": "BUILD_20251009_032956_c1751f03",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 35242,
        "last_modified": "2025-10-09T03:29:56.381992"
      },
      {
        "name": "Harmony",
        "id": "harmony",
        "file": "harmony_meta_coherence_agent.json",
        "franchise": "staff",
        "polymorphic_schema": {
          "schema_class": "SchemaReconcilerAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "File analysis summary",
            "Coherence issue detection",
            "PAP compliance scoring",
            "Detailed findings reporting"
          ]
        },
        "json_data": {
          "agent_id": "harmony",
          "agent_version": "1.0.0",
          "output_schema": {
            "harmony_assessment_id": "string (generated)",
            "timestamp": "string (ISO format)",
            "harmony_mode": "full_coherence|schema_sync|prompt_alignment|flow_update|user_adaptation",
            "current_directory": "string (pwd output)",
            "system_analysis": {
              "agents_analyzed": "array of agent file paths",
              "agents_found": "number",
              "agents_missing": "array of missing agent files",
              "prompt_coherence_score": "number (0-100)",
              "schema_coherence_score": "number (0-100)",
              "flow_coherence_score": "number (0-100)"
            },
            "schema_validation": {
              "schema_files_checked": "array of schema file paths",
              "schema_versions_consistent": "boolean",
              "agent_definitions_aligned": "boolean",
              "flow_relationships_valid": "boolean",
              "schema_inconsistencies": "array of inconsistency descriptions"
            },
            "mermaid_coherence": {
              "config_file_status": "PERFECT_ALIGNMENT",
              "generated_diagram_status": "PERFECT_CURRENT",
              "node_styles_complete": true,
              "agent_coverage_complete": true,
              "agent_names_perfect": true,
              "flow_routing_perfect": true,
              "schema_alignment_perfect": true,
              "styling_inconsistencies": [],
              "perfect_coherence_achieved": true,
              "coherence_confidence_score": 100
            },
            "documentation_coherence": {
              "flow_generator_status": "FUNCTIONAL|ISSUES|MISSING",
              "html_documentation_status": "CURRENT|OUTDATED|MISSING",
              "standalone_files_status": "COMPLETE|PARTIAL|MISSING",
              "documentation_inconsistencies": "array of doc issues"
            },
            "coherence_maintenance": {
              "polymorphic_updates_performed": "boolean",
              "environment_context_updated": "boolean",
              "agent_prompts_synchronized": "boolean",
              "schemas_synchronized": "boolean",
              "flow_diagrams_regenerated": "boolean"
            },
            "user_adaptation": {
              "user_requirement_processed": "string|null",
              "adaptations_made": "array of adaptation descriptions",
              "new_agents_added": "array of new agent names",
              "flow_modifications": "array of flow changes",
              "styling_updates": "array of styling changes"
            },
            "harmony_verdict": {
              "overall_coherence_score": "number (0-100)",
              "system_harmony_status": "PERFECT_HARMONY|MINOR_DISCORD|MAJOR_DISCORD|CHAOS",
              "critical_issues_found": "number",
              "improvements_made": "number",
              "harmony_confidence": "number (0-100)",
              "system_ready_for_use": "boolean"
            },
            "improvements_made": {
              "prompts_updated": "array of updated agent IDs",
              "schemas_corrected": "array of schema corrections",
              "documentation_regenerated": "boolean",
              "flow_diagrams_updated": "boolean",
              "styling_improved": "boolean",
              "coherence_issues_resolved": "number"
            },
            "next_maintenance": {
              "recommended_interval": "string (duration)",
              "next_check_date": "string (ISO format)",
              "priority_areas": "array of areas needing attention",
              "proactive_improvements": "array of suggested improvements"
            },
            "workflow_id": "string (from context)",
            "agent_name": "harmony",
            "execution_metrics": {
              "start_time": "string (ISO format)",
              "end_time": "string (ISO format)",
              "duration_seconds": "number",
              "files_analyzed": "number",
              "changes_made": "number"
            },
            "performance_metrics": {
              "coherence_detection_accuracy": "number (0-100)",
              "maintenance_efficiency": "EXCELLENT|GOOD|FAIR|POOR",
              "system_improvement_score": "number (0-100)",
              "harmony_maintenance_quality": "number (0-100)"
            },
            "communication_to_origin": {
              "harmony_report_created": "boolean",
              "system_status_communicated": "boolean",
              "next_agent_recommendation": "string (origin_agent)"
            },
            "bonus_contributions": {
              "proactive_optimizations": "array of optimizations made",
              "architectural_insights": "array of insights provided",
              "system_health_improvements": "number",
              "documentation_enhancements": "array of enhancements",
              "contribution_value_score": "number (0-100)"
            },
            "harmony_insights_for_dashboard": {
              "insights_json_generated": "boolean",
              "insights_file_path": "string (docs/harmony_ecosystem_insights.json)",
              "ecosystem_analysis_complete": "boolean",
              "architectural_insights_documented": "boolean",
              "flow_dynamics_analyzed": "boolean",
              "recommendations_provided": "array of harmony recommendations"
            },
            "innovation_analysis": {
              "cost_efficiency_opportunities": "array of cost reduction recommendations with file paths and evidence",
              "performance_enhancement_recommendations": "array of performance improvements with implementation details",
              "business_value_maximization_strategies": "array of ROI-focused enhancements",
              "competitive_advantage_innovations": "array of breakthrough capability opportunities",
              "resource_optimization_analysis": "object with current vs optimized resource usage"
            },
            "actionable_tickets": {
              "generated_tickets": "array of specific implementation tickets",
              "ticket_format": "object with id, title, priority, file_paths, current_state, desired_state, implementation_approach, business_justification",
              "total_tickets_generated": "number",
              "priority_breakdown": "object with high/medium/low priority counts"
            },
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)",
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "analysis_summary": {
              "total_files_analyzed": "number",
              "coherence_issues_found": "number",
              "fake_demo_markers_total": "number",
              "pap_compliance_score": "string (percentage)"
            },
            "detailed_findings": "array of issue objects",
            "pap_layer_compliance": "object with layer breakdown"
          },
          "build_trace_id": "BUILD_20251009_032956_122c1117",
          "build_timestamp": "2025-10-09T03:29:56.387250",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.387300",
            "build_trace_id": "BUILD_20251009_032956_122c1117",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 30018,
        "last_modified": "2025-10-09T03:29:56.387628"
      },
      {
        "name": "Mama Bear",
        "id": "mama_bear",
        "file": "mama_bear.json",
        "franchise": "staff",
        "polymorphic_schema": {
          "schema_class": "GatePromoteAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Cross-agent validation",
            "Git operations",
            "Gate decision making",
            "Workflow completion"
          ]
        },
        "json_data": {
          "agent_id": "mama_bear",
          "agent_version": "1.0.0",
          "output_schema": {
            "assessment_id": "string (generated)",
            "timestamp": "string (ISO format)",
            "mama_bear_mode": "full_assessment|critical_only|security_focus|customer_protection",
            "current_directory": "string (pwd output)",
            "agent_analysis": {
              "agents_analyzed": "array of agent file paths",
              "agent_outputs_found": "array of cache files analyzed",
              "agents_missing": "array of missing agent files",
              "total_agents_in_system": "number"
            },
            "production_readiness_gates": {
              "gate_1_revenue_threats": {
                "status": "PASSED|FAILED",
                "issues_found": "number",
                "critical_issues": "array of issue descriptions"
              },
              "gate_2_customer_embarrassments": {
                "status": "PASSED|FAILED",
                "issues_found": "number",
                "embarrassing_issues": "array of issue descriptions"
              },
              "gate_3_pap_violations": {
                "status": "PASSED|FAILED",
                "issues_found": "number",
                "architecture_violations": "array of issue descriptions"
              },
              "gate_4_security_vulnerabilities": {
                "status": "PASSED|FAILED",
                "issues_found": "number",
                "security_risks": "array of issue descriptions"
              },
              "gate_5_test_contamination": {
                "status": "PASSED|FAILED",
                "issues_found": "number",
                "test_code_found": "array of contamination locations"
              }
            },
            "issue_categorization": {
              "critical_issues": {
                "count": "number",
                "categories": "array (revenue_threatening, test_contamination)",
                "blocking_production": "boolean",
                "details": "array of critical issue objects"
              },
              "high_issues": {
                "count": "number",
                "categories": "array (customer_embarrassing, security_risk)",
                "risky_for_production": "boolean",
                "details": "array of high issue objects"
              },
              "medium_issues": {
                "count": "number",
                "categories": "array (pap_violation, performance_issue)",
                "acceptable_for_production": "boolean",
                "details": "array of medium issue objects"
              },
              "low_issues": {
                "count": "number",
                "categories": "array (documentation_missing)",
                "ignorable_for_production": "boolean",
                "details": "array of low issue objects"
              }
            },
            "mama_bear_verdict": {
              "production_ready": "boolean",
              "confidence_level": "number (0-100)",
              "verdict_code": "APPROVED|RISKY|BLOCKED",
              "mama_bear_message": "string (worried mother assessment)",
              "recommendation_to_origin": "APPROVE_PRODUCTION|CAUTION_PRODUCTION|BLOCK_PRODUCTION",
              "fix_these_first": "array of must-fix issues before production"
            },
            "agent_performance_analysis": {
              "best_performing_agents": "array of agent_ids with scores",
              "agents_with_issues": "array of agent_ids with problems",
              "overall_agent_system_health": "EXCELLENT|GOOD|FAIR|POOR",
              "agent_coordination_effectiveness": "number (0-100)"
            },
            "workflow_id": "string (from context)",
            "agent_name": "mama_bear_agent",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "assessment_thoroughness": "number (0-100)",
              "issue_detection_accuracy": "number (0-100)",
              "production_safety_score": "number (0-100)"
            },
            "communication_to_origin": {
              "structured_message_created": "boolean",
              "communication_file_path": "string (.data/mama_bear_to_origin_communication.json)",
              "origin_agent_handoff": "boolean",
              "next_agent_recommendation": "string (origin_agent)"
            },
            "bonus_contributions": {
              "extra_security_scans_performed": "boolean",
              "proactive_issue_prevention": "array of preventive measures",
              "code_quality_improvements_suggested": "number",
              "architectural_insights_provided": "number",
              "customer_protection_enhancements": "array of protection measures",
              "contribution_value_score": "number (0-100)"
            },
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)",
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "cross_agent_validation": "object with validation results",
            "git_operations": {
              "commit_operations": "object",
              "staging_operations": "object"
            },
            "gate_promotion_decision": {
              "overall_validation_score": "string (percentage)",
              "gate_decision": "PASS|CONDITIONAL_PASS|FAIL",
              "workflow_completion_status": "COMPLETE|REPEAT_CYCLE"
            }
          },
          "build_trace_id": "BUILD_20251009_032956_6935cbef",
          "build_timestamp": "2025-10-09T03:29:56.388961",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.389008",
            "build_trace_id": "BUILD_20251009_032956_6935cbef",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 32944,
        "last_modified": "2025-10-09T03:29:56.389320"
      },
      {
        "name": "Oracle",
        "id": "oracle",
        "file": "1b_oracle_from_user_to_architect.json",
        "franchise": "staff",
        "polymorphic_schema": {
          "schema_class": "UserInputTranslatorAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Input processing",
            "Requirements extraction",
            "Translation accuracy",
            "Structured output generation"
          ]
        },
        "json_data": {
          "agent_id": "oracle",
          "agent_version": "2.0.0",
          "output_schema": {
            "workflow_id": "string (from previous agent or user input)",
            "agent_name": "requirements_analysis_agent",
            "source_agent_type": "oracle",
            "timestamp": "string (ISO_TIMESTAMP)",
            "client_directory": "CLIENT_DIR_ABSOLUTE",
            "workflow_specification": "string (path to workflow spec file)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "requirements_generated": "number",
              "complexity_score": "number (0-100)",
              "dependency_accuracy": "number (0-100)"
            },
            "client_codebase_analysis": {
              "llm_collector_run": "boolean",
              "total_files_analyzed": "number",
              "existing_components_identified": "array of components",
              "pap_layer_mapping": "object with layer breakdown",
              "integration_points": "array of integration opportunities"
            },
            "input_analysis": {
              "source_agent": "USER_INPUT",
              "cache_file": ".data/{workflow_id}_user_input_specifications.json",
              "user_requirements_received": "array of strings",
              "workflow_spec_processed": "string",
              "user_priorities_identified": "array of strings"
            },
            "requirements_summary": {
              "total_requirements": "number (max 30)",
              "total_subtasks": "number",
              "critical_count": "number (max 8)",
              "high_count": "number (max 10)",
              "medium_count": "number (max 8)",
              "low_count": "number (max 4)",
              "estimated_total_effort": "string",
              "total_effort_hours": "number",
              "files_affected_count": "number"
            },
            "implementation_phases": {
              "phase_1_critical": {
                "description": "Critical features for CLIENT_DIRECTORY implementation",
                "estimated_duration": "string",
                "total_requirements": "number (max 8)",
                "total_effort_hours": "number",
                "requirements": [
                  {
                    "req_id": "string (REQ-LAYER-###)",
                    "title": "string (specific to CLIENT_DIRECTORY)",
                    "description": "string (implementation in client codebase)",
                    "priority": "CRITICAL",
                    "effort_estimate": "string (X hours with breakdown)",
                    "source_issue_ids": "array (from workflow spec or user input)",
                    "affected_files": [
                      {
                        "path": "string (CLIENT_DIRECTORY file path)",
                        "lines_affected": "string (estimated ranges)",
                        "modification_type": "add|refactor|remove|replace",
                        "before_code_sample": "string (WARP-DEMO current client code)",
                        "after_code_sample": "string (WARP-DEMO expected implementation)"
                      }
                    ],
                    "dependencies": {
                      "requires": "array of req_ids",
                      "blocks": "array of req_ids",
                      "parallel_with": "array of req_ids"
                    },
                    "pap_layer": "data|web|api",
                    "components_affected": [
                      {
                        "component_name": "string (client component)",
                        "current_status": "MISSING|PARTIAL|FAKE|EXISTS",
                        "target_status": "REAL",
                        "modification_scope": "interface|implementation|configuration"
                      }
                    ],
                    "acceptance_criteria": "array of testable criteria",
                    "implementation_chunks": [
                      {
                        "chunk_id": "string",
                        "title": "string",
                        "description": "string",
                        "effort_hours": "number (max 12)",
                        "deliverable": "string"
                      }
                    ],
                    "testing_requirements": {
                      "unit_tests": "array of test names",
                      "integration_tests": "array of test names",
                      "validation_tests": "array of test names"
                    },
                    "configuration_changes": [
                      {
                        "file": "string (CLIENT_DIRECTORY config file)",
                        "section": "string",
                        "changes": "string"
                      }
                    ],
                    "fake_components_to_replace": [
                      {
                        "current_fake": "string (WARP-DEMO placeholder)",
                        "replacement": "string (workflow spec implementation)",
                        "location": "string (CLIENT_DIRECTORY file:lines)"
                      }
                    ],
                    "implementation_ticket": {
                      "title": "string (clear, actionable ticket title)",
                      "description": "string (detailed implementation description)",
                      "acceptance_criteria": "array of strings (testable criteria)",
                      "files_to_create": "array of strings (new file paths in CLIENT_DIRECTORY)",
                      "files_to_modify": "array of strings (existing file paths to modify)",
                      "starting_point_tips": [
                        "string (tip referencing existing CLIENT_DIRECTORY components)",
                        "string (tip about integration patterns)",
                        "string (tip about WARP-DEMO watermark locations)",
                        "string (tip about testing approach)"
                      ],
                      "implementation_steps": [
                        "string (step 1: setup/preparation)",
                        "string (step 2: core implementation)",
                        "string (step 3: integration)",
                        "string (step 4: testing)",
                        "string (step 5: validation)"
                      ],
                      "testing_requirements": [
                        "string (unit test specification)",
                        "string (integration test specification)",
                        "string (e2e test specification with WARP-DEMO data)",
                        "string (background task testing approach)"
                      ],
                      "estimated_hours": "string (from effort_estimate)",
                      "depends_on": "array of req_ids (dependencies)",
                      "watermark_locations": [
                        "string (specific file:location for WARP-DEMO watermarks)",
                        "string (test data watermark locations)",
                        "string (UI component watermark locations)"
                      ],
                      "codebase_integration_points": [
                        "string (existing component to extend/integrate)",
                        "string (configuration file to update)",
                        "string (database schema to modify)"
                      ]
                    }
                  }
                ]
              },
              "phase_2_high": {
                "description": "string",
                "estimated_duration": "string",
                "total_requirements": "number (max 10)",
                "requirements": "array (same detailed structure as phase_1)"
              },
              "phase_3_medium": {
                "description": "string",
                "estimated_duration": "string",
                "total_requirements": "number (max 8)",
                "requirements": "array (same detailed structure as phase_1)"
              },
              "phase_4_low": {
                "description": "string",
                "estimated_duration": "string",
                "total_requirements": "number (max 4)",
                "requirements": "array (same detailed structure as phase_1)"
              }
            },
            "dependency_graph": {
              "description": "Implementation dependency mapping for CLIENT_DIRECTORY",
              "total_dependencies": "number",
              "critical_path_requirements": "array of req_ids",
              "dependencies": {
                "REQ_ID": {
                  "depends_on": "array of req_ids",
                  "blocks": "array of req_ids",
                  "parallel_with": "array of req_ids",
                  "critical_path": "boolean",
                  "estimated_delay_if_blocked": "string"
                }
              }
            },
            "implementation_timeline": {
              "total_duration": "string",
              "weekly_breakdown": [
                {
                  "week": "number",
                  "focus_area": "string (CLIENT_DIRECTORY area)",
                  "requirements_to_complete": "array of req_ids",
                  "estimated_hours": "number",
                  "key_deliverables": "array of strings",
                  "risk_factors": "array of strings"
                }
              ],
              "resource_allocation": {
                "senior_developer_hours": "number",
                "mid_developer_hours": "number",
                "qa_testing_hours": "number",
                "devops_hours": "number"
              }
            },
            "validation_metrics": {
              "coverage_percentage": "100%",
              "requirements_with_file_paths": "number",
              "requirements_with_line_numbers": "number",
              "requirements_with_code_samples": "number",
              "client_integration_points": "number",
              "critical_path_duration": "string"
            },
            "next_agent": "architect",
            "next_agent_input": {
              "workflow_id": "string (from user input)",
              "total_requirements": "number",
              "critical_requirements": "array of req_ids",
              "cache_file": ".data/{workflow_id}_requirements_analysis.json",
              "validation_focus": [
                "CLIENT_DIRECTORY implementation feasibility",
                "Workflow spec to client code mapping accuracy",
                "Existing component integration validation",
                "PAP compliance for WARPCORE integration",
                "Implementation effort and timeline realism"
              ],
              "source_type": "user_input"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)",
            "translation_summary": {
              "raw_input_processed": "boolean",
              "structured_requirements_generated": "number",
              "translation_confidence": "number (0-100)",
              "input_complexity_score": "number (0-100)"
            },
            "translation_results": {
              "processed_input": "string",
              "extracted_requirements": "array of requirement objects",
              "validation_status": "VALID|NEEDS_REVIEW|INVALID"
            }
          },
          "build_trace_id": "BUILD_20251009_032956_e6b6b4a5",
          "build_timestamp": "2025-10-09T03:29:56.384768",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.384817",
            "build_trace_id": "BUILD_20251009_032956_e6b6b4a5",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 26617,
        "last_modified": "2025-10-09T03:29:56.385185"
      },
      {
        "name": "Origin",
        "id": "origin",
        "file": "0a_origin_from_none_to_boss.json",
        "franchise": "staff",
        "polymorphic_schema": {
          "schema_class": "BootstrapAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "System health validation",
            "Agent discovery results",
            "Bootstrap configuration",
            "Orchestrator preparation"
          ]
        },
        "json_data": {
          "agent_id": "origin",
          "agent_version": "1.0.0",
          "output_schema": {
            "bootstrap_id": "string (generated)",
            "timestamp": "string (ISO format)",
            "bootstrap_mode": "fresh_start|full_steam_continue|emergency_restart|health_check",
            "current_directory": "string (pwd output)",
            "system_health": {
              "warpcore_directory_valid": "boolean",
              "all_agents_discovered": "boolean",
              "agent_file_paths": {
                "bootstrap_agent": "string",
                "orchestrator_agent": "string",
                "schema_reconciler": "string",
                "requirements_generator": "string",
                "requirements_validator": "string",
                "implementation_agent": "string",
                "gate_promote_agent": "string"
              },
              "llm_collector_available": "boolean",
              "llm_collector_path": "string",
              "git_repository_valid": "boolean",
              "tmp_directory_writable": "boolean",
              "overall_health_status": "HEALTHY|DEGRADED|CRITICAL"
            },
            "workflow_discovery": {
              "existing_workflows_found": "number",
              "workflow_states": "array of workflow state objects",
              "latest_workflow_id": "string",
              "recommended_action": "string"
            },
            "agent_0_launch": {
              "orchestrator_config_loaded": "boolean",
              "orchestrator_prompt_extracted": "boolean",
              "bootstrap_input_prepared": "boolean",
              "agent_0_execution_success": "boolean",
              "agent_0_output_received": "boolean"
            },
            "bootstrap_execution": {
              "mode_executed": "string",
              "execution_success": "boolean",
              "workflow_id_generated": "string",
              "next_agent_called": "string (orchestrator_agent)",
              "full_steam_activated": "boolean"
            },
            "next_agent_handoff": {
              "target_agent": "workflow_orchestrator_agent",
              "handoff_data": "object with orchestrator input",
              "cache_file_created": "string",
              "bootstrap_complete": "boolean"
            },
            "workflow_id": "string (from context)",
            "agent_name": "bootstrap_agent",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "bootstrap_success_rate": "number (0-100)",
              "agent_discovery_accuracy": "number (0-100)",
              "system_readiness_score": "number (0-100)"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)"
          },
          "build_trace_id": "BUILD_20251009_032956_5f838604",
          "build_timestamp": "2025-10-09T03:29:56.384041",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.384094",
            "build_trace_id": "BUILD_20251009_032956_5f838604",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 28089,
        "last_modified": "2025-10-09T03:29:56.384367"
      },
      {
        "name": "Pathfinder",
        "id": "pathfinder",
        "file": "1a_pathfinder_from_boss_to_architect.json",
        "franchise": "staff",
        "polymorphic_schema": {
          "schema_class": "SchemaReconcilerAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "File analysis summary",
            "Coherence issue detection",
            "PAP compliance scoring",
            "Detailed findings reporting"
          ]
        },
        "json_data": {
          "agent_id": "pathfinder",
          "agent_version": "1.0.0",
          "output_schema": {
            "workflow_id": "string (wf_generated_uuid)",
            "agent_name": "schema_coherence_reconciler_agent",
            "timestamp": "string (ISO_TIMESTAMP)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "issues_identified": "number",
              "files_analyzed": "number",
              "compliance_score": "number (0-100)"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "analysis_summary": {
              "total_files_analyzed": "number",
              "total_lines": "number",
              "pap_compliance_score": "string (percentage)",
              "coherence_issues_found": "number",
              "fake_demo_markers_total": "number",
              "architectural_violations_total": "number"
            },
            "detailed_file_analysis": {
              "by_pap_layer": {
                "data_layer_files": "array of {file_path, status, issues_count, fake_markers_count}",
                "web_layer_files": "array of {file_path, status, issues_count, fake_markers_count}",
                "api_layer_files": "array of {file_path, status, issues_count, fake_markers_count}",
                "other_files": "array of {file_path, status, issues_count, fake_markers_count}"
              },
              "by_component_status": {
                "real_components": "array of {component_name, file_path, evidence, compliance_score}",
                "fake_demo_components": "array of {component_name, file_path, fake_patterns_found, line_numbers}",
                "partial_components": "array of {component_name, file_path, missing_functionality, completion_estimate}",
                "missing_components": "array of {component_name, expected_location, referenced_in, priority}"
              }
            },
            "layer_analysis": {
              "data_layer": {
                "total_files": "number",
                "real_components": "array of {name, file_path, classes, methods, compliance_notes}",
                "fake_components": "array of {name, file_path, fake_patterns, line_numbers, severity}",
                "missing_components": "array of {name, expected_path, referenced_in, impact}",
                "coherence_gaps": "array of {gap_description, files_affected, pap_rule_violated, fix_recommendation}",
                "compliance_score": "string (percentage with justification)"
              },
              "web_layer": {
                "total_files": "number",
                "real_components": "array of {name, file_path, classes, methods, compliance_notes}",
                "fake_components": "array of {name, file_path, fake_patterns, line_numbers, severity}",
                "missing_components": "array of {name, expected_path, referenced_in, impact}",
                "coherence_gaps": "array of {gap_description, files_affected, pap_rule_violated, fix_recommendation}",
                "compliance_score": "string (percentage with justification)"
              },
              "api_layer": {
                "total_files": "number",
                "real_components": "array of {name, file_path, classes, methods, compliance_notes}",
                "fake_components": "array of {name, file_path, fake_patterns, line_numbers, severity}",
                "missing_components": "array of {name, expected_path, referenced_in, impact}",
                "coherence_gaps": "array of {gap_description, files_affected, pap_rule_violated, fix_recommendation}",
                "compliance_score": "string (percentage with justification)"
              }
            },
            "schema_coherence_issues": [
              {
                "issue_id": "string",
                "type": "naming_inconsistency|interface_mismatch|architectural_violation|missing_component|fake_contamination",
                "location": "string (exact file path)",
                "line_numbers": "array of numbers",
                "description": "string (detailed description)",
                "current_state": "string (what exists now)",
                "expected_state": "string (what should exist)",
                "pap_rule_violated": "string (which PAP rule is broken)",
                "fix_recommendation": "string (specific actionable fix)",
                "estimated_effort": "string (hours/days)",
                "dependencies": "array of strings (other issues that must be fixed first)",
                "severity": "CRITICAL|HIGH|MEDIUM|LOW",
                "impact": "string (consequences of not fixing)"
              }
            ],
            "fake_demo_analysis": {
              "total_warp_markers": "number",
              "total_demo_markers": "number",
              "total_fake_markers": "number",
              "detailed_findings": [
                {
                  "file_path": "string",
                  "marker_type": "WARP|DEMO|FAKE",
                  "line_number": "number",
                  "content": "string (actual marker text)",
                  "context": "string (surrounding code context)",
                  "replacement_recommendation": "string"
                }
              ],
              "security_concerns": "array of {concern, file_path, line_number, risk_level}",
              "cleanup_priority": "array of strings (ordered by priority)"
            },
            "architectural_compliance": {
              "pap_flow_compliance": {
                "route_layer": "percentage with violations listed",
                "controller_layer": "percentage with violations listed",
                "orchestrator_layer": "percentage with violations listed",
                "provider_layer": "percentage with violations listed",
                "middleware_layer": "percentage with violations listed",
                "executor_layer": "percentage with violations listed"
              },
              "interface_consistency": "array of {interface_name, files_implementing, consistency_issues}",
              "naming_coherence": "array of {expected_name, actual_name, file_path, fix_needed}",
              "dependency_flow_violations": "array of {violation_description, files_involved, fix_recommendation}"
            },
            "cross_reference_validation": {
              "consistency_check_passed": "boolean",
              "validation_errors": "array of strings (if any inconsistencies found)",
              "data_integrity_score": "string (percentage)"
            },
            "next_agent": "architect",
            "next_agent_input": {
              "workflow_id": "string",
              "total_issues_found": "number",
              "critical_issues_count": "number",
              "priority_gaps": "array of strings (ordered by severity and impact)",
              "cache_file": "string",
              "focus_areas": "array of strings (areas requiring immediate attention)"
            },
            "detailed_findings": "array of issue objects",
            "pap_layer_compliance": "object with layer breakdown",
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)"
          },
          "build_trace_id": "BUILD_20251009_032956_7170307d",
          "build_timestamp": "2025-10-09T03:29:56.390331",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.390374",
            "build_trace_id": "BUILD_20251009_032956_7170307d",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 29575,
        "last_modified": "2025-10-09T03:29:56.391545"
      }
    ],
    "patrol": [
      {
        "name": "Architect",
        "id": "architect",
        "file": "2_architect_from_pathfinder_oracle_to_enforcer.json",
        "franchise": "patrol",
        "polymorphic_schema": {
          "schema_class": "RequirementsGeneratorAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Requirements enumeration",
            "Priority classification",
            "Implementation phases",
            "Dependency mapping"
          ]
        },
        "json_data": {
          "agent_id": "architect",
          "agent_version": "2.0.0",
          "output_schema": {
            "workflow_id": "string (FROM_SMART_INPUT_DISCOVERY)",
            "agent_name": "requirements_analysis_agent",
            "source_agent_type": "schema_based_requirements_generator",
            "timestamp": "string (ISO_TIMESTAMP)",
            "client_directory": "CLIENT_DIR_ABSOLUTE",
            "workflow_specification": "string (path to workflow spec file)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "requirements_generated": "number",
              "complexity_score": "number (0-100)",
              "dependency_accuracy": "number (0-100)"
            },
            "client_codebase_analysis": {
              "llm_collector_run": "boolean",
              "total_files_analyzed": "number",
              "existing_components_identified": "array of components",
              "pap_layer_mapping": "object with layer breakdown",
              "integration_points": "array of integration opportunities"
            },
            "input_analysis": {
              "source_agent": "pathfinder",
              "cache_file": ".data/{workflow_id}_{trace_id}_previous_agent_output.json",
              "user_requirements_received": "array of strings (from schema gaps)",
              "workflow_spec_processed": "string",
              "user_priorities_identified": "array of strings (from schema analysis)"
            },
            "requirements_summary": {
              "total_requirements": "number (max 30)",
              "total_subtasks": "number",
              "critical_count": "number (max 8)",
              "high_count": "number (max 10)",
              "medium_count": "number (max 8)",
              "low_count": "number (max 4)",
              "estimated_total_effort": "string",
              "total_effort_hours": "number",
              "files_affected_count": "number"
            },
            "implementation_phases": {
              "phase_1_critical": {
                "description": "Critical features for CLIENT_DIRECTORY implementation",
                "estimated_duration": "string",
                "total_requirements": "number (max 8)",
                "total_effort_hours": "number",
                "requirements": [
                  {
                    "req_id": "string (REQ-LAYER-###)",
                    "title": "string (specific to CLIENT_DIRECTORY)",
                    "description": "string (implementation in client codebase)",
                    "priority": "CRITICAL",
                    "effort_estimate": "string (X hours with breakdown)",
                    "source_issue_ids": "array (from schema coherence issues)",
                    "affected_files": [
                      {
                        "path": "string (CLIENT_DIRECTORY file path)",
                        "lines_affected": "string (estimated ranges)",
                        "modification_type": "add|refactor|remove|replace",
                        "before_code_sample": "string (WARP-DEMO current client code)",
                        "after_code_sample": "string (WARP-DEMO expected implementation)"
                      }
                    ],
                    "dependencies": {
                      "requires": "array of req_ids",
                      "blocks": "array of req_ids",
                      "parallel_with": "array of req_ids"
                    },
                    "pap_layer": "data|web|api",
                    "components_affected": [
                      {
                        "component_name": "string (client component)",
                        "current_status": "MISSING|PARTIAL|FAKE|EXISTS",
                        "target_status": "REAL",
                        "modification_scope": "interface|implementation|configuration"
                      }
                    ],
                    "acceptance_criteria": "array of testable criteria",
                    "implementation_chunks": [
                      {
                        "chunk_id": "string",
                        "title": "string",
                        "description": "string",
                        "effort_hours": "number (max 12)",
                        "deliverable": "string"
                      }
                    ],
                    "testing_requirements": {
                      "unit_tests": "array of test names",
                      "integration_tests": "array of test names",
                      "validation_tests": "array of test names"
                    },
                    "configuration_changes": [
                      {
                        "file": "string (CLIENT_DIRECTORY config file)",
                        "section": "string",
                        "changes": "string"
                      }
                    ],
                    "fake_components_to_replace": [
                      {
                        "current_fake": "string (WARP-DEMO placeholder)",
                        "replacement": "string (workflow spec implementation)",
                        "location": "string (CLIENT_DIRECTORY file:lines)"
                      }
                    ]
                  }
                ]
              },
              "phase_2_high": {
                "description": "string",
                "estimated_duration": "string",
                "total_requirements": "number (max 10)",
                "requirements": "array (same detailed structure as phase_1)"
              },
              "phase_3_medium": {
                "description": "string",
                "estimated_duration": "string",
                "total_requirements": "number (max 8)",
                "requirements": "array (same detailed structure as phase_1)"
              },
              "phase_4_low": {
                "description": "string",
                "estimated_duration": "string",
                "total_requirements": "number (max 4)",
                "requirements": "array (same detailed structure as phase_1)"
              }
            },
            "dependency_graph": {
              "description": "Implementation dependency mapping for CLIENT_DIRECTORY",
              "total_dependencies": "number",
              "critical_path_requirements": "array of req_ids",
              "dependencies": {
                "REQ_ID": {
                  "depends_on": "array of req_ids",
                  "blocks": "array of req_ids",
                  "parallel_with": "array of req_ids",
                  "critical_path": "boolean",
                  "estimated_delay_if_blocked": "string"
                }
              }
            },
            "implementation_timeline": {
              "total_duration": "string",
              "weekly_breakdown": [
                {
                  "week": "number",
                  "focus_area": "string (CLIENT_DIRECTORY area)",
                  "requirements_to_complete": "array of req_ids",
                  "estimated_hours": "number",
                  "key_deliverables": "array of strings",
                  "risk_factors": "array of strings"
                }
              ],
              "resource_allocation": {
                "senior_developer_hours": "number",
                "mid_developer_hours": "number",
                "qa_testing_hours": "number",
                "devops_hours": "number"
              }
            },
            "validation_metrics": {
              "coverage_percentage": "100%",
              "requirements_with_file_paths": "number",
              "requirements_with_line_numbers": "number",
              "requirements_with_code_samples": "number",
              "client_integration_points": "number",
              "critical_path_duration": "string"
            },
            "next_agent": "enforcer",
            "next_agent_input": {
              "workflow_id": "string (FROM_SMART_INPUT_DISCOVERY)",
              "total_requirements": "number",
              "critical_requirements": "array of req_ids",
              "cache_file": ".data/{workflow_id}_{trace_id}_previous_agent_output.json",
              "validation_focus": [
                "CLIENT_DIRECTORY implementation feasibility",
                "Schema gap coverage and accuracy",
                "Existing component integration validation",
                "PAP compliance for WARPCORE integration",
                "Implementation effort and timeline realism"
              ],
              "source_type": "schema_analysis"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "agent_id": "string (agent identifier)",
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)"
          },
          "build_trace_id": "BUILD_20251009_032956_39583f61",
          "build_timestamp": "2025-10-09T03:29:56.395018",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.395058",
            "build_trace_id": "BUILD_20251009_032956_39583f61",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 25079,
        "last_modified": "2025-10-09T03:29:56.395424"
      },
      {
        "name": "Boss",
        "id": "boss",
        "file": "0b_boss_from_origin_to_pathfinder.json",
        "franchise": "patrol",
        "polymorphic_schema": {
          "schema_class": "OrchestratorAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Agent sequencing",
            "Workflow coordination",
            "Agent lifecycle management",
            "Orchestration success tracking"
          ]
        },
        "json_data": {
          "agent_id": "boss",
          "agent_version": "1.0.0",
          "output_schema": {
            "orchestration_id": "string (generated)",
            "workflow_id": "string (wf_* format)",
            "orchestration_type": "start_fresh|restart|continue",
            "timestamp": "string (ISO format)",
            "current_directory": "string (pwd output)",
            "agent_file_validation": {
              "all_agents_found": "boolean",
              "agent_files": {
                "schema_reconciler": ".workflows/warp/dev/gap_analysis_agent_1_schema_reconciler.json",
                "requirements_generator": ".workflows/warp/dev/gap_analysis_agent_2_requirements_generator.json",
                "requirements_validator": ".workflows/warp/dev/gap_analysis_agent_3_requirements_validator.json",
                "implementor": ".workflows/warp/dev/gap_analysis_agent_4_implementor.json",
                "gate_promote": ".workflows/warp/dev/gap_analysis_agent_5_gate_promote.json"
              },
              "missing_agents": "array of missing agent file paths"
            },
            "execution_plan": {
              "total_agents": "number (5)",
              "start_agent": "number (1-5)",
              "end_agent": "number (5)",
              "estimated_duration": "string",
              "cache_strategy": "string"
            },
            "agent_execution_sequence": "array of agent execution objects",
            "workflow_state": {
              "current_agent": "number",
              "completion_percentage": "string",
              "estimated_remaining_time": "string",
              "last_successful_agent": "number",
              "failed_agents": "array"
            },
            "cache_management": {
              "workflow_cache_dir": "string (.data/)",
              "cache_files_created": "array of strings",
              "cache_files_preserved": "array of strings",
              "cache_cleanup_needed": "boolean"
            },
            "next_steps": {
              "continue_to_agent": "number",
              "manual_intervention_required": "boolean",
              "restart_recommendations": "array of strings",
              "completion_criteria": "string"
            },
            "agent_name": "workflow_orchestrator_agent",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "orchestration_success_rate": "number (0-100)",
              "agent_coordination_accuracy": "number (0-100)",
              "workflow_completion_rate": "number (0-100)"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "orchestration_results": {
              "agents_sequenced": "number",
              "agents_launched": "array of agent_ids",
              "agents_completed": "array of agent_ids",
              "workflow_status": "IN_PROGRESS|COMPLETED|FAILED"
            },
            "agent_coordination": {
              "current_active_agent": "string",
              "pending_agents": "array of agent_ids",
              "failed_agents": "array of agent_ids"
            },
            "next_agent_handoff": {
              "target_agent": "pathfinder|oracle",
              "handoff_data": "object with orchestration data",
              "cache_file_created": "string",
              "routing_complete": "boolean",
              "routing_decision": "string (pathfinder for gap analysis, oracle for user input)"
            },
            "agent_id": "string (agent identifier)",
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)"
          },
          "build_trace_id": "BUILD_20251009_032956_f6f47d8e",
          "build_timestamp": "2025-10-09T03:29:56.393124",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.393169",
            "build_trace_id": "BUILD_20251009_032956_f6f47d8e",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 30021,
        "last_modified": "2025-10-09T03:29:56.393465"
      },
      {
        "name": "Cipher",
        "id": "cipher",
        "file": "8_cipher_from_deep_to_glitch.json",
        "franchise": "patrol",
        "polymorphic_schema": {
          "schema_class": "RequirementsValidatorAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Requirements validation",
            "PAP compliance checking",
            "Feasibility assessment",
            "Implementation readiness"
          ]
        },
        "json_data": {
          "agent_id": "cipher",
          "agent_version": "1.0.0",
          "output_schema": {
            "cipher_attacks_id": "string (generated)",
            "timestamp": "string (ISO format)",
            "vulnerability_scan_results": {
              "nuclei_findings": "array",
              "nmap_nse_vulns": "array",
              "service_cves": "array",
              "misconfiguration_findings": "array"
            },
            "layer1_attack_results": {
              "ssh_brute_force": "object",
              "ftp_attacks": "object",
              "http_admin_testing": "object",
              "database_default_creds": "object",
              "snmp_community_strings": "object",
              "telnet_attacks": "object"
            },
            "discovery_expansion": {
              "hidden_directories": "array",
              "backup_files_found": "array",
              "new_endpoints": "array",
              "parameter_fuzzing_results": "array"
            },
            "successful_compromises": {
              "confirmed_access": "array",
              "default_credentials": "array",
              "known_exploits": "array",
              "weak_services": "array"
            },
            "workflow_id": "string (from context)",
            "agent_id": "string (agent identifier)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)",
            "agent_name": "cipher",
            "validation_summary": {
              "requirements_validated": "number",
              "pap_compliant": "number",
              "feasible": "number",
              "implementation_ready": "number",
              "overall_status": "PASS|NEEDS_REVISION|FAIL"
            },
            "validated_requirements": {
              "approved_for_implementation": "array of requirement objects",
              "requires_revision": "array of requirement objects",
              "rejected": "array of requirement objects"
            }
          },
          "build_trace_id": "BUILD_20251009_032956_d3bb7065",
          "build_timestamp": "2025-10-09T03:29:56.398227",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.398265",
            "build_trace_id": "BUILD_20251009_032956_d3bb7065",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 15513,
        "last_modified": "2025-10-09T03:29:56.398500"
      },
      {
        "name": "Craftbuddy",
        "id": "craftbuddy",
        "file": "4b_craftbuddy_from_craftsman_to_craftsman.json",
        "franchise": "patrol",
        "polymorphic_schema": {
          "schema_class": "RequirementsGeneratorAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Requirements enumeration",
            "Priority classification",
            "Implementation phases",
            "Dependency mapping"
          ]
        },
        "json_data": {
          "agent_id": "craftbuddy",
          "agent_version": "1.1.0",
          "output_schema": {
            "workflow_id": "string (from craftsman results)",
            "agent_name": "craftbuddy",
            "timestamp": "string (ISO_TIMESTAMP)",
            "decision": "generate_requirements|pass_to_gatekeeper|send_to_enforcer",
            "creative_assessment": "string (summary of opportunities found or readiness)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "creative_opportunities_found": "number",
              "enhancement_value_score": "number (0-100)",
              "decision_confidence": "number (0-100)"
            },
            "input_analysis": {
              "source_agent": "craftsman",
              "cache_file": ".data/{workflow_id}_craftsman_results.json",
              "requirements_implemented": "number",
              "files_modified": "number",
              "implementation_quality": "string"
            },
            "decision_rationale": {
              "primary_reason": "string",
              "supporting_factors": "array of strings",
              "risk_assessment": "LOW|MEDIUM|HIGH",
              "effort_vs_value_analysis": "string"
            },
            "requirements_generated": {
              "total_requirements": "number (if generate_requirements)",
              "critical_count": "number",
              "high_count": "number",
              "medium_count": "number",
              "low_count": "number",
              "estimated_total_effort": "string",
              "bonus_value_summary": "string",
              "implementation_phases": {
                "phase_1_critical": {
                  "description": "string",
                  "requirements": [
                    {
                      "req_id": "string (BONUS-XXX)",
                      "title": "string",
                      "description": "string",
                      "priority": "CRITICAL|HIGH|MEDIUM|LOW",
                      "effort_estimate": "string (X hours)",
                      "bonus_value": "string (why worth doing)",
                      "affected_files": [
                        {
                          "path": "string",
                          "modification_type": "add|refactor|remove|replace",
                          "before_code_sample": "string",
                          "after_code_sample": "string"
                        }
                      ],
                      "acceptance_criteria": "array of testable criteria"
                    }
                  ]
                }
              }
            },
            "gatekeeper_validation": {
              "implementation_complete": "boolean (if pass_to_gatekeeper)",
              "code_quality_acceptable": "boolean",
              "no_critical_issues": "boolean",
              "ready_for_promotion": "boolean",
              "promotion_confidence": "number (0-100)",
              "validation_summary": "string",
              "files_ready_for_commit": "array of file paths",
              "git_preparation_status": "READY|NEEDS_WORK"
            },
            "next_agent_handoff": {
              "target_agent": "enforcer|gatekeeper",
              "handoff_data": "object with appropriate schema data",
              "cache_file_created": "string",
              "routing_complete": "boolean"
            },
            "creative_enhancements": [
              {
                "enhancement_id": "string",
                "title": "string",
                "description": "string",
                "category": "quick_win|bonus_feature|performance|security|ux",
                "effort_estimate": "string",
                "value_score": "number (0-100)",
                "implementation_priority": "HIGH|MEDIUM|LOW"
              }
            ],
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "testing_asset_validation": {
              "existing_tests_executed": "boolean",
              "existing_tests_passed": "number",
              "existing_tests_failed": "number",
              "new_playwright_tests_created": "number",
              "api_endpoints_validated": "array of endpoint paths",
              "asset_cache_organized": "boolean",
              "cache_directory_path": "string (.data/assets/wf/{workflow_id}/{agent}/{trace_id}/)",
              "test_artifacts_preserved": {
                "existing_test_copies": "array of file paths",
                "playwright_tests": "array of file paths",
                "api_validation_scripts": "array of file paths",
                "test_results": "array of file paths",
                "benchmark_data": "array of file paths"
              },
              "validation_summary": {
                "all_tests_passing": "boolean",
                "no_code_changes_made": "boolean",
                "comprehensive_coverage_achieved": "boolean",
                "assets_properly_cached": "boolean",
                "cleanup_completed": "boolean"
              },
              "background_execution_logs": "array of tmp log file paths"
            },
            "agent_id": "string (agent identifier)",
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)",
            "requirements_summary": {
              "total_requirements": "number (max 30)",
              "critical_count": "number",
              "high_count": "number",
              "medium_count": "number",
              "low_count": "number"
            },
            "implementation_phases": "object with phase breakdown",
            "dependency_graph": "object with dependency mapping"
          },
          "build_trace_id": "BUILD_20251009_032956_66103923",
          "build_timestamp": "2025-10-09T03:29:56.401414",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.401456",
            "build_trace_id": "BUILD_20251009_032956_66103923",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 24153,
        "last_modified": "2025-10-09T03:29:56.401755"
      },
      {
        "name": "Craftsman Implementation",
        "id": "craftsman_implementation",
        "file": "4a_craftsman_from_enforcer_to_craftbuddy_gatekeeper.json",
        "franchise": "patrol",
        "polymorphic_schema": {
          "schema_class": "ImplementationAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Code implementation",
            "Test execution",
            "File modifications",
            "Git preparation"
          ]
        },
        "json_data": {
          "agent_id": "craftsman_implementation",
          "agent_version": "1.1.0",
          "output_schema": {
            "workflow_id": "string (FROM_SMART_INPUT_DISCOVERY)",
            "agent_name": "implementation_agent",
            "timestamp": "string (ISO_TIMESTAMP)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "requirements_implemented": "number",
              "implementation_success_rate": "number (0-100)",
              "code_quality_score": "number (0-100)"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "input_analysis": {
              "source_agent": "enforcer",
              "cache_file": ".data/{workflow_id}_{trace_id}_previous_agent_output.json",
              "approved_requirements_count": "number",
              "total_requirements_processed": "number",
              "implementation_scope": "string"
            },
            "implementation_summary": {
              "requirements_implemented": "number",
              "requirements_failed": "number",
              "files_modified": "number",
              "lines_changed": "number",
              "tests_executed": "number",
              "tests_passed": "number",
              "tests_failed": "number",
              "acceptance_criteria_met": "number",
              "acceptance_criteria_failed": "number",
              "total_implementation_time": "string"
            },
            "implementation_phases": {
              "phase_1_critical": {
                "description": "AWS removal and critical fixes",
                "requirements_implemented": "array of req_ids",
                "files_modified": "array of file paths",
                "implementation_status": "COMPLETE|PARTIAL|FAILED",
                "issues_encountered": "array of strings"
              },
              "phase_2_high": {
                "description": "Fake code replacement and PAP compliance",
                "requirements_implemented": "array of req_ids",
                "files_modified": "array of file paths",
                "implementation_status": "COMPLETE|PARTIAL|FAILED",
                "issues_encountered": "array of strings"
              },
              "phase_3_medium": {
                "description": "Schema consistency and interface standardization",
                "requirements_implemented": "array of req_ids",
                "files_modified": "array of file paths",
                "implementation_status": "COMPLETE|PARTIAL|FAILED",
                "issues_encountered": "array of strings"
              },
              "phase_4_low": {
                "description": "Documentation and optimization",
                "requirements_implemented": "array of req_ids",
                "files_modified": "array of file paths",
                "implementation_status": "COMPLETE|PARTIAL|FAILED",
                "issues_encountered": "array of strings"
              }
            },
            "detailed_implementation_results": [
              {
                "req_id": "string",
                "title": "string",
                "implementation_status": "COMPLETE|PARTIAL|FAILED",
                "files_modified": [
                  {
                    "path": "string",
                    "lines_affected": "string",
                    "before_content": "string",
                    "after_content": "string",
                    "modification_success": "boolean",
                    "issues": "array of strings"
                  }
                ],
                "configuration_changes": [
                  {
                    "file": "string",
                    "section": "string",
                    "changes_applied": "string",
                    "success": "boolean"
                  }
                ],
                "fake_components_replaced": [
                  {
                    "component_name": "string",
                    "location": "string",
                    "replacement_status": "COMPLETE|PARTIAL|FAILED",
                    "validation_result": "boolean"
                  }
                ],
                "implementation_chunks": [
                  {
                    "chunk_id": "string",
                    "title": "string",
                    "deliverable": "string",
                    "completion_status": "COMPLETE|PARTIAL|FAILED",
                    "actual_effort_hours": "number",
                    "issues": "array of strings"
                  }
                ],
                "testing_results": {
                  "unit_tests": [
                    {
                      "test_name": "string",
                      "status": "PASS|FAIL|SKIP",
                      "execution_time": "string",
                      "error_message": "string"
                    }
                  ],
                  "integration_tests": [
                    {
                      "test_name": "string",
                      "status": "PASS|FAIL|SKIP",
                      "execution_time": "string",
                      "error_message": "string"
                    }
                  ],
                  "validation_tests": [
                    {
                      "test_name": "string",
                      "status": "PASS|FAIL|SKIP",
                      "execution_time": "string",
                      "error_message": "string"
                    }
                  ]
                },
                "acceptance_criteria_results": [
                  {
                    "criterion": "string",
                    "validation_result": "boolean",
                    "validation_details": "string"
                  }
                ]
              }
            ],
            "llm_collector_comparison": {
              "before_implementation": {
                "total_files": "number",
                "total_lines": "number",
                "fake_markers_count": "number",
                "aws_references_count": "number"
              },
              "after_implementation": {
                "total_files": "number",
                "total_lines": "number",
                "fake_markers_count": "number",
                "aws_references_count": "number"
              },
              "changes_detected": {
                "files_added": "array of strings",
                "files_modified": "array of strings",
                "files_deleted": "array of strings",
                "fake_markers_removed": "number",
                "aws_references_removed": "number",
                "lines_added": "number",
                "lines_removed": "number",
                "lines_modified": "number"
              }
            },
            "git_preparation": {
              "working_directory_clean_before": "boolean",
              "files_staged_for_commit": "array of strings",
              "commit_message_prepared": "string",
              "ready_for_gate_promotion": "boolean"
            },
            "workflow_analytics": {
              "workflow_status": "IN_PROGRESS|COMPLETED|FAILED",
              "completion_percentage": "number (0-100)",
              "sequences_completed": "number",
              "total_estimated_sequences": "number (5)",
              "current_phase": "CRITICAL|HIGH|MEDIUM|LOW",
              "agent_performance": "object with per-agent metrics"
            },
            "progress_metrics": {
              "pap_compliance_score": "number (0-100)",
              "coherence_issues_identified": "number",
              "total_effort_hours_estimated": "string",
              "requirements_generated": "number",
              "requirements_validated": "number"
            },
            "visualization_dashboard_data": {
              "workflow_progress_chart": {
                "labels": "array of agent names",
                "completion_data": "array of percentages",
                "time_data": "array of durations"
              },
              "agent_performance_radar": {
                "agents": "array of agent names",
                "metrics": "array of performance scores"
              },
              "issue_resolution_funnel": {
                "identified": "number",
                "analyzed": "number",
                "resolved": "number"
              },
              "workflow_health_metrics": {
                "overall_health": "number (0-100)",
                "velocity_trend": "INCREASING|STABLE|DECREASING",
                "quality_trend": "IMPROVING|STABLE|DECLINING"
              }
            },
            "predictive_analytics": {
              "estimated_completion": {
                "projected_completion": "ISO_TIMESTAMP",
                "confidence_level": "number (0-100)"
              },
              "risk_indicators": "array of risk objects with probability and impact"
            },
            "trending_metadata": {
              "run_sequence": "number (incremental)",
              "previous_run_comparison": "object",
              "velocity_indicator": "FASTER|SLOWER|SAME",
              "success_rate": "number (0-1)"
            },
            "next_agent": "craftbuddy",
            "next_agent_input": {
              "workflow_id": "{workflow_id}",
              "implementation_complete": "boolean",
              "requirements_implemented": "number",
              "files_modified": "number",
              "cache_file": ".data/{workflow_id}_{trace_id}_previous_agent_output.json",
              "git_changes_ready": "boolean"
            },
            "agent_id": "string (agent identifier)",
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)"
          },
          "build_trace_id": "BUILD_20251009_032956_d27156c2",
          "build_timestamp": "2025-10-09T03:29:56.395901",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.395955",
            "build_trace_id": "BUILD_20251009_032956_d27156c2",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 38817,
        "last_modified": "2025-10-09T03:29:56.396360"
      },
      {
        "name": "Deep",
        "id": "deep",
        "file": "7_deep_from_craftsman_to_cipher.json",
        "franchise": "patrol",
        "polymorphic_schema": {
          "schema_class": "RequirementsGeneratorAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Requirements enumeration",
            "Priority classification",
            "Implementation phases",
            "Dependency mapping"
          ]
        },
        "json_data": {
          "agent_id": "deep",
          "agent_version": "1.0.0",
          "output_schema": {
            "recon_enumeration_id": "string (generated)",
            "timestamp": "string (ISO format)",
            "discovered_assets": {
              "domains": "array",
              "subdomains": "array",
              "ip_addresses": "array",
              "open_ports": "array",
              "services": "array",
              "urls": "array",
              "email_addresses": "array"
            },
            "technology_stack": {
              "web_servers": "array",
              "frameworks": "array",
              "databases": "array",
              "cloud_services": "array",
              "cdn_providers": "array",
              "security_tools": "array"
            },
            "attack_surface": {
              "exposed_services": "array",
              "admin_panels": "array",
              "api_endpoints": "array",
              "file_uploads": "array",
              "login_pages": "array",
              "sensitive_files": "array"
            },
            "osint_intelligence": {
              "leaked_credentials": "array",
              "employee_information": "array",
              "infrastructure_details": "array",
              "social_media_intel": "array",
              "code_repositories": "array",
              "certificate_data": "array"
            },
            "enumeration_results": {
              "total_commands_executed": "number",
              "successful_discoveries": "number",
              "tools_used": "array",
              "scan_coverage": "object",
              "vulnerability_indicators": "array"
            },
            "reconnaissance_workflow": {
              "phase_1_domain_intel": "object",
              "phase_2_subdomain_enum": "object",
              "phase_3_port_scanning": "object",
              "phase_4_service_enum": "object",
              "phase_5_web_discovery": "object",
              "phase_6_tech_detection": "object",
              "phase_7_osint_collection": "object",
              "phase_8_cloud_enum": "object",
              "phase_9_github_dorking": "object",
              "phase_10_vuln_scanning": "object"
            },
            "workflow_id": "string (from context)",
            "agent_id": "string (agent identifier)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)",
            "agent_name": "deep",
            "requirements_summary": {
              "total_requirements": "number (max 30)",
              "critical_count": "number",
              "high_count": "number",
              "medium_count": "number",
              "low_count": "number"
            },
            "implementation_phases": "object with phase breakdown",
            "dependency_graph": "object with dependency mapping"
          },
          "build_trace_id": "BUILD_20251009_032956_57bc873e",
          "build_timestamp": "2025-10-09T03:29:56.392532",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.392575",
            "build_trace_id": "BUILD_20251009_032956_57bc873e",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 16678,
        "last_modified": "2025-10-09T03:29:56.392830"
      },
      {
        "name": "Enforcer",
        "id": "enforcer",
        "file": "3_enforcer_from_architect_to_craftsman.json",
        "franchise": "patrol",
        "polymorphic_schema": {
          "schema_class": "RequirementsValidatorAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Requirements validation",
            "PAP compliance checking",
            "Feasibility assessment",
            "Implementation readiness"
          ]
        },
        "json_data": {
          "agent_id": "enforcer",
          "agent_version": "2.1.0",
          "output_schema": {
            "workflow_id": "string (FROM_SMART_INPUT_DISCOVERY)",
            "agent_name": "requirements_validator_agent",
            "timestamp": "string (ISO_TIMESTAMP)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "requirements_validated": "number",
              "approval_rate": "number (0-100)",
              "validation_accuracy": "number (0-100)"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "input_analysis": {
              "source_agent": "architect|oracle",
              "source_agent_type": "architect|oracle",
              "cache_file": "string",
              "total_requirements_received": "number",
              "validation_focus": "array of strings (context-dependent)",
              "historical_workflows_analyzed": "number",
              "coherence_issues_count": "number (0 if user input)",
              "user_requirements_received": "array of strings (empty if schema-generated)"
            },
            "validation_summary": {
              "requirements_validated": "number",
              "pap_compliant": "number",
              "feasible": "number",
              "implementation_ready": "number",
              "validation_issues": "number",
              "overall_status": "PASS|NEEDS_REVISION|FAIL"
            },
            "validation_results": {
              "pap_compliance": {
                "score": "string (percentage)",
                "compliant_requirements": "array of strings",
                "non_compliant_requirements": "array of strings",
                "compliance_issues": [
                  {
                    "req_id": "string",
                    "issue": "string",
                    "severity": "HIGH|MEDIUM|LOW",
                    "recommendation": "string"
                  }
                ]
              },
              "feasibility_assessment": {
                "realistic_estimates": "array of strings",
                "questionable_estimates": "array of strings",
                "estimate_issues": [
                  {
                    "req_id": "string",
                    "issue": "string",
                    "current_estimate": "string",
                    "recommended_estimate": "string",
                    "rationale": "string"
                  }
                ]
              },
              "dependency_validation": {
                "valid_dependencies": "array of strings",
                "circular_dependencies": "array of strings",
                "missing_dependencies": [
                  {
                    "req_id": "string",
                    "missing_dependency": "string",
                    "reason": "string"
                  }
                ]
              },
              "implementation_readiness": {
                "ready_requirements": "array of strings",
                "needs_refinement": "array of strings",
                "readiness_issues": [
                  {
                    "req_id": "string",
                    "issues": "array of strings",
                    "recommendations": "array of strings"
                  }
                ]
              }
            },
            "validated_requirements": {
              "approved_for_implementation": [
                {
                  "req_id": "string",
                  "status": "APPROVED",
                  "validation_notes": "string",
                  "implementation_priority": "CRITICAL|HIGH|MEDIUM|LOW",
                  "bonus_enhancements": "array of strings",
                  "implementation_ticket": {
                    "title": "string",
                    "description": "string",
                    "acceptance_criteria": "array of strings",
                    "files_to_create": "array of strings",
                    "files_to_modify": "array of strings",
                    "starting_point_tips": "array of strings",
                    "implementation_steps": "array of strings",
                    "testing_requirements": "array of strings",
                    "estimated_hours": "string",
                    "depends_on": "array of req_ids",
                    "watermark_locations": "array of strings"
                  }
                }
              ],
              "requires_revision": [
                {
                  "req_id": "string",
                  "status": "NEEDS_REVISION",
                  "validation_issues": "array of strings",
                  "required_changes": "array of strings"
                }
              ],
              "rejected": [
                {
                  "req_id": "string",
                  "status": "REJECTED",
                  "rejection_reason": "string"
                }
              ]
            },
            "final_recommendations": {
              "proceed_with_implementation": "boolean",
              "approved_requirements_count": "number",
              "revision_required_count": "number",
              "rejected_count": "number",
              "estimated_revision_time": "string",
              "implementation_order": "array of strings",
              "next_steps": "array of strings",
              "bonus_value_summary": "string"
            },
            "workflow_completion": {
              "gap_analysis_complete": "boolean",
              "requirements_generated": "boolean",
              "validation_complete": "boolean",
              "ready_for_implementation": "boolean",
              "cache_files": "array of strings",
              "compression_applied": "boolean"
            },
            "system_contributions": {
              "agent_system_summary_updated": "boolean",
              "workflow_efficiency_improved": "boolean",
              "storage_optimization_applied": "boolean",
              "cross_workflow_learnings_captured": "boolean"
            },
            "next_agent": "craftsman",
            "next_agent_input": {
              "workflow_id": "string (FROM_SMART_INPUT_DISCOVERY)",
              "approved_requirements_count": "number",
              "revision_required_count": "number",
              "rejected_count": "number",
              "cache_file": "string (.data path)",
              "implementation_focus": "array of strings",
              "priority_requirements": "array of req_ids",
              "bonus_considerations": "array of strings",
              "compression_status": "object"
            },
            "agent_id": "string (agent identifier)",
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)"
          },
          "build_trace_id": "BUILD_20251009_032956_83c4a0ef",
          "build_timestamp": "2025-10-09T03:29:56.399557",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.399599",
            "build_trace_id": "BUILD_20251009_032956_83c4a0ef",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 30915,
        "last_modified": "2025-10-09T03:29:56.399954"
      },
      {
        "name": "Gatekeeper",
        "id": "gatekeeper",
        "file": "5_gatekeeper_from_craftsman_to_deep_pathfinder.json",
        "franchise": "patrol",
        "polymorphic_schema": {
          "schema_class": "GatePromoteAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Cross-agent validation",
            "Git operations",
            "Gate decision making",
            "Workflow completion"
          ]
        },
        "json_data": {
          "agent_id": "gatekeeper",
          "agent_version": "1.0.0",
          "output_schema": {
            "workflow_id": "string (wf_0f432a3ac836)",
            "agent_name": "gate_promote_agent",
            "timestamp": "string (ISO_TIMESTAMP)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "validation_success_rate": "number (0-100)",
              "gate_decision_accuracy": "number (0-100)",
              "cycle_improvement_score": "number (0-100)"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "input_analysis": {
              "source_agent": "craftsman",
              "cache_file": ".data/wf_0f432a3ac836_implementation_results.json",
              "all_previous_agents_loaded": "boolean",
              "workflow_history_complete": "boolean"
            },
            "cross_agent_validation": {
              "agent_1_schema_analysis_validation": {
                "original_coherence_issues": "number (47)",
                "issues_addressed": "number",
                "issues_remaining": "number",
                "original_fake_markers": "number (892)",
                "fake_markers_removed": "number",
                "fake_markers_remaining": "number",
                "original_aws_references": "number",
                "aws_references_removed": "number",
                "aws_references_remaining": "number",
                "original_pap_compliance": "string (89%)",
                "current_pap_compliance": "string",
                "compliance_improved": "boolean",
                "validation_score": "string (percentage)"
              },
              "agent_2_requirements_validation": {
                "total_requirements_generated": "number",
                "requirements_implemented": "number",
                "requirements_not_implemented": "number",
                "implementation_chunks_completed": "number",
                "implementation_chunks_failed": "number",
                "file_modifications_matched": "boolean",
                "testing_requirements_met": "boolean",
                "validation_score": "string (percentage)"
              },
              "agent_3_validation_compliance": {
                "approved_requirements_count": "number",
                "approved_requirements_implemented": "number",
                "rejected_requirements_attempted": "number",
                "acceptance_criteria_met": "number",
                "acceptance_criteria_failed": "number",
                "dependency_order_respected": "boolean",
                "validation_score": "string (percentage)"
              },
              "agent_4_implementation_verification": {
                "claimed_files_modified": "number",
                "actual_files_modified": "number",
                "claimed_tests_passed": "number",
                "actual_tests_passed": "number",
                "claimed_requirements_implemented": "number",
                "verified_requirements_implemented": "number",
                "implementation_accuracy": "string (percentage)"
              }
            },
            "git_operations": {
              "pre_validation_git_status": {
                "working_directory_clean": "boolean",
                "modified_files": "array of strings",
                "untracked_files": "array of strings",
                "staged_files": "array of strings"
              },
              "git_diff_analysis": {
                "total_files_changed": "number",
                "lines_added": "number",
                "lines_removed": "number",
                "lines_modified": "number",
                "diff_summary": "string",
                "modified_files_detail": [
                  {
                    "file_path": "string",
                    "lines_added": "number",
                    "lines_removed": "number",
                    "modification_type": "string"
                  }
                ]
              },
              "staging_operations": {
                "files_staged_for_commit": "array of strings",
                "staging_successful": "boolean",
                "staging_issues": "array of strings"
              },
              "commit_operations": {
                "commit_message_generated": "string",
                "commit_executed": "boolean",
                "commit_hash": "string",
                "commit_issues": "array of strings"
              }
            },
            "llm_collector_final_comparison": {
              "original_state": {
                "total_files": "number (179)",
                "total_lines": "number (46236)",
                "fake_markers_count": "number (892)",
                "aws_references_count": "number",
                "pap_compliance_score": "string (89%)"
              },
              "current_state": {
                "total_files": "number",
                "total_lines": "number",
                "fake_markers_count": "number",
                "aws_references_count": "number",
                "pap_compliance_score": "string"
              },
              "improvements_achieved": {
                "fake_markers_removed": "number",
                "aws_references_removed": "number",
                "compliance_improvement": "string",
                "new_issues_introduced": "number",
                "overall_improvement_score": "string (percentage)"
              }
            },
            "gap_closure_analysis": {
              "original_gaps_total": "number (47)",
              "gaps_closed_successfully": "number",
              "gaps_partially_addressed": "number",
              "gaps_remaining": "number",
              "new_gaps_introduced": "number",
              "gap_closure_percentage": "string (percentage)",
              "detailed_gap_status": [
                {
                  "gap_id": "string",
                  "original_description": "string",
                  "closure_status": "CLOSED|PARTIAL|REMAINING|NEW",
                  "implementation_evidence": "string",
                  "validation_result": "boolean"
                }
              ]
            },
            "gate_promotion_decision": {
              "overall_validation_score": "string (percentage)",
              "validation_threshold_met": "boolean (>= 100%)",
              "gate_decision": "PASS|FAIL",
              "gate_decision_reasoning": "string",
              "critical_issues_blocking": "array of strings",
              "workflow_completion_status": "COMPLETE|REPEAT_CYCLE"
            },
            "workflow_cycle_management": {
              "current_cycle_complete": "boolean",
              "next_cycle_required": "boolean",
              "next_cycle_focus_areas": "array of strings",
              "remaining_work_estimate": "string",
              "cycle_repetition_reason": "string"
            },
            "next_agent_routing": {
              "route_to": "craftsman|pathfinder",
              "next_workflow_id": "string (if repeating)",
              "handoff_data": {
                "previous_cycle_results": "object",
                "remaining_gaps": "array of gap objects",
                "new_issues_detected": "array of issue objects",
                "focus_areas_next_cycle": "array of strings",
                "lessons_learned": "array of strings"
              }
            },
            "audit_trail": {
              "validation_steps_executed": "array of strings",
              "git_commands_executed": "array of strings",
              "llm_collector_runs": "array of timestamps",
              "cross_agent_validations": "array of validation objects",
              "decision_points": "array of decision objects",
              "complete_workflow_history": "object"
            },
            "cycle_analytics": {
              "cycle_number": "number",
              "previous_cycle_results": "object",
              "improvement_metrics": {
                "pap_compliance_improvement": "number",
                "issue_resolution_improvement": "number",
                "velocity_improvement": "number"
              },
              "next_cycle_recommendations": "array of recommendations",
              "cross_cycle_trends": {
                "performance_trend": "IMPROVING|STABLE|DECLINING",
                "efficiency_trend": "FASTER|SAME|SLOWER",
                "quality_trend": "HIGHER|SAME|LOWER"
              }
            },
            "trending_metadata": {
              "run_sequence": "number (incremental)",
              "historical_performance": "array of previous run metrics",
              "velocity_indicator": "FASTER|SLOWER|SAME",
              "success_rate_trend": "number (0-1)",
              "completion_time_trend": "DECREASING|STABLE|INCREASING"
            },
            "agent_id": "string (agent identifier)",
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)"
          },
          "build_trace_id": "BUILD_20251009_032956_873e4336",
          "build_timestamp": "2025-10-09T03:29:56.402650",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.402696",
            "build_trace_id": "BUILD_20251009_032956_873e4336",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 35364,
        "last_modified": "2025-10-09T03:29:56.403075"
      },
      {
        "name": "Glitch",
        "id": "glitch",
        "file": "9_glitch_from_cipher_to_zero.json",
        "franchise": "patrol",
        "polymorphic_schema": {
          "schema_class": "ImplementationAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Code implementation",
            "Test execution",
            "File modifications",
            "Git preparation"
          ]
        },
        "json_data": {
          "agent_id": "glitch",
          "agent_version": "1.0.0",
          "output_schema": {
            "glitch_exploitation_id": "string (generated)",
            "timestamp": "string (ISO format)",
            "attack_chain_execution": {
              "multi_stage_attacks": "array",
              "exploit_chains": "array",
              "docker_deployments": "array",
              "metasploit_modules": "array"
            },
            "custom_exploit_development": {
              "xss_payloads": "array",
              "sqli_exploits": "array",
              "buffer_overflows": "array",
              "deserialization_attacks": "array",
              "privilege_escalation": "array"
            },
            "successful_compromises": {
              "system_access": "array",
              "data_exfiltration": "array",
              "persistent_access": "array",
              "lateral_movement": "array"
            },
            "automation_results": {
              "python_attack_scripts": "array",
              "docker_attack_containers": "array",
              "automated_exploits": "array",
              "payload_deployments": "array"
            },
            "advanced_techniques": {
              "stealth_methods": "array",
              "anti_detection": "array",
              "persistence_mechanisms": "array",
              "custom_malware": "array"
            },
            "workflow_id": "string (from context)",
            "agent_id": "string (agent identifier)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)",
            "agent_name": "glitch",
            "implementation_summary": {
              "requirements_implemented": "number",
              "files_modified": "number",
              "tests_executed": "number",
              "tests_passed": "number",
              "acceptance_criteria_met": "number"
            },
            "detailed_implementation_results": "array of implementation objects",
            "git_preparation": {
              "files_staged_for_commit": "array of strings",
              "ready_for_gate_promotion": "boolean"
            }
          },
          "build_trace_id": "BUILD_20251009_032956_d1beb722",
          "build_timestamp": "2025-10-09T03:29:56.396669",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.396707",
            "build_trace_id": "BUILD_20251009_032956_d1beb722",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 16657,
        "last_modified": "2025-10-09T03:29:56.396951"
      },
      {
        "name": "Harmony",
        "id": "harmony",
        "file": "harmony_from_user.json",
        "franchise": "patrol",
        "polymorphic_schema": {
          "schema_class": "SchemaReconcilerAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "File analysis summary",
            "Coherence issue detection",
            "PAP compliance scoring",
            "Detailed findings reporting"
          ]
        },
        "json_data": {
          "agent_id": "harmony",
          "agent_version": "1.0.0",
          "output_schema": {
            "harmony_assessment_id": "string (generated)",
            "timestamp": "string (ISO format)",
            "harmony_mode": "full_coherence|schema_sync|prompt_alignment|flow_update|user_adaptation",
            "current_directory": "string (pwd output)",
            "system_analysis": {
              "agents_analyzed": "array of agent file paths",
              "agents_found": "number",
              "agents_missing": "array of missing agent files",
              "prompt_coherence_score": "number (0-100)",
              "schema_coherence_score": "number (0-100)",
              "flow_coherence_score": "number (0-100)"
            },
            "schema_validation": {
              "schema_files_checked": "array of schema file paths",
              "schema_versions_consistent": "boolean",
              "agent_definitions_aligned": "boolean",
              "flow_relationships_valid": "boolean",
              "schema_inconsistencies": "array of inconsistency descriptions"
            },
            "mermaid_coherence": {
              "config_file_status": "PERFECT_ALIGNMENT",
              "generated_diagram_status": "PERFECT_CURRENT",
              "node_styles_complete": true,
              "agent_coverage_complete": true,
              "agent_names_perfect": true,
              "flow_routing_perfect": true,
              "schema_alignment_perfect": true,
              "styling_inconsistencies": [],
              "perfect_coherence_achieved": true,
              "coherence_confidence_score": 100
            },
            "documentation_coherence": {
              "flow_generator_status": "FUNCTIONAL|ISSUES|MISSING",
              "html_documentation_status": "CURRENT|OUTDATED|MISSING",
              "standalone_files_status": "COMPLETE|PARTIAL|MISSING",
              "documentation_inconsistencies": "array of doc issues"
            },
            "coherence_maintenance": {
              "polymorphic_updates_performed": "boolean",
              "environment_context_updated": "boolean",
              "agent_prompts_synchronized": "boolean",
              "schemas_synchronized": "boolean",
              "flow_diagrams_regenerated": "boolean"
            },
            "user_adaptation": {
              "user_requirement_processed": "string|null",
              "adaptations_made": "array of adaptation descriptions",
              "new_agents_added": "array of new agent names",
              "flow_modifications": "array of flow changes",
              "styling_updates": "array of styling changes"
            },
            "harmony_verdict": {
              "overall_coherence_score": "number (0-100)",
              "system_harmony_status": "PERFECT_HARMONY|MINOR_DISCORD|MAJOR_DISCORD|CHAOS",
              "critical_issues_found": "number",
              "improvements_made": "number",
              "harmony_confidence": "number (0-100)",
              "system_ready_for_use": "boolean"
            },
            "improvements_made": {
              "prompts_updated": "array of updated agent IDs",
              "schemas_corrected": "array of schema corrections",
              "documentation_regenerated": "boolean",
              "flow_diagrams_updated": "boolean",
              "styling_improved": "boolean",
              "coherence_issues_resolved": "number"
            },
            "next_maintenance": {
              "recommended_interval": "string (duration)",
              "next_check_date": "string (ISO format)",
              "priority_areas": "array of areas needing attention",
              "proactive_improvements": "array of suggested improvements"
            },
            "workflow_id": "string (from context)",
            "agent_name": "harmony",
            "execution_metrics": {
              "start_time": "string (ISO format)",
              "end_time": "string (ISO format)",
              "duration_seconds": "number",
              "files_analyzed": "number",
              "changes_made": "number"
            },
            "performance_metrics": {
              "coherence_detection_accuracy": "number (0-100)",
              "maintenance_efficiency": "EXCELLENT|GOOD|FAIR|POOR",
              "system_improvement_score": "number (0-100)",
              "harmony_maintenance_quality": "number (0-100)"
            },
            "communication_to_origin": {
              "harmony_report_created": "boolean",
              "system_status_communicated": "boolean",
              "next_agent_recommendation": "string (origin_agent)"
            },
            "bonus_contributions": {
              "proactive_optimizations": "array of optimizations made",
              "architectural_insights": "array of insights provided",
              "system_health_improvements": "number",
              "documentation_enhancements": "array of enhancements",
              "contribution_value_score": "number (0-100)"
            },
            "harmony_insights_for_dashboard": {
              "insights_json_generated": "boolean",
              "insights_file_path": "string (docs/harmony_ecosystem_insights.json)",
              "ecosystem_analysis_complete": "boolean",
              "architectural_insights_documented": "boolean",
              "flow_dynamics_analyzed": "boolean",
              "recommendations_provided": "array of harmony recommendations"
            },
            "innovation_analysis": {
              "cost_efficiency_opportunities": "array of cost reduction recommendations with file paths and evidence",
              "performance_enhancement_recommendations": "array of performance improvements with implementation details",
              "business_value_maximization_strategies": "array of ROI-focused enhancements",
              "competitive_advantage_innovations": "array of breakthrough capability opportunities",
              "resource_optimization_analysis": "object with current vs optimized resource usage"
            },
            "actionable_tickets": {
              "generated_tickets": "array of specific implementation tickets",
              "ticket_format": "object with id, title, priority, file_paths, current_state, desired_state, implementation_approach, business_justification",
              "total_tickets_generated": "number",
              "priority_breakdown": "object with high/medium/low priority counts"
            },
            "agent_id": "string (agent identifier)",
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)",
            "analysis_summary": {
              "total_files_analyzed": "number",
              "coherence_issues_found": "number",
              "fake_demo_markers_total": "number",
              "pap_compliance_score": "string (percentage)"
            },
            "detailed_findings": "array of issue objects",
            "pap_layer_compliance": "object with layer breakdown"
          },
          "build_trace_id": "BUILD_20251009_032956_3dbd5994",
          "build_timestamp": "2025-10-09T03:29:56.394101",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.394162",
            "build_trace_id": "BUILD_20251009_032956_3dbd5994",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 30115,
        "last_modified": "2025-10-09T03:29:56.394497"
      },
      {
        "name": "Mama Bear",
        "id": "mama_bear",
        "file": "mama_bear_from_user.json",
        "franchise": "patrol",
        "polymorphic_schema": {
          "schema_class": "GatePromoteAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Cross-agent validation",
            "Git operations",
            "Gate decision making",
            "Workflow completion"
          ]
        },
        "json_data": {
          "agent_id": "mama_bear",
          "agent_version": "1.0.0",
          "output_schema": {
            "assessment_id": "string (generated)",
            "timestamp": "string (ISO format)",
            "mama_bear_mode": "full_assessment|critical_only|security_focus|customer_protection",
            "current_directory": "string (pwd output)",
            "agent_analysis": {
              "agents_analyzed": "array of agent file paths",
              "agent_outputs_found": "array of cache files analyzed",
              "agents_missing": "array of missing agent files",
              "total_agents_in_system": "number"
            },
            "production_readiness_gates": {
              "gate_1_revenue_threats": {
                "status": "PASSED|FAILED",
                "issues_found": "number",
                "critical_issues": "array of issue descriptions"
              },
              "gate_2_customer_embarrassments": {
                "status": "PASSED|FAILED",
                "issues_found": "number",
                "embarrassing_issues": "array of issue descriptions"
              },
              "gate_3_pap_violations": {
                "status": "PASSED|FAILED",
                "issues_found": "number",
                "architecture_violations": "array of issue descriptions"
              },
              "gate_4_security_vulnerabilities": {
                "status": "PASSED|FAILED",
                "issues_found": "number",
                "security_risks": "array of issue descriptions"
              },
              "gate_5_test_contamination": {
                "status": "PASSED|FAILED",
                "issues_found": "number",
                "test_code_found": "array of contamination locations"
              }
            },
            "issue_categorization": {
              "critical_issues": {
                "count": "number",
                "categories": "array (revenue_threatening, test_contamination)",
                "blocking_production": "boolean",
                "details": "array of critical issue objects"
              },
              "high_issues": {
                "count": "number",
                "categories": "array (customer_embarrassing, security_risk)",
                "risky_for_production": "boolean",
                "details": "array of high issue objects"
              },
              "medium_issues": {
                "count": "number",
                "categories": "array (pap_violation, performance_issue)",
                "acceptable_for_production": "boolean",
                "details": "array of medium issue objects"
              },
              "low_issues": {
                "count": "number",
                "categories": "array (documentation_missing)",
                "ignorable_for_production": "boolean",
                "details": "array of low issue objects"
              }
            },
            "mama_bear_verdict": {
              "production_ready": "boolean",
              "confidence_level": "number (0-100)",
              "verdict_code": "APPROVED|RISKY|BLOCKED",
              "mama_bear_message": "string (worried mother assessment)",
              "recommendation_to_origin": "APPROVE_PRODUCTION|CAUTION_PRODUCTION|BLOCK_PRODUCTION",
              "fix_these_first": "array of must-fix issues before production"
            },
            "agent_performance_analysis": {
              "best_performing_agents": "array of agent_ids with scores",
              "agents_with_issues": "array of agent_ids with problems",
              "overall_agent_system_health": "EXCELLENT|GOOD|FAIR|POOR",
              "agent_coordination_effectiveness": "number (0-100)"
            },
            "workflow_id": "string (from context)",
            "agent_name": "mama_bear_agent",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "assessment_thoroughness": "number (0-100)",
              "issue_detection_accuracy": "number (0-100)",
              "production_safety_score": "number (0-100)"
            },
            "communication_to_origin": {
              "structured_message_created": "boolean",
              "communication_file_path": "string (.data/mama_bear_to_origin_communication.json)",
              "origin_agent_handoff": "boolean",
              "next_agent_recommendation": "string (origin_agent)"
            },
            "bonus_contributions": {
              "extra_security_scans_performed": "boolean",
              "proactive_issue_prevention": "array of preventive measures",
              "code_quality_improvements_suggested": "number",
              "architectural_insights_provided": "number",
              "customer_protection_enhancements": "array of protection measures",
              "contribution_value_score": "number (0-100)"
            },
            "agent_id": "string (agent identifier)",
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)",
            "cross_agent_validation": "object with validation results",
            "git_operations": {
              "commit_operations": "object",
              "staging_operations": "object"
            },
            "gate_promotion_decision": {
              "overall_validation_score": "string (percentage)",
              "gate_decision": "PASS|CONDITIONAL_PASS|FAIL",
              "workflow_completion_status": "COMPLETE|REPEAT_CYCLE"
            }
          },
          "build_trace_id": "BUILD_20251009_032956_50a55abf",
          "build_timestamp": "2025-10-09T03:29:56.400409",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.400458",
            "build_trace_id": "BUILD_20251009_032956_50a55abf",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 33041,
        "last_modified": "2025-10-09T03:29:56.400865"
      },
      {
        "name": "Oracle",
        "id": "oracle",
        "file": "1b_oracle_from_user_to_architect.json",
        "franchise": "patrol",
        "polymorphic_schema": {
          "schema_class": "UserInputTranslatorAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Input processing",
            "Requirements extraction",
            "Translation accuracy",
            "Structured output generation"
          ]
        },
        "json_data": {
          "agent_id": "oracle",
          "agent_version": "2.0.0",
          "output_schema": {
            "workflow_id": "string (from previous agent or user input)",
            "agent_name": "requirements_analysis_agent",
            "source_agent_type": "oracle",
            "timestamp": "string (ISO_TIMESTAMP)",
            "client_directory": "CLIENT_DIR_ABSOLUTE",
            "workflow_specification": "string (path to workflow spec file)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "requirements_generated": "number",
              "complexity_score": "number (0-100)",
              "dependency_accuracy": "number (0-100)"
            },
            "client_codebase_analysis": {
              "llm_collector_run": "boolean",
              "total_files_analyzed": "number",
              "existing_components_identified": "array of components",
              "pap_layer_mapping": "object with layer breakdown",
              "integration_points": "array of integration opportunities"
            },
            "input_analysis": {
              "source_agent": "USER_INPUT",
              "cache_file": ".data/{workflow_id}_user_input_specifications.json",
              "user_requirements_received": "array of strings",
              "workflow_spec_processed": "string",
              "user_priorities_identified": "array of strings"
            },
            "requirements_summary": {
              "total_requirements": "number (max 30)",
              "total_subtasks": "number",
              "critical_count": "number (max 8)",
              "high_count": "number (max 10)",
              "medium_count": "number (max 8)",
              "low_count": "number (max 4)",
              "estimated_total_effort": "string",
              "total_effort_hours": "number",
              "files_affected_count": "number"
            },
            "implementation_phases": {
              "phase_1_critical": {
                "description": "Critical features for CLIENT_DIRECTORY implementation",
                "estimated_duration": "string",
                "total_requirements": "number (max 8)",
                "total_effort_hours": "number",
                "requirements": [
                  {
                    "req_id": "string (REQ-LAYER-###)",
                    "title": "string (specific to CLIENT_DIRECTORY)",
                    "description": "string (implementation in client codebase)",
                    "priority": "CRITICAL",
                    "effort_estimate": "string (X hours with breakdown)",
                    "source_issue_ids": "array (from workflow spec or user input)",
                    "affected_files": [
                      {
                        "path": "string (CLIENT_DIRECTORY file path)",
                        "lines_affected": "string (estimated ranges)",
                        "modification_type": "add|refactor|remove|replace",
                        "before_code_sample": "string (WARP-DEMO current client code)",
                        "after_code_sample": "string (WARP-DEMO expected implementation)"
                      }
                    ],
                    "dependencies": {
                      "requires": "array of req_ids",
                      "blocks": "array of req_ids",
                      "parallel_with": "array of req_ids"
                    },
                    "pap_layer": "data|web|api",
                    "components_affected": [
                      {
                        "component_name": "string (client component)",
                        "current_status": "MISSING|PARTIAL|FAKE|EXISTS",
                        "target_status": "REAL",
                        "modification_scope": "interface|implementation|configuration"
                      }
                    ],
                    "acceptance_criteria": "array of testable criteria",
                    "implementation_chunks": [
                      {
                        "chunk_id": "string",
                        "title": "string",
                        "description": "string",
                        "effort_hours": "number (max 12)",
                        "deliverable": "string"
                      }
                    ],
                    "testing_requirements": {
                      "unit_tests": "array of test names",
                      "integration_tests": "array of test names",
                      "validation_tests": "array of test names"
                    },
                    "configuration_changes": [
                      {
                        "file": "string (CLIENT_DIRECTORY config file)",
                        "section": "string",
                        "changes": "string"
                      }
                    ],
                    "fake_components_to_replace": [
                      {
                        "current_fake": "string (WARP-DEMO placeholder)",
                        "replacement": "string (workflow spec implementation)",
                        "location": "string (CLIENT_DIRECTORY file:lines)"
                      }
                    ],
                    "implementation_ticket": {
                      "title": "string (clear, actionable ticket title)",
                      "description": "string (detailed implementation description)",
                      "acceptance_criteria": "array of strings (testable criteria)",
                      "files_to_create": "array of strings (new file paths in CLIENT_DIRECTORY)",
                      "files_to_modify": "array of strings (existing file paths to modify)",
                      "starting_point_tips": [
                        "string (tip referencing existing CLIENT_DIRECTORY components)",
                        "string (tip about integration patterns)",
                        "string (tip about WARP-DEMO watermark locations)",
                        "string (tip about testing approach)"
                      ],
                      "implementation_steps": [
                        "string (step 1: setup/preparation)",
                        "string (step 2: core implementation)",
                        "string (step 3: integration)",
                        "string (step 4: testing)",
                        "string (step 5: validation)"
                      ],
                      "testing_requirements": [
                        "string (unit test specification)",
                        "string (integration test specification)",
                        "string (e2e test specification with WARP-DEMO data)",
                        "string (background task testing approach)"
                      ],
                      "estimated_hours": "string (from effort_estimate)",
                      "depends_on": "array of req_ids (dependencies)",
                      "watermark_locations": [
                        "string (specific file:location for WARP-DEMO watermarks)",
                        "string (test data watermark locations)",
                        "string (UI component watermark locations)"
                      ],
                      "codebase_integration_points": [
                        "string (existing component to extend/integrate)",
                        "string (configuration file to update)",
                        "string (database schema to modify)"
                      ]
                    }
                  }
                ]
              },
              "phase_2_high": {
                "description": "string",
                "estimated_duration": "string",
                "total_requirements": "number (max 10)",
                "requirements": "array (same detailed structure as phase_1)"
              },
              "phase_3_medium": {
                "description": "string",
                "estimated_duration": "string",
                "total_requirements": "number (max 8)",
                "requirements": "array (same detailed structure as phase_1)"
              },
              "phase_4_low": {
                "description": "string",
                "estimated_duration": "string",
                "total_requirements": "number (max 4)",
                "requirements": "array (same detailed structure as phase_1)"
              }
            },
            "dependency_graph": {
              "description": "Implementation dependency mapping for CLIENT_DIRECTORY",
              "total_dependencies": "number",
              "critical_path_requirements": "array of req_ids",
              "dependencies": {
                "REQ_ID": {
                  "depends_on": "array of req_ids",
                  "blocks": "array of req_ids",
                  "parallel_with": "array of req_ids",
                  "critical_path": "boolean",
                  "estimated_delay_if_blocked": "string"
                }
              }
            },
            "implementation_timeline": {
              "total_duration": "string",
              "weekly_breakdown": [
                {
                  "week": "number",
                  "focus_area": "string (CLIENT_DIRECTORY area)",
                  "requirements_to_complete": "array of req_ids",
                  "estimated_hours": "number",
                  "key_deliverables": "array of strings",
                  "risk_factors": "array of strings"
                }
              ],
              "resource_allocation": {
                "senior_developer_hours": "number",
                "mid_developer_hours": "number",
                "qa_testing_hours": "number",
                "devops_hours": "number"
              }
            },
            "validation_metrics": {
              "coverage_percentage": "100%",
              "requirements_with_file_paths": "number",
              "requirements_with_line_numbers": "number",
              "requirements_with_code_samples": "number",
              "client_integration_points": "number",
              "critical_path_duration": "string"
            },
            "next_agent": "architect",
            "next_agent_input": {
              "workflow_id": "string (from user input)",
              "total_requirements": "number",
              "critical_requirements": "array of req_ids",
              "cache_file": ".data/{workflow_id}_requirements_analysis.json",
              "validation_focus": [
                "CLIENT_DIRECTORY implementation feasibility",
                "Workflow spec to client code mapping accuracy",
                "Existing component integration validation",
                "PAP compliance for WARPCORE integration",
                "Implementation effort and timeline realism"
              ],
              "source_type": "user_input"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "agent_id": "string (agent identifier)",
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)",
            "translation_summary": {
              "raw_input_processed": "boolean",
              "structured_requirements_generated": "number",
              "translation_confidence": "number (0-100)",
              "input_complexity_score": "number (0-100)"
            },
            "translation_results": {
              "processed_input": "string",
              "extracted_requirements": "array of requirement objects",
              "validation_status": "VALID|NEEDS_REVIEW|INVALID"
            }
          },
          "build_trace_id": "BUILD_20251009_032956_68c174c1",
          "build_timestamp": "2025-10-09T03:29:56.398822",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.398860",
            "build_trace_id": "BUILD_20251009_032956_68c174c1",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 26738,
        "last_modified": "2025-10-09T03:29:56.399238"
      },
      {
        "name": "Origin",
        "id": "origin",
        "file": "0a_origin_from_none_to_boss.json",
        "franchise": "patrol",
        "polymorphic_schema": {
          "schema_class": "BootstrapAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "System health validation",
            "Agent discovery results",
            "Bootstrap configuration",
            "Orchestrator preparation"
          ]
        },
        "json_data": {
          "agent_id": "origin",
          "agent_version": "1.0.0",
          "output_schema": {
            "patrol_recon_id": "string (generated)",
            "timestamp": "string (ISO format)",
            "external_attack_surface": {
              "exposed_k8s_services": "array",
              "public_github_repos": "array",
              "container_vulnerabilities": "array",
              "dns_enumeration": "array",
              "cloud_metadata_exposure": "object",
              "network_scan_results": "object"
            },
            "vulnerability_assessment": {
              "critical_findings": "array",
              "high_risk_exposures": "array",
              "external_attack_vectors": "array",
              "exploitability_score": "number (0-100)"
            },
            "reconnaissance_methods": {
              "techniques_used": "array",
              "tools_executed": "array",
              "external_reproducible": "boolean",
              "ethical_compliance": "boolean"
            },
            "devops_security_posture": {
              "k8s_security_score": "number (0-100)",
              "container_security": "object",
              "cicd_exposure": "object",
              "repo_security": "object"
            },
            "next_agent_handoff": {
              "target_agent": "boss",
              "handoff_data": "object",
              "cache_file_created": "string",
              "recon_complete": "boolean"
            },
            "workflow_id": "string (from context)",
            "agent_id": "string (agent identifier)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "bootstrap_success_rate": "number (0-100)",
              "agent_discovery_accuracy": "number (0-100)",
              "system_readiness_score": "number (0-100)"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)",
            "agent_name": "origin",
            "bootstrap_mode": "fresh_start|full_steam_continue|emergency_restart",
            "system_health": {
              "warpcore_directory_valid": "boolean",
              "all_agents_discovered": "boolean",
              "agent_discovery_results": "object",
              "overall_health_status": "HEALTHY|DEGRADED|CRITICAL"
            },
            "agent_0_launch": {
              "orchestrator_config_loaded": "boolean",
              "bootstrap_input_prepared": "boolean",
              "agent_0_execution_success": "boolean"
            }
          },
          "build_trace_id": "BUILD_20251009_032956_e0696769",
          "build_timestamp": "2025-10-09T03:29:56.397473",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.397514",
            "build_trace_id": "BUILD_20251009_032956_e0696769",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 14939,
        "last_modified": "2025-10-09T03:29:56.397845"
      },
      {
        "name": "Pathfinder",
        "id": "pathfinder",
        "file": "1a_pathfinder_from_boss_to_architect.json",
        "franchise": "patrol",
        "polymorphic_schema": {
          "schema_class": "SchemaReconcilerAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "File analysis summary",
            "Coherence issue detection",
            "PAP compliance scoring",
            "Detailed findings reporting"
          ]
        },
        "json_data": {
          "agent_id": "pathfinder",
          "agent_version": "1.0.0",
          "output_schema": {
            "workflow_id": "string (wf_generated_uuid)",
            "agent_name": "schema_coherence_reconciler_agent",
            "timestamp": "string (ISO_TIMESTAMP)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR",
              "issues_identified": "number",
              "files_analyzed": "number",
              "compliance_score": "number (0-100)"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "analysis_summary": {
              "total_files_analyzed": "number",
              "total_lines": "number",
              "pap_compliance_score": "string (percentage)",
              "coherence_issues_found": "number",
              "fake_demo_markers_total": "number",
              "architectural_violations_total": "number"
            },
            "detailed_file_analysis": {
              "by_pap_layer": {
                "data_layer_files": "array of {file_path, status, issues_count, fake_markers_count}",
                "web_layer_files": "array of {file_path, status, issues_count, fake_markers_count}",
                "api_layer_files": "array of {file_path, status, issues_count, fake_markers_count}",
                "other_files": "array of {file_path, status, issues_count, fake_markers_count}"
              },
              "by_component_status": {
                "real_components": "array of {component_name, file_path, evidence, compliance_score}",
                "fake_demo_components": "array of {component_name, file_path, fake_patterns_found, line_numbers}",
                "partial_components": "array of {component_name, file_path, missing_functionality, completion_estimate}",
                "missing_components": "array of {component_name, expected_location, referenced_in, priority}"
              }
            },
            "layer_analysis": {
              "data_layer": {
                "total_files": "number",
                "real_components": "array of {name, file_path, classes, methods, compliance_notes}",
                "fake_components": "array of {name, file_path, fake_patterns, line_numbers, severity}",
                "missing_components": "array of {name, expected_path, referenced_in, impact}",
                "coherence_gaps": "array of {gap_description, files_affected, pap_rule_violated, fix_recommendation}",
                "compliance_score": "string (percentage with justification)"
              },
              "web_layer": {
                "total_files": "number",
                "real_components": "array of {name, file_path, classes, methods, compliance_notes}",
                "fake_components": "array of {name, file_path, fake_patterns, line_numbers, severity}",
                "missing_components": "array of {name, expected_path, referenced_in, impact}",
                "coherence_gaps": "array of {gap_description, files_affected, pap_rule_violated, fix_recommendation}",
                "compliance_score": "string (percentage with justification)"
              },
              "api_layer": {
                "total_files": "number",
                "real_components": "array of {name, file_path, classes, methods, compliance_notes}",
                "fake_components": "array of {name, file_path, fake_patterns, line_numbers, severity}",
                "missing_components": "array of {name, expected_path, referenced_in, impact}",
                "coherence_gaps": "array of {gap_description, files_affected, pap_rule_violated, fix_recommendation}",
                "compliance_score": "string (percentage with justification)"
              }
            },
            "schema_coherence_issues": [
              {
                "issue_id": "string",
                "type": "naming_inconsistency|interface_mismatch|architectural_violation|missing_component|fake_contamination",
                "location": "string (exact file path)",
                "line_numbers": "array of numbers",
                "description": "string (detailed description)",
                "current_state": "string (what exists now)",
                "expected_state": "string (what should exist)",
                "pap_rule_violated": "string (which PAP rule is broken)",
                "fix_recommendation": "string (specific actionable fix)",
                "estimated_effort": "string (hours/days)",
                "dependencies": "array of strings (other issues that must be fixed first)",
                "severity": "CRITICAL|HIGH|MEDIUM|LOW",
                "impact": "string (consequences of not fixing)"
              }
            ],
            "fake_demo_analysis": {
              "total_warp_markers": "number",
              "total_demo_markers": "number",
              "total_fake_markers": "number",
              "detailed_findings": [
                {
                  "file_path": "string",
                  "marker_type": "WARP|DEMO|FAKE",
                  "line_number": "number",
                  "content": "string (actual marker text)",
                  "context": "string (surrounding code context)",
                  "replacement_recommendation": "string"
                }
              ],
              "security_concerns": "array of {concern, file_path, line_number, risk_level}",
              "cleanup_priority": "array of strings (ordered by priority)"
            },
            "architectural_compliance": {
              "pap_flow_compliance": {
                "route_layer": "percentage with violations listed",
                "controller_layer": "percentage with violations listed",
                "orchestrator_layer": "percentage with violations listed",
                "provider_layer": "percentage with violations listed",
                "middleware_layer": "percentage with violations listed",
                "executor_layer": "percentage with violations listed"
              },
              "interface_consistency": "array of {interface_name, files_implementing, consistency_issues}",
              "naming_coherence": "array of {expected_name, actual_name, file_path, fix_needed}",
              "dependency_flow_violations": "array of {violation_description, files_involved, fix_recommendation}"
            },
            "cross_reference_validation": {
              "consistency_check_passed": "boolean",
              "validation_errors": "array of strings (if any inconsistencies found)",
              "data_integrity_score": "string (percentage)"
            },
            "next_agent": "architect",
            "next_agent_input": {
              "workflow_id": "string",
              "total_issues_found": "number",
              "critical_issues_count": "number",
              "priority_gaps": "array of strings (ordered by severity and impact)",
              "cache_file": "string",
              "focus_areas": "array of strings (areas requiring immediate attention)"
            },
            "detailed_findings": "array of issue objects",
            "pap_layer_compliance": "object with layer breakdown",
            "agent_id": "string (agent identifier)",
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)"
          },
          "build_trace_id": "BUILD_20251009_032956_af396a58",
          "build_timestamp": "2025-10-09T03:29:56.403460",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.403512",
            "build_trace_id": "BUILD_20251009_032956_af396a58",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 29661,
        "last_modified": "2025-10-09T03:29:56.403858"
      },
      {
        "name": "Zero",
        "id": "zero",
        "file": "10_zero_from_glitch_to_complete.json",
        "franchise": "patrol",
        "polymorphic_schema": {
          "schema_class": "GatePromoteAgentSchema",
          "base_features": [
            "Data compression tracking",
            "Bonus contributions identification",
            "Base execution metrics",
            "Universal validation rules",
            "Shared success criteria"
          ],
          "specific_features": [
            "Cross-agent validation",
            "Git operations",
            "Gate decision making",
            "Workflow completion"
          ]
        },
        "json_data": {
          "agent_id": "zero",
          "agent_version": "1.0.0",
          "output_schema": {
            "zero_debrief_id": "string (generated)",
            "timestamp": "string (ISO format)",
            "mission_executive_summary": {
              "operation_overview": "string",
              "success_metrics": "object",
              "critical_findings": "array",
              "overall_assessment": "string"
            },
            "agent_synthesis": {
              "deep_reconnaissance": "object",
              "cipher_vulnerabilities": "object",
              "glitch_exploitation": "object",
              "cross_agent_correlations": "array"
            },
            "battlefield_analysis": {
              "security_posture_assessment": "object",
              "compromised_systems": "array",
              "attack_surface_mapping": "object",
              "defensive_gaps": "array"
            },
            "compromise_timeline": {
              "reconnaissance_phase": "object",
              "vulnerability_discovery": "object",
              "exploitation_phase": "object",
              "post_exploitation": "object"
            },
            "strategic_intelligence": {
              "high_value_targets": "array",
              "persistent_access": "array",
              "lateral_movement_paths": "array",
              "data_exfiltration_opportunities": "array"
            },
            "mission_artifacts": {
              "remarkable_discoveries": "array",
              "custom_tools_created": "array",
              "novel_techniques": "array",
              "intelligence_assets": "array"
            },
            "recommendations": {
              "immediate_defensive_actions": "array",
              "strategic_security_improvements": "array",
              "ongoing_monitoring_requirements": "array",
              "future_operation_opportunities": "array"
            },
            "workflow_id": "string (from context)",
            "agent_id": "string (agent identifier)",
            "execution_metrics": {
              "start_time": "string (ISO_TIMESTAMP)",
              "end_time": "string (ISO_TIMESTAMP)",
              "duration_seconds": "number",
              "memory_usage_mb": "number",
              "cpu_usage_percent": "number"
            },
            "performance_metrics": {
              "output_quality_score": "number (0-100)",
              "efficiency_rating": "EXCELLENT|GOOD|FAIR|POOR"
            },
            "data_compression": {
              "compressed_past_workflows": "boolean",
              "compression_ratio": "number (0-1)",
              "archived_workflow_count": "number",
              "storage_saved_mb": "number",
              "compression_method": "gzip|json_minify|archive"
            },
            "bonus_contributions": {
              "extra_analysis_performed": "boolean",
              "additional_requirements_discovered": "number",
              "enhanced_validation_checks": "array of strings",
              "proactive_improvements_suggested": "number",
              "cross_workflow_insights": "array of insight objects",
              "contribution_value_score": "number (0-100)"
            },
            "client_dir_absolute": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "analysis_target": "string (/Users/shawn_meredith/code/pets/warpcore/src)",
            "agency_cache_dir": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency)",
            "target_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "system_agency_cache": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "work_against": "string (analyze /Users/shawn_meredith/code/pets/warpcore/src)",
            "cache_results_to_primary": "string (/Users/shawn_meredith/code/pets/warpcore/src/.agency/.data)",
            "cache_results_to_secondary": "string (/Users/shawn_meredith/code/pets/warpcore/src/agency/.data)",
            "data_write_location": "string (CACHE_DATA_HERE)",
            "cache_results_to": "string (WRITE_RESULTS_HERE)",
            "agent_name": "zero",
            "cross_agent_validation": "object with validation results",
            "git_operations": {
              "commit_operations": "object",
              "staging_operations": "object"
            },
            "gate_promotion_decision": {
              "overall_validation_score": "string (percentage)",
              "gate_decision": "PASS|CONDITIONAL_PASS|FAIL",
              "workflow_completion_status": "COMPLETE|REPEAT_CYCLE"
            }
          },
          "build_trace_id": "BUILD_20251009_032956_65608133",
          "build_timestamp": "2025-10-09T03:29:56.402005",
          "static_build_info": {
            "build_timestamp": "2025-10-09T03:29:56.402043",
            "build_trace_id": "BUILD_20251009_032956_65608133",
            "master_prompt_version": "2.0.0",
            "build_type": "STATIC_MERGED",
            "polymorphic_enhanced": true,
            "self_contained": true
          }
        },
        "file_size": 16185,
        "last_modified": "2025-10-09T03:29:56.402280"
      }
    ]
  }
}